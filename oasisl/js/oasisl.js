(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.derequire = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
// For more information about browser field, check out the browser field at https://github.com/substack/browserify-handbook#browser-field.

var styleElementsInsertedAtTop = [];

var insertStyleElement = function(styleElement, options) {
    var head = document.head || document.getElementsByTagName('head')[0];
    var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];

    options = options || {};
    options.insertAt = options.insertAt || 'bottom';

    if (options.insertAt === 'top') {
        if (!lastStyleElementInsertedAtTop) {
            head.insertBefore(styleElement, head.firstChild);
        } else if (lastStyleElementInsertedAtTop.nextSibling) {
            head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
        } else {
            head.appendChild(styleElement);
        }
        styleElementsInsertedAtTop.push(styleElement);
    } else if (options.insertAt === 'bottom') {
        head.appendChild(styleElement);
    } else {
        throw new Error('Invalid value for parameter \'insertAt\'. Must be \'top\' or \'bottom\'.');
    }
};

module.exports = {
    // Create a <link> tag with optional data attributes
    createLink: function(href, attributes) {
        var head = document.head || document.getElementsByTagName('head')[0];
        var link = document.createElement('link');

        link.href = href;
        link.rel = 'stylesheet';

        for (var key in attributes) {
            if ( ! attributes.hasOwnProperty(key)) {
                continue;
            }
            var value = attributes[key];
            link.setAttribute('data-' + key, value);
        }

        head.appendChild(link);
    },
    // Create a <style> tag with optional data attributes
    createStyle: function(cssText, attributes, extraOptions) {
        extraOptions = extraOptions || {};

        var style = document.createElement('style');
        style.type = 'text/css';

        for (var key in attributes) {
            if ( ! attributes.hasOwnProperty(key)) {
                continue;
            }
            var value = attributes[key];
            style.setAttribute('data-' + key, value);
        }

        if (style.sheet) { // for jsdom and IE9+
            style.innerHTML = cssText;
            style.sheet.cssText = cssText;
            insertStyleElement(style, { insertAt: extraOptions.insertAt });
        } else if (style.styleSheet) { // for IE8 and below
            insertStyleElement(style, { insertAt: extraOptions.insertAt });
            style.styleSheet.cssText = cssText;
        } else { // for Chrome, Firefox, and Safari
            style.appendChild(document.createTextNode(cssText));
            insertStyleElement(style, { insertAt: extraOptions.insertAt });
        }
    }
};

},{}],2:[function(require,module,exports){

/*
 * 数据处理
 */

var extractDataFromGridBySimple  = require("./simpleGrid");

function extractDataFromTable(tbl, opts) {

    var options = $(tbl).data("oasGrid").options, 
        head    = options.head,
        body    = options.body,
        $tableContainer,
        _data;
        
    $("body").append("<div class='oas-grid-convert-chart' style='display:none;'>");


    $tableContainer = $(".oas-grid-convert-chart");

    $tableContainer.oasGrid({
            type: "simple",
            head:head,
            body: body
    });

    $(".oas-grid-convert-chart").find("colgroup").remove();

    _data = extractDataFromGridBySimple($tableContainer.find("table"),opts);

    $tableContainer.remove();

    return _data;
}

module.exports = extractDataFromTable;

},{"./simpleGrid":3}],3:[function(require,module,exports){
(function (global){

/*
 * 数据处理
 */

var win          = global.window,
    doc          = win.document,
    _blankString = '__fcBLANK__',
    _blankNo     = 0;

var defaultOpts = {

    //指定行或者列为series，可选值为row或者column
    major: "row",

    //是否显示legend，如果为true，则使用列或者行中包含text的字段来作为legend
    useLabels: true,
    useLegend: true,

    labelSource: 0,
    legendSource: 0,

    //忽略的行索引数组
    ignoreRows: [],

    //忽略的列索引数组
    ignoreCols: [],              
    //表格中单元格为空或者无法转为数字时用次数字代替
    convertBlankTo: "0"

}

/**
 *  Used to remove all textNodes in an array of nodes. Textnodes get created
 *  inadvertently, when the table HTML has newline and space. Returns an
 *  array of nodes that is not an HTMLCollection and has only the non-text
 *  nodes in it.
 *
 *  @param {array} nodeArr Contains the array of nodes that have to be
 *  sanitized.
 */
function sanitizeNodesArray(nodeArr) {
    var l, i, sanitizedArr = [];
    for (i = 0, l = nodeArr.length; i < l; i += 1) {
        // if nodeType != 3 then the node is not a text node.
        if (nodeArr[i].nodeType !== 3) {
            sanitizedArr.push(nodeArr[i]);
        }
    }
    return sanitizedArr;
}

/**
 * Used to merge two JSON objects. The copy is a deep copy and not a
 * reference copy.
 *
 * @param: {object} srcJSON, the source json.
 *
 * @param: {object} targetJSON, that json that needs to be merged with the
 * source json.
 *
 */
function mergeJSON(srcJSON, targetJSON) {
    var i,
        len,
        item;

    if (targetJSON instanceof Array) {
        for (i = 0, len = targetJSON.length; i < len; i++) {
            if (targetJSON[i] instanceof Array) {
                if (srcJSON[i] === undefined) {
                    srcJSON[i] = [];
                }
                mergeJSON(srcJSON[i], targetJSON[i]);
            } else if (typeof targetJSON[i] === 'object') {
                if (typeof srcJSON[i] === 'undefined') {
                    srcJSON[i] = {};
                }
                mergeJSON(srcJSON[i], targetJSON[i]);
            } else {
                srcJSON[i] = targetJSON[i];
            }
        }
    } else if (typeof targetJSON === 'object') {
        for (item in targetJSON) {
            if (typeof srcJSON[item] === 'undefined') {
                if (targetJSON[item] instanceof Array) {
                    srcJSON[item] = [];
                    mergeJSON(srcJSON[item], targetJSON[item]);
                } else if (typeof srcJSON[item] === 'object') {
                    srcJSON[i] = {};
                    mergeJSON(srcJSON[i], targetJSON[i]);
                } else {
                    srcJSON[i] = targetJSON[i];
                }
            }
        }
    }

    return srcJSON;
}

/**
 *  Returns the <tbody> element of the table. In order to support W3C
 *  non-compliant HTML, wherein the table does not have a <tbody> containing
 *  the <tr> & <td> elements, the table itself is returned.
 *
 *  @param {object} tbl Is the table whose tbody needs to fetched.
 *
 */
function getTbody(tbl) {
    var tbodyArr = sanitizeNodesArray(tbl.childNodes);

    // Checking if the table's childNode is a tbody or not
    if (tbodyArr.length) {
        if (tbodyArr[0].nodeName === 'TBODY') {
            return tbodyArr[0];
        }
        else if (tbodyArr[0].nodeName === 'THEAD' && tbodyArr[1] && tbodyArr[1].nodeName === 'TBODY') {
            return tbodyArr[1];
        }
    }
    return tbl;
}

/**
 *  Returns an array containing the <td> in the <thead> tag.
 *
 *  @param {object} tbl Is the table whose tbody needs to fetched.
 *
 */
function getThead(tbl) {
    var tbodyArr = sanitizeNodesArray(tbl.childNodes);

    // Checking if the table's childNode is a tbody or not
    if (tbodyArr.length) {
        if (tbodyArr[0].nodeName === 'THEAD' && tbodyArr[1] && tbodyArr[1].nodeName === 'TBODY') {
            return tbodyArr[0].childNodes;
        }
    }
    return [];
}

/**
 *  Used to return the text in a given Element. Needed as firefox does not
 *  support 'innerText', which is a W3C standard and instead uses
 *  textContent attribute to store the text.
 *
 *  @param {object} nodeEle The HTML element whose text is needed.
 */
function getTextFromNode(nodeEle) {
    return (nodeEle.innerText !== undefined) ? nodeEle.innerText : nodeEle.textContent;
}

/**
 *  Used to convert an array of rows into an array of corresponding columns.
 *
 *  @param {array} rowArr The array of table rows that has to be transposed
 *  into an array of columns.
 */
function getColumnArr(rowArr) {

    var i,
        j,
        l,
        len,
        cellArr,
        rowSpanInc,
        colSpan = 1,
        columnArrIdx,
        rowSpan = {},
        returnObj = [];

    for (i = 0, l = rowArr.length; i < l; i += 1) {

        // get all the cells of the row
        cellArr = sanitizeNodesArray(rowArr[i].childNodes);
        colSpan = 1;
        rowSpanInc = 0;
        for (j = 0, len = cellArr.length; j < len; j += 1) {

            // if a previous row had a cell with a rowspan then this
            // rowspan needs to be taken into account while creating
            // column array.
            columnArrIdx = j + colSpan + rowSpanInc - 1;
            if (rowSpan[columnArrIdx] &&
                    ((i - rowSpan[columnArrIdx].rowNum) < rowSpan[columnArrIdx].row)) {
                rowSpanInc += rowSpan[columnArrIdx].col;
                columnArrIdx += rowSpan[columnArrIdx].col;
            }

            if (parseInt(cellArr[j].getAttribute('rowspan'), 10) > 1) {
                if (!rowSpan[columnArrIdx]) {
                    rowSpan[columnArrIdx] = {};
                }
                rowSpan[columnArrIdx].rowNum = i;
                rowSpan[columnArrIdx].row = parseInt(cellArr[j].getAttribute('rowspan'), 10);
                // If the cell has both a rowspan and a colspan then they
                // both need to be taken into consideration while calculating
                // the column of cells in the susequent rows
                if (parseInt(cellArr[j].getAttribute('colspan'), 10) > 1) {
                    rowSpan[columnArrIdx].col = parseInt(cellArr[j].getAttribute('colspan'), 10);
                } else {
                    rowSpan[columnArrIdx].col = 1;
                }
            }

            // The previous cells colspan, and the previous rows rowspans
            // also needs to be added to the current cells index to get the
            // proper column index.
            while (returnObj.length <= columnArrIdx) {
                returnObj.push({childNodes: []});
            }
            returnObj[columnArrIdx].childNodes.push(cellArr[j]);

            // Adding the current cells colspan for subsequent cells in the
            // current row.
            if (parseInt(cellArr[j].getAttribute('colspan'), 10) > 1) {
                colSpan += parseInt(cellArr[j].getAttribute('colspan'), 10) - 1;
            }
        }
    }

    return returnObj;
}

/**
 * Used to check if an item is present in an array or not.
 *
 * @param {array} arr The array which has to be checked
 *
 * @param {string|number|object} item The item which needs be checked if
 * present in array arr or not.
 */
function arrayContains(arr, item) {
    var i = arr.length;
    // Using a decrementing while loop (optimization) since the order in which the
    // array is traversed doesn't matter.
    while (i) {
        i -= 1;
        if (arr[i] === item) {
            return true;
        }
    }
    return false;
}

/**
 * Used to check if a particular row or column has all non numeric (or blank)
 * content. If so, then that particular row/column must be ignored.
 *
 * @param {array} nodeArr Is an array of all the rows/columns of the table.
 *
 * @param {number} index of the row/column that is not to be analysed as it
 * has already been set aside as the label row/column.
 *
 * @param {number} j is the cell index at which we have to check for the
 * presence of numeric data in all the other rows and columns.
 */

function checkData(nodeArr, j, index) {

    var i,
        l,
        childArr = sanitizeNodesArray(nodeArr[j].childNodes),
        text;

    for (i = 0, l = childArr.length; i < l; i += 1) {
        if (i !== index) {
            text = getTextFromNode(childArr[i]);
            if (parseFloat(text) === text) {
                return true;
            }
        }
    }
    return false;
}

/**
 * Used to get the table row that has the labels (categories or legend) and
 * extract the label details from the corresponding row.
 *
 * @param {array} nodeArr Is an array of all the rows/columns of the table.
 *
 * @param {array} ignoreArr Is an array of all the indexes in the nodeArr
 * that need to be ignored. The items of this array can be negative as well.
 *
 * @param {string} index If the label row/column details have been given by
 * the user then this will contain the index which has the labels.
 *
 */
function getLabels(nodeArr, ignoreArr, index, opts) {

    var len, l, i, j, childArr, mostEmptyCellRow = null, internalLabel = [],
        emptyCellCount = [], textCellCount = 0, temp, returnObj = {},
        spanTotal = 0, spanLen, isRowLabel, maxIdx, spanLength, totalSpanLength = 0, tLabels;


    if (typeof index === 'undefined') {
    // Checking if the user has provided the index. If index has not been
    // passed then we assume that the user does not want to give a label row
    // or column.

        // Creating custom labels for all cells in the first row/column.
        childArr = sanitizeNodesArray(nodeArr[0].childNodes);
        for (j = 0, len = childArr.length; j < len; j += 1) {
            spanLen = j + spanTotal;
            internalLabel[spanLen] = _blankString + (spanLen + 1);

            temp = parseInt(childArr[j].colSpan, 10);
            temp = (temp > 1) ? temp : parseInt(childArr[j].rowSpan, 10);
            if (temp > 1) {
                for (l = 1; l < temp; l += 1) {
                    internalLabel[spanLen + l] = _blankString + (spanLen + l + 1);
                }
                spanTotal += (temp - 1);
            }
        }

        // Deleting the labels for the rows/columns that the user wants to
        // ignore.
        for (i = 0, l = (j + spanTotal), len = ignoreArr.length; i < len; i += 1) {
            if (ignoreArr[i] > 0) {
                delete internalLabel[ignoreArr[i] - 1];
            } else {
                delete internalLabel[l + ignoreArr[i]];
            }
        }

        return {'index': -1, 'labelObj': internalLabel};

    } else if (index === 0) {
        // Checking if the user has provided the index. Since we expect row/column
        // indices starting from 1, if index is 0 then we use our internal logic
        // to find the label array from the given nodeArr.
        for (i = 0, l = nodeArr.length; i < l; i += 1) {
            childArr = sanitizeNodesArray(nodeArr[i].childNodes);
            emptyCellCount[i] = 0;
            textCellCount = 0;

            if(opts && opts._extractByHeaderTag){
                for (j = 0, len = childArr.length; j < len; j += 1) {
                    if(childArr[j].nodeName.toLowerCase() != 'th'){
                        continue;
                    }
                    tLabels = getLabels(nodeArr, ignoreArr, i + 1);
                    delete tLabels.labelObj[opts._rowLabelIndex];
                    return tLabels;
                }
            }else{
                for (j = 0, len = childArr.length; j < len; j += 1) {
                    if (arrayContains(ignoreArr, (j + 1)) ||
                            arrayContains(ignoreArr, (j - len))) {
                        continue;
                    }
                    temp = getTextFromNode(childArr[j]);
                    // Checking if the cell is emtpy.
                    if (temp.replace(/^\s*/, '').replace(/\s*$/, '') === '') {
                        emptyCellCount[i] += 1;
                        continue;
                    }
                    // Checking if the cell has a non-number content
                    if (parseFloat(temp) != temp) {
                        textCellCount += 1;
                        // If there are at least 2 cells that have non-number
                        // content then we assume that they contain labels and
                        // fetch the labels from this array of nodes.
                        if (textCellCount > 1) {
                            return getLabels(nodeArr, ignoreArr, i + 1);
                        }
                    }
                }
            }
            // If there are empty cells then we assume that the array with
            // the most number of empty cells must be the label array.
            if (i > 0) {
                if (emptyCellCount[i - 1] > emptyCellCount[i]) {
                    mostEmptyCellRow = i - 1;
                } else if (emptyCellCount[i - 1] < emptyCellCount[i]) {
                    mostEmptyCellRow = i;
                }
            }
        }
        if (mostEmptyCellRow !== null) {
            return getLabels(nodeArr, ignoreArr, mostEmptyCellRow + 1);
        } else {
            return getLabels(nodeArr, ignoreArr);
        }
    }

    // If this is a negative number then, calulate the index from the
    // end of the table. e.g -1 would imply the last row.
    if (index < 0) {
        index += nodeArr.length;
    } else if (index > 0) {
        index -= 1;
    }

    /**
     * Once we have the index of the row/column that contains the labels we
     * go through only that row/column and extract the labels.
     */
    childArr = sanitizeNodesArray(nodeArr[index].childNodes);

    isRowLabel = (nodeArr[0].nodeType !== undefined) ? true : false;
    for (j = 0, len = childArr.length; j < len; j += 1) {
        spanLength = 0;
        if (isRowLabel) {
            if (childArr[j].colSpan !== '1') {
                spanLength = parseInt(childArr[j].colSpan, 10);
            }
        } else if (childArr[j].rowSpan !== '1') {
            spanLength = parseInt(childArr[j].rowSpan, 10);
        }
        spanLength = (spanLength > 1) ? spanLength : 0;
        temp = getTextFromNode(childArr[j]);
        if (temp.replace(/^\s*/, '').replace(/\s*$/, '') !== '') {
            returnObj[j + totalSpanLength] = temp;
        } else if (checkData(getColumnArr(nodeArr), j, index)) {
            // if the label text is missing in one of the cells of the labels
            // row/column we check for the presence of numeric data in other
            // cells of the corresponding column/row.

            returnObj[j + totalSpanLength] = _blankString + _blankNo;
            _blankNo += 1;
        }

        if (spanLength > 1) {
            // If the spanLength > 1, then we create additional labels for
            // rows/columns pertaining to the rowspan or colspan.
            temp = returnObj[j + totalSpanLength];
            for (i = 1; i < spanLength; i += 1) {
                returnObj[j + totalSpanLength + i] = temp + ' (' + i + ')';
            }

            // totalSpanLength is used to adjust the indices of the
            // subsequent cells using the rowspan/colspan of the current
            // cell.
            totalSpanLength += (spanLength - 1);
        }
    }

    // Deleting the rows/columns that the user wants to ignore.
    maxIdx = len + totalSpanLength;
    for (i = 0, len = ignoreArr.length; i < len; i += 1) {
        if (ignoreArr[i] > 0) {
            delete returnObj[ignoreArr[i] - 1];
        } else {
            delete returnObj[maxIdx + ignoreArr[i]];
        }
    }

    return {'labelObj': returnObj, 'index': index};
}

function extractDataFromTable(tbl, opts) {

    //后面请剔除掉jquery
    opts = $.extend(true,{},defaultOpts, opts);
    
    if (typeof tbl === 'string') {
        tbl = doc.getElementById(tbl);
    }

    if ((typeof win.jQuery !== 'undefined') && (tbl instanceof win.jQuery)) { // jshint ignore: line
        tbl = tbl.get(0);
    }

    if (!tbl) {
        return {data: null};
    }

    if (opts.hideTable) {
        tbl.style.display = 'none';
    }

    var i,
        j,
        rowCells,
        cellText,
        dataMap = {},
        mapColumnIdx,
        columnSpan,
        len,
        item,
        rowSpan,
        cellEle,
        columnSpanObj = {},
        rowSpanObj = {},
        tableRows = sanitizeNodesArray(getThead(tbl)).concat(sanitizeNodesArray(getTbody(tbl).childNodes)),
        l = tableRows.length,
        dataRows = 0,
        dataColumns = 0,
        tempColumn = 0,
        rowLabelMap,
        m,
        k = 0,
        columnLabelMap,
        isSingleSeries = false,
        chartType = opts.chartType,
        tempMap,

        singleSeriesCharts = ['column2d', 'column3d', 'pie3d', 'pie2d',
                                'line', 'bar2d', 'area2d', 'doughnut2d',
                                'doughnut3d', 'pareto2d', 'pareto3d'];


    if(singleSeriesCharts.indexOf(chartType) !== -1){
        isSingleSeries = true;
    }



    // use rowLabelSource and colLabelSource to avoid confusion
    opts.rowLabelSource = parseInt(opts.labelSource, 10);
    opts.colLabelSource = parseInt(opts.legendSource, 10);
    // Create the labels objects for the chart.

    if (opts.major === 'column') {
        rowLabelMap = opts.useLabels ?
            getLabels(tableRows, opts.ignoreCols, opts.rowLabelSource) :
            getLabels(tableRows, opts.ignoreCols);

        columnLabelMap = opts.useLegend ?
            getLabels(getColumnArr(tableRows), opts.ignoreRows, opts.colLabelSource) :
            getLabels(getColumnArr(tableRows), opts.ignoreRows);
    }else{
        tempMap = getLabels(getColumnArr(tableRows), opts.ignoreRows, opts.rowLabelSource);
        if(!opts.useLabels){
            rowLabelMap = getLabels(getColumnArr(tableRows), opts.ignoreRows);
        }else{
            rowLabelMap = tempMap;
        }

        opts._rowLabelIndex = tempMap.index;
        opts._extractByHeaderTag = true;

        columnLabelMap = opts.useLegend ?
            getLabels(tableRows, opts.ignoreCols, opts.colLabelSource, opts) :
            getLabels(tableRows, opts.ignoreCols);

        delete opts._extractByHeaderTag;

        tempMap = rowLabelMap;
        rowLabelMap = columnLabelMap;
        columnLabelMap = tempMap;
    }

    delete rowLabelMap.labelObj[columnLabelMap.index];
    delete columnLabelMap.labelObj[rowLabelMap.index];

    // Creating the 2d map depending on whether the rows are the primary
    // keys or the columns.
    if (opts.major === 'row') {
        for (item in columnLabelMap.labelObj) {
            dataMap[item] = {};
        }
    } else {
        for (item in rowLabelMap.labelObj) {
            dataMap[item] = {};
        }
    }

    // Populating the dataMap.
    for (i = 0; i < l; i += 1) {
        if (rowLabelMap.index === i ||
                (columnLabelMap.labelObj[i] === undefined)) {
            continue;
        }

        dataRows += 1;
        rowCells = sanitizeNodesArray(tableRows[i].childNodes);

        // columnSpanObj maintains the number of colspans in the current
        // row.
        // rowSpanObj maintains the number of rowspans in a rows x columns
        // map.
        columnSpanObj[i] = 0;
        rowSpanObj[i] = {};

        for (j = 0, len = rowCells.length; j < len; j += 1) {

            cellEle = rowCells[j];

            columnSpan = parseInt(cellEle.getAttribute('colspan'), 10);
            rowSpan = parseInt(cellEle.getAttribute('rowspan'), 10);

            mapColumnIdx = j + columnSpanObj[i];

            // Calculating the position of the current cell in the dataMap.
            while (k < i) {
                if (rowSpanObj[k]) {
                    for (m in rowSpanObj[k]) {
                        if (m > mapColumnIdx) {
                            break;
                        }

                        if ((i - k) <= rowSpanObj[k][m].row) {
                            mapColumnIdx += rowSpanObj[k][m].col;
                        }
                    }
                }
                k += 1;
            }

            if (columnSpan > 1) {
                columnSpanObj[i] += (columnSpan - 1);
            }

            if (rowSpan > 1) {
                if (columnSpan > 1) {
                    rowSpanObj[i][mapColumnIdx] = {
                        row: (rowSpan - 1),
                        col: columnSpan
                    };
                } else {
                    rowSpanObj[i][mapColumnIdx] = {
                        row: (rowSpan - 1),
                        col: 1
                    };
                }
            }
            if (columnLabelMap.index === mapColumnIdx ||
                (rowLabelMap.labelObj[mapColumnIdx] === undefined)) {

                continue;
            }

            tempColumn += 1;
            cellText = getTextFromNode(cellEle);
            // If the cell does not have any text then we covert it by
            // default to 0 or to an parameterized option set by user.
            if (cellText.replace(/^\s*/, '').replace(/\s*$/, '') === '') {
                if (opts.convertBlankTo) {
                    cellText = opts.convertBlankTo;
                } else {
                    continue;
                }
            }

            // Filling up the dataMap based on the rowspan, colspan and
            // position(row=i, column=mapColumnIdx) information of the
            // table cell.
            columnSpan = (columnSpan > 1) ? columnSpan : 1;
            rowSpan = (rowSpan > 1) ? rowSpan : 1;

            if (opts.major === 'row') {
                k = 0;
                while (k < columnSpan) {
                    m = 0;
                    while (m < rowSpan) {
                        dataMap[i + m][mapColumnIdx + k] = parseFloat(cellText);
                        m += 1;
                    }
                    k += 1;
                }
            }
            else {
                k = 0;
                while (k < columnSpan) {
                    m = 0;
                    while (m < rowSpan) {
                        dataMap[mapColumnIdx + k][i + m] = parseFloat(cellText);
                        m += 1;
                    }
                    k += 1;
                }
            }
        }
        if (tempColumn > dataColumns) {
            dataColumns = tempColumn;
        }
    }

    var labelMap,
        legendMap;

    if (opts.major !== 'row') {
        labelMap  = rowLabelMap,
        legendMap = columnLabelMap;
    } else {
        labelMap  = columnLabelMap,
        legendMap = rowLabelMap;
    }
    
    return {
        data: dataMap,
        // chartType: chartType ? (!isSingleSeries ? 'multi' : 'single') :
        //     ((dataRows > 1 && dataColumns > 1) ? 'multi' : 'single'),
        _labelMap: columnLabelMap,
        _legendMap: rowLabelMap,
        labelMap: labelMap,
        legendMap: legendMap
    };
}

module.exports = extractDataFromTable;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],4:[function(require,module,exports){

/*
 * 表格转图标js
 */
;

var extractDataFromGridByOasGrid = require("./data/oasGrid"),
    extractDataFromGridBySimple  = require("./data/simpleGrid");

//适配器集合
var graphaAdapterMap = {
    echart: require("./render/echart")
}; 

module.exports = function(tbl,opts){

        var defaultOpts = {

            adapter: "Echart",
            

            //图表的属性，如标题,背景等
            chartAttributes:{
                title: "",
                subtitle: ""
            },

            showLabels: true,
            showLegend: true,

            hideTable: false,

            renderAt: null,
            
            chartType: "line",
            
        };
        
        //change 一下这两个参数
        var temp;

        temp              = opts.labelSource;
        opts.labelSource  = opts.legendSource;
        opts.legendSource = temp;

        
        if ((typeof window.jQuery !== 'undefined') && (tbl instanceof window.jQuery)) {
            tbl = tbl.get(0);
        }

        //这个后面请剔除jquery
        config = $.extend(true,{},defaultOpts, opts);

        if(tbl.childNodes[0].className&&tbl.childNodes[0].className.replace(/[\t\r\n\f]/g,"").indexOf("oas-grid") !== -1){

            dataObj = extractDataFromGridByOasGrid(tbl, opts);

        }else{

            dataObj = extractDataFromGridBySimple(tbl, opts);
        }

        // return;
        
        var adapter = graphaAdapterMap[(config.adapter||"").toLowerCase()];

        if(adapter&&dataObj.data){
            (function(dataObj,config){
                new adapter(dataObj, config, function(e){
                    e[config.chartType]();
                });
            })(dataObj,config);                
            (config&&config.hideTable)&&(tbl.style.display=="none");
        }else{
            console.error("Not Found Adapter")
        }
        

};



},{"./data/oasGrid":2,"./data/simpleGrid":3,"./render/echart":5}],5:[function(require,module,exports){


var regexp_trim = /[\t\r\n\f]/g;

//Echart 图表
var EchartRender = function(data, config, cb){

    var that = this;

    oasisl.use(["echarts"],function(){
        var el = config.renderAt;

        if(!data)
            return;

        if ((typeof window.jQuery !== 'undefined') && (el instanceof window.jQuery)) {
            el = el.get(0);
        }

        that.el     = el;
        that.data   = data;
        that.config = config;

        for(var i=0,value;value=["labelMap","legendMap"][i++];){
            if(data[value]&&data[value].labelObj){
                for(var key in data[value].labelObj){
                    data[value].labelObj[key] =  data[value].labelObj[key].replace(regexp_trim,"");
                }
            }
        }

        cb&&cb(that);
    });
    
};

EchartRender.prototype = {

    bar: function(){
        
        var el = this.el;

        if(!el)
            return;

        var data            = this.data,
            dataObj         = data.data,
            labelMapObj     = data.labelMap.labelObj,
            legendMapObj    = data.legendMap.labelObj,
            config          = this.config,
            chartAttributes = config.chartAttributes;

        var option  = {
                backgroundColor:  chartAttributes.backgroundColor,
                title: {
                    text: chartAttributes.title,
                    subtext: chartAttributes.subtitle,
                    x: "center"
                },
                tooltip:{
                    trigger: "axis",
                    axisPointer: {
                        type: "shadow"
                    }
                },
                legend: {
                    left: "right",
                    data: null
                },
                grid: {
                    left: "4%",
                    right: "4%",
                    bottom: "4%",
                    containLabel: true
                },
                xAxis: [
                    {   
                        show: config.showLabels,
                        type: "category",
                        data: null,
                        axisTick: {
                            alignWidthLabel: true
                        }
                    }
                ],
                yAxis: [
                    {
                        type: "value"
                    }
                ],
                series: null
                
            };

        //构造数据
        var legendData = [],
            xAxisData  = [],
            series     = [],
            myChart;
        
        for(var labelKey in labelMapObj){
            
            series.push({
                name: labelMapObj[labelKey],
                type: "bar",
                data: objectToArr(dataObj[labelKey])
            })
            legendData.push(labelMapObj[labelKey])
        }

        option.xAxis[0].data = objectToArr(legendMapObj);
        option.series        = series;
        
        (config.showLegend)&&(option.legend.data=legendData);

        myChart = echarts.init(el);
        
        myChart.setOption(option);
        
        WindowResize(function(){
            myChart.resize();
        })



    },

    line: function(){
        
        var el = this.el;

        if(!el)
            return;

        var data            = this.data,
            dataObj         = data.data,
            labelMapObj     = data.labelMap.labelObj,
            legendMapObj    = data.legendMap.labelObj,
            config          = this.config,
            chartAttributes = config.chartAttributes;

        var option  = {
                backgroundColor:  chartAttributes.backgroundColor,
                title: {
                    text: chartAttributes.title,
                    subtext: chartAttributes.subtitle,
                    x: "center"
                },
                tooltip:{
                    trigger: "axis",
                    axisPointer: {
                        type: "shadow"
                    }
                },
                legend: {
                    left: "right",
                    data: null
                },
                grid: {
                    left: "4%",
                    right: "4%",
                    bottom: "4%",
                    containLabel: true
                },
                xAxis: [
                    {   
                        show: config.showLabels,
                        type: "category",
                        data: null,
                        axisTick: {
                            alignWidthLabel: true
                        }
                    }
                ],
                yAxis: [
                    {
                        type: "value"
                    }
                ],
                series: null
                
            };

        //构造数据
        var legendData = [],
            xAxisData  = [],
            series     = [],
            myChart;
        
        for(var labelKey in labelMapObj){
            
            series.push({
                name: labelMapObj[labelKey],
                type: "line",
                data: objectToArr(dataObj[labelKey])
            });
            legendData.push(labelMapObj[labelKey])
        }

        option.xAxis[0].data = objectToArr(legendMapObj);
        option.series        = series;
        
        (config.showLegend)&&(option.legend.data=legendData);

        myChart = echarts.init(el);

        myChart.setOption(option);
        
        WindowResize(function(){
            myChart.resize();
        })

    },

    pie: function(){

        var el = this.el;

        if(!el)
            return;

        var data         = this.data,
            dataObj      = data.data,
            labelMapObj  = data.labelMap.labelObj,
            legendMapObj = data.legendMap.labelObj,
            config       = this.config,
            chartAttributes = config.chartAttributes;

        var option  = {
                backgroundColor:  chartAttributes.backgroundColor,
                title: {
                    text: chartAttributes.title,
                    subtext: chartAttributes.subtitle,
                    x: "center"
                },
                tooltip:{
                    trigger: "item",
                    axisPointer: {
                        type: "shadow",
                        formatter: "{a}<br/>{b} : {c} ({d}%)"
                    }
                },
                legend: {
                    orient: "vertical",
                    left: "right",
                    data: null
                },
                series: [{
                    name: "",
                    type: "pie",
                    radius: "55%",
                    center: ["50%","60%"],
                    data: [],
                    label: {
                        normal:{
                            show: config.showLabels
                        }
                    }
                }]
                
            };

        //构造数据
        var legendData = [],
            seriesData = [],
            myChart;
        
        for(var labelKey in labelMapObj){
            for(var legendKey in legendMapObj){
                legendData.push(labelMapObj[labelKey]+"-"+legendMapObj[legendKey]);
                seriesData.push({
                    name: labelMapObj[labelKey]+"-"+legendMapObj[legendKey],
                    value: dataObj[labelKey][legendKey]
                })
            }
        }

        option.series[0].data = seriesData;

        (config.showLegend)&&(option.legend.data=legendData);

        myChart = echarts.init(el);

        myChart.setOption(option);
        
        WindowResize(function(){
            myChart.resize();
        })
    },
    
    scatter: function(){

        var el = this.el;

        if(!el)
            return;

        var data         = this.data,
            dataObj      = data.data,
            labelMapObj  = data.labelMap.labelObj,
            legendMapObj = data.legendMap.labelObj,
            config       = this.config,
            chartAttributes = config.chartAttributes;

        var option  = {
                backgroundColor:  chartAttributes.backgroundColor,
                title: {
                    text: chartAttributes.title,
                    subtext: chartAttributes.subtitle,
                    x: "center"
                },
                tooltip:{
                    trigger: "axis",
                    axisPointer: {
                        type: "cross"
                    }
                },
                xAxis: {
                    type: "value",
                    splitLine: {
                        lineStyle: {
                            type: "dashed"
                        }
                    } 
                },
                yAxis: {
                    type: "value",
                    splitLine: {
                        lineStyle: {
                            type: "dashed"
                        }
                    } 
                },
                series: [{
                    name: "scatter",
                    type: "scatter",
                    radius: "55%",
                    center: ["50%","60%"],
                    data: [],
                    label: {
                        emphasis: {
                            show: true,
                            position: "left",
                            textStyle: {
                                color: "blue",
                                fontSize: 16
                            }
                        }
                    }
                }]
                
            };

        //构造数据
        var seriesData = [],
            myChart;
        
        for(var labelKey in labelMapObj){
            for(var legendKey in legendMapObj){
                seriesData.push([legendMapObj[legendKey], dataObj[labelKey][legendKey]]);
                
            }
        }

        option.series[0].data = seriesData;

        // (config.showLegend)&&(option.legend.data=legendData);

        myChart = echarts.init(el);

        myChart.setOption(option);
        
        WindowResize(function(){
            myChart.resize();
        })
    }
}

function WindowResize(handler){
    if ( window.addEventListener ) {
        window.addEventListener("resize", handler, false );

    } else if ( window.attachEvent ) {
        window.attachEvent( "onresize", handler );
    }
}

function objectToArr(obj){

    if(!obj)
        return;
    
    var keyArr = [],
        arr    = [],
        i      = 0,
        len;

    for(var key in obj){

        keyArr.push(key)
    }

    keyArr.sort(function(v1,v2){return v1- v2});

    i   = 0,
    len = keyArr.length;

    while((i++)<len){
        arr.push(obj[keyArr[i-1]])
        
    }

    return arr;

}

module.exports = EchartRender;
},{}],6:[function(require,module,exports){
var template = require('./runtime');
template.helper('oasTimelineGetKey', function (obj) {
    return _.keys(obj)[0];
});

module.exports = template;
},{"./runtime":7}],7:[function(require,module,exports){
/*TMODJS:{}*/
!function(){function a(a,b){return(/string|function/.test(typeof b)?h:g)(a,b)}function b(a,c){return"string"!=typeof a&&(c=typeof a,"number"===c?a+="":a="function"===c?b(a.call(a)):""),a}function c(a){return l[a]}function d(a){return b(a).replace(/&(?![\w#]+;)|[<>"']/g,c)}function e(a,b){if(m(a))for(var c=0,d=a.length;d>c;c++)b.call(a,a[c],c,a);else for(c in a)b.call(a,a[c],c)}function f(a,b){var c=/(\/)[^\/]+\1\.\.\1/,d=("./"+a).replace(/[^\/]+$/,""),e=d+b;for(e=e.replace(/\/\.\//g,"/");e.match(c);)e=e.replace(c,"/");return e}function g(b,c){var d=a.get(b)||i({filename:b,name:"Render Error",message:"Template not found"});return c?d(c):d}function h(a,b){if("string"==typeof b){var c=b;b=function(){return new k(c)}}var d=j[a]=function(c){try{return new b(c,a)+""}catch(d){return i(d)()}};return d.prototype=b.prototype=n,d.toString=function(){return b+""},d}function i(a){var b="{Template Error}",c=a.stack||"";if(c)c=c.split("\n").slice(0,2).join("\n");else for(var d in a)c+="<"+d+">\n"+a[d]+"\n\n";return function(){return"object"==typeof console&&console.error(b+"\n\n"+c),b}}var j=a.cache={},k=this.String,l={"<":"&#60;",">":"&#62;",'"':"&#34;","'":"&#39;","&":"&#38;"},m=Array.isArray||function(a){return"[object Array]"==={}.toString.call(a)},n=a.utils={$helpers:{},$include:function(a,b,c){return a=f(c,a),g(a,b)},$string:b,$escape:d,$each:e},o=a.helpers=n.$helpers;a.get=function(a){return j[a.replace(/^\.\//,"")]},a.helper=function(a,b){o[a]=b},module.exports=a;}();
},{}],8:[function(require,module,exports){
/*!
 * artTemplate - Template Engine
 * https://github.com/aui/artTemplate
 * Released under the MIT, BSD, and GPL Licenses
 */
 
!(function () {


/**
 * 模板引擎
 * @name    template
 * @param   {String}            模板名
 * @param   {Object, String}    数据。如果为字符串则编译并缓存编译结果
 * @return  {String, Function}  渲染好的HTML字符串或者渲染方法
 */
var template = function (filename, content) {
    return typeof content === 'string'
    ?   compile(content, {
            filename: filename
        })
    :   renderFile(filename, content);
};


template.version = '3.0.0';


/**
 * 设置全局配置
 * @name    template.config
 * @param   {String}    名称
 * @param   {Any}       值
 */
template.config = function (name, value) {
    defaults[name] = value;
};



var defaults = template.defaults = {
    openTag: '<%',    // 逻辑语法开始标签
    closeTag: '%>',   // 逻辑语法结束标签
    escape: true,     // 是否编码输出变量的 HTML 字符
    cache: true,      // 是否开启缓存（依赖 options 的 filename 字段）
    compress: false,  // 是否压缩输出
    parser: null      // 自定义语法格式器 @see: template-syntax.js
};


var cacheStore = template.cache = {};


/**
 * 渲染模板
 * @name    template.render
 * @param   {String}    模板
 * @param   {Object}    数据
 * @return  {String}    渲染好的字符串
 */
template.render = function (source, options) {
    return compile(source)(options);
};


/**
 * 渲染模板(根据模板名)
 * @name    template.render
 * @param   {String}    模板名
 * @param   {Object}    数据
 * @return  {String}    渲染好的字符串
 */
var renderFile = template.renderFile = function (filename, data) {
    var fn = template.get(filename) || showDebugInfo({
        filename: filename,
        name: 'Render Error',
        message: 'Template not found'
    });
    return data ? fn(data) : fn;
};


/**
 * 获取编译缓存（可由外部重写此方法）
 * @param   {String}    模板名
 * @param   {Function}  编译好的函数
 */
template.get = function (filename) {

    var cache;
    
    if (cacheStore[filename]) {
        // 使用内存缓存
        cache = cacheStore[filename];
    } else if (typeof document === 'object') {
        // 加载模板并编译
        var elem = document.getElementById(filename);
        
        if (elem) {
            var source = (elem.value || elem.innerHTML)
            .replace(/^\s*|\s*$/g, '');
            cache = compile(source, {
                filename: filename
            });
        }
    }

    return cache;
};


var toString = function (value, type) {

    if (typeof value !== 'string') {

        type = typeof value;
        if (type === 'number') {
            value += '';
        } else if (type === 'function') {
            value = toString(value.call(value));
        } else {
            value = '';
        }
    }

    return value;

};


var escapeMap = {
    "<": "&#60;",
    ">": "&#62;",
    '"': "&#34;",
    "'": "&#39;",
    "&": "&#38;"
};


var escapeFn = function (s) {
    return escapeMap[s];
};

var escapeHTML = function (content) {
    return toString(content)
    .replace(/&(?![\w#]+;)|[<>"']/g, escapeFn);
};


var isArray = Array.isArray || function (obj) {
    return ({}).toString.call(obj) === '[object Array]';
};


var each = function (data, callback) {
    var i, len;        
    if (isArray(data)) {
        for (i = 0, len = data.length; i < len; i++) {
            callback.call(data, data[i], i, data);
        }
    } else {
        for (i in data) {
            callback.call(data, data[i], i);
        }
    }
};


var utils = template.utils = {

	$helpers: {},

    $include: renderFile,

    $string: toString,

    $escape: escapeHTML,

    $each: each
    
};/**
 * 添加模板辅助方法
 * @name    template.helper
 * @param   {String}    名称
 * @param   {Function}  方法
 */
template.helper = function (name, helper) {
    helpers[name] = helper;
};

var helpers = template.helpers = utils.$helpers;




/**
 * 模板错误事件（可由外部重写此方法）
 * @name    template.onerror
 * @event
 */
template.onerror = function (e) {
    var message = 'Template Error\n\n';
    for (var name in e) {
        message += '<' + name + '>\n' + e[name] + '\n\n';
    }
    
    if (typeof console === 'object') {
        console.error(message);
    }
};


// 模板调试器
var showDebugInfo = function (e) {

    template.onerror(e);
    
    return function () {
        return '{Template Error}';
    };
};


/**
 * 编译模板
 * 2012-6-6 @TooBug: define 方法名改为 compile，与 Node Express 保持一致
 * @name    template.compile
 * @param   {String}    模板字符串
 * @param   {Object}    编译选项
 *
 *      - openTag       {String}
 *      - closeTag      {String}
 *      - filename      {String}
 *      - escape        {Boolean}
 *      - compress      {Boolean}
 *      - debug         {Boolean}
 *      - cache         {Boolean}
 *      - parser        {Function}
 *
 * @return  {Function}  渲染方法
 */
var compile = template.compile = function (source, options) {
    
    // 合并默认配置
    options = options || {};
    for (var name in defaults) {
        if (options[name] === undefined) {
            options[name] = defaults[name];
        }
    }


    var filename = options.filename;


    try {
        
        var Render = compiler(source, options);
        
    } catch (e) {
    
        e.filename = filename || 'anonymous';
        e.name = 'Syntax Error';

        return showDebugInfo(e);
        
    }
    
    
    // 对编译结果进行一次包装

    function render (data) {
        
        try {
            
            return new Render(data, filename) + '';
            
        } catch (e) {
            
            // 运行时出错后自动开启调试模式重新编译
            if (!options.debug) {
                options.debug = true;
                return compile(source, options)(data);
            }
            
            return showDebugInfo(e)();
            
        }
        
    }
    

    render.prototype = Render.prototype;
    render.toString = function () {
        return Render.toString();
    };


    if (filename && options.cache) {
        cacheStore[filename] = render;
    }

    
    return render;

};




// 数组迭代
var forEach = utils.$each;


// 静态分析模板变量
var KEYWORDS =
    // 关键字
    'break,case,catch,continue,debugger,default,delete,do,else,false'
    + ',finally,for,function,if,in,instanceof,new,null,return,switch,this'
    + ',throw,true,try,typeof,var,void,while,with'

    // 保留字
    + ',abstract,boolean,byte,char,class,const,double,enum,export,extends'
    + ',final,float,goto,implements,import,int,interface,long,native'
    + ',package,private,protected,public,short,static,super,synchronized'
    + ',throws,transient,volatile'

    // ECMA 5 - use strict
    + ',arguments,let,yield'

    + ',undefined';

var REMOVE_RE = /\/\*[\w\W]*?\*\/|\/\/[^\n]*\n|\/\/[^\n]*$|"(?:[^"\\]|\\[\w\W])*"|'(?:[^'\\]|\\[\w\W])*'|\s*\.\s*[$\w\.]+/g;
var SPLIT_RE = /[^\w$]+/g;
var KEYWORDS_RE = new RegExp(["\\b" + KEYWORDS.replace(/,/g, '\\b|\\b') + "\\b"].join('|'), 'g');
var NUMBER_RE = /^\d[^,]*|,\d[^,]*/g;
var BOUNDARY_RE = /^,+|,+$/g;
var SPLIT2_RE = /^$|,+/;


// 获取变量
function getVariable (code) {
    return code
    .replace(REMOVE_RE, '')
    .replace(SPLIT_RE, ',')
    .replace(KEYWORDS_RE, '')
    .replace(NUMBER_RE, '')
    .replace(BOUNDARY_RE, '')
    .split(SPLIT2_RE);
};


// 字符串转义
function stringify (code) {
    return "'" + code
    // 单引号与反斜杠转义
    .replace(/('|\\)/g, '\\$1')
    // 换行符转义(windows + linux)
    .replace(/\r/g, '\\r')
    .replace(/\n/g, '\\n') + "'";
}


function compiler (source, options) {
    
    var debug = options.debug;
    var openTag = options.openTag;
    var closeTag = options.closeTag;
    var parser = options.parser;
    var compress = options.compress;
    var escape = options.escape;
    

    
    var line = 1;
    var uniq = {$data:1,$filename:1,$utils:1,$helpers:1,$out:1,$line:1};
    


    var isNewEngine = ''.trim;// '__proto__' in {}
    var replaces = isNewEngine
    ? ["$out='';", "$out+=", ";", "$out"]
    : ["$out=[];", "$out.push(", ");", "$out.join('')"];

    var concat = isNewEngine
        ? "$out+=text;return $out;"
        : "$out.push(text);";
          
    var print = "function(){"
    +      "var text=''.concat.apply('',arguments);"
    +       concat
    +  "}";

    var include = "function(filename,data){"
    +      "data=data||$data;"
    +      "var text=$utils.$include(filename,data,$filename);"
    +       concat
    +   "}";

    var headerCode = "'use strict';"
    + "var $utils=this,$helpers=$utils.$helpers,"
    + (debug ? "$line=0," : "");
    
    var mainCode = replaces[0];

    var footerCode = "return new String(" + replaces[3] + ");"
    
    // html与逻辑语法分离
    forEach(source.split(openTag), function (code) {
        code = code.split(closeTag);
        
        var $0 = code[0];
        var $1 = code[1];
        
        // code: [html]
        if (code.length === 1) {
            
            mainCode += html($0);
         
        // code: [logic, html]
        } else {
            
            mainCode += logic($0);
            
            if ($1) {
                mainCode += html($1);
            }
        }
        

    });
    
    var code = headerCode + mainCode + footerCode;
    
    // 调试语句
    if (debug) {
        code = "try{" + code + "}catch(e){"
        +       "throw {"
        +           "filename:$filename,"
        +           "name:'Render Error',"
        +           "message:e.message,"
        +           "line:$line,"
        +           "source:" + stringify(source)
        +           ".split(/\\n/)[$line-1].replace(/^\\s+/,'')"
        +       "};"
        + "}";
    }
    
    
    
    try {
        
        
        var Render = new Function("$data", "$filename", code);
        Render.prototype = utils;

        return Render;
        
    } catch (e) {
        e.temp = "function anonymous($data,$filename) {" + code + "}";
        throw e;
    }



    
    // 处理 HTML 语句
    function html (code) {
        
        // 记录行号
        line += code.split(/\n/).length - 1;

        // 压缩多余空白与注释
        if (compress) {
            code = code
            .replace(/\s+/g, ' ')
            .replace(/<!--[\w\W]*?-->/g, '');
        }
        
        if (code) {
            code = replaces[1] + stringify(code) + replaces[2] + "\n";
        }

        return code;
    }
    
    
    // 处理逻辑语句
    function logic (code) {

        var thisLine = line;
       
        if (parser) {
        
             // 语法转换插件钩子
            code = parser(code, options);
            
        } else if (debug) {
        
            // 记录行号
            code = code.replace(/\n/g, function () {
                line ++;
                return "$line=" + line +  ";";
            });
            
        }
        
        
        // 输出语句. 编码: <%=value%> 不编码:<%=#value%>
        // <%=#value%> 等同 v2.0.3 之前的 <%==value%>
        if (code.indexOf('=') === 0) {

            var escapeSyntax = escape && !/^=[=#]/.test(code);

            code = code.replace(/^=[=#]?|[\s;]*$/g, '');

            // 对内容编码
            if (escapeSyntax) {

                var name = code.replace(/\s*\([^\)]+\)/, '');

                // 排除 utils.* | include | print
                
                if (!utils[name] && !/^(include|print)$/.test(name)) {
                    code = "$escape(" + code + ")";
                }

            // 不编码
            } else {
                code = "$string(" + code + ")";
            }
            

            code = replaces[1] + code + replaces[2];

        }
        
        if (debug) {
            code = "$line=" + thisLine + ";" + code;
        }
        
        // 提取模板中的变量名
        forEach(getVariable(code), function (name) {
            
            // name 值可能为空，在安卓低版本浏览器下
            if (!name || uniq[name]) {
                return;
            }

            var value;

            // 声明模板变量
            // 赋值优先级:
            // [include, print] > utils > helpers > data
            if (name === 'print') {

                value = print;

            } else if (name === 'include') {
                
                value = include;
                
            } else if (utils[name]) {

                value = "$utils." + name;

            } else if (helpers[name]) {

                value = "$helpers." + name;

            } else {

                value = "$data." + name;
            }
            
            headerCode += name + "=" + value + ",";
            uniq[name] = true;
            
            
        });
        
        return code + "\n";
    }
    
    
};



// 定义模板引擎的语法


defaults.openTag = '{{';
defaults.closeTag = '}}';


var filtered = function (js, filter) {
    var parts = filter.split(':');
    var name = parts.shift();
    var args = parts.join(':') || '';

    if (args) {
        args = ', ' + args;
    }

    return '$helpers.' + name + '(' + js + args + ')';
}


defaults.parser = function (code, options) {

    // var match = code.match(/([\w\$]*)(\b.*)/);
    // var key = match[1];
    // var args = match[2];
    // var split = args.split(' ');
    // split.shift();

    code = code.replace(/^\s/, '');

    var split = code.split(' ');
    var key = split.shift();
    var args = split.join(' ');

    

    switch (key) {

        case 'if':

            code = 'if(' + args + '){';
            break;

        case 'else':
            
            if (split.shift() === 'if') {
                split = ' if(' + split.join(' ') + ')';
            } else {
                split = '';
            }

            code = '}else' + split + '{';
            break;

        case '/if':

            code = '}';
            break;

        case 'each':
            
            var object = split[0] || '$data';
            var as     = split[1] || 'as';
            var value  = split[2] || '$value';
            var index  = split[3] || '$index';
            
            var param   = value + ',' + index;
            
            if (as !== 'as') {
                object = '[]';
            }
            
            code =  '$each(' + object + ',function(' + param + '){';
            break;

        case '/each':

            code = '});';
            break;

        case 'echo':

            code = 'print(' + args + ');';
            break;

        case 'print':
        case 'include':

            code = key + '(' + split.join(',') + ');';
            break;

        default:

            // 过滤器（辅助方法）
            // {{value | filterA:'abcd' | filterB}}
            // >>> $helpers.filterB($helpers.filterA(value, 'abcd'))
            // TODO: {{ddd||aaa}} 不包含空格
            if (/^\s*\|\s*[\w\$]/.test(args)) {

                var escape = true;

                // {{#value | link}}
                if (code.indexOf('#') === 0) {
                    code = code.substr(1);
                    escape = false;
                }

                var i = 0;
                var array = code.split('|');
                var len = array.length;
                var val = array[i++];

                for (; i < len; i ++) {
                    val = filtered(val, array[i]);
                }

                code = (escape ? '=' : '=#') + val;

            // 即将弃用 {{helperName value}}
            } else if (template.helpers[key]) {
                
                code = '=#' + key + '(' + split.join(',') + ');';
            
            // 内容直接输出 {{value}}
            } else {

                code = '=' + code;
            }

            break;
    }
    
    
    return code;
};


// CommonJs
if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = template;
// RequireJS && SeaJS
} else if (typeof define === 'function') {
    define(function() {
        return template;
    });
} else {
    this.template = template;
}

})();

},{}],9:[function(require,module,exports){

/*
 *  oasisl.js 入口文件 相关component的注册
 */


/*依赖插件库*/
window.Class = require('./oasisl/base/class');
require('./oasisl/base/core');
window._        = require("./plugins/lodash/lodash");
// window._JQ      = require("./lib/jquery/1.8.3/jquery");
window.template = require("./lib/template/template");
require("./lib/runtime/helper");
// window.oasisl   = {};
window.moment = require("./plugins/moment/moment");    
/* 挂载oasisl下的模块*/
require('./oasisl/base/Nuts');
window.util = oasisl.util = require("./oasisl/base/util/index");
oasisl.chartConverter = require("./converter/grid/index");


/*组件库*/

_([   

	//全局的组件(base)
	require("./oasisl/base/uifactory/index"),
	require("./oasisl/base/eventAction/index"),
	require("./oasisl/base/form/index"),
	require("./oasisl/base/global/index"),			 
     
       
   
   //私有的组件(components)
   require("./oasisl/components/numberRoll/index"),
   require("./oasisl/components/pagin/index"),
   require("./oasisl/components/dialog/index"),
   require("./oasisl/components/dropdown/index"),
   require("./oasisl/components/calendar/index"),
   require("./oasisl/components/guide/index"),
   require("./oasisl/components/filter/index"),
   require("./oasisl/components/formtip/index"),
   require("./oasisl/components/sticky/index"),
   require("./oasisl/components/collapse/index"),
   require("./oasisl/components/select/index"),
   require("./oasisl/components/gridTree/index"),
   require("./oasisl/components/position/index"),
   require("./oasisl/components/overlay/index"),
   require("./oasisl/components/popover/index"),
   require("./oasisl/components/placeholder/index"),
   require("./oasisl/components/scrollspy/index"),
   require("./oasisl/components/operate/index"),
   require("./oasisl/components/tabsCard/index"),
   require("./oasisl/components/thinkInput/index"),
   require("./oasisl/components/tooltip/index"),
   require("./oasisl/components/tree/index"),
   require("./oasisl/components/nprogress/index"),
   require("./oasisl/components/transfer/index"),
   require("./oasisl/components/timeline/index"),
   require("./oasisl/components/gridTest2/index2.0"),
   require("./oasisl/components/slider/index"),
   require("./oasisl/components/treeSelect/index"),
   require("./oasisl/components/cascader/index"),
   require("./oasisl/components/query/index"),
   require("./oasisl/components/countDown/index"),
   require("./oasisl/components/thinkInput/index"),
    

   //外部组件(plugins)
    
   require("./plugins/jquery-validate/jquery.validate"),    
   require("./plugins/jquery-cookie/jquery-cookie"), 
   require("./plugins/oasis-map/index"), 
   require("./plugins/path/path")
]).forEach(function(module){

   (typeof module === "function")&&module();
}).value(); 
},{"./converter/grid/index":4,"./lib/runtime/helper":6,"./lib/template/template":8,"./oasisl/base/Nuts":10,"./oasisl/base/class":11,"./oasisl/base/core":12,"./oasisl/base/eventAction/index":13,"./oasisl/base/form/index":14,"./oasisl/base/global/index":15,"./oasisl/base/uifactory/index":17,"./oasisl/base/util/index":18,"./oasisl/components/calendar/index":26,"./oasisl/components/cascader/index":31,"./oasisl/components/collapse/index":32,"./oasisl/components/countDown/index":34,"./oasisl/components/dialog/index":35,"./oasisl/components/dropdown/index":36,"./oasisl/components/filter/index":40,"./oasisl/components/formtip/index":41,"./oasisl/components/gridTest2/index2.0":44,"./oasisl/components/gridTree/index":54,"./oasisl/components/guide/index":56,"./oasisl/components/nprogress/index":57,"./oasisl/components/numberRoll/index":58,"./oasisl/components/operate/index":63,"./oasisl/components/overlay/index":65,"./oasisl/components/pagin/index":66,"./oasisl/components/placeholder/index":68,"./oasisl/components/popover/index":69,"./oasisl/components/position/index":70,"./oasisl/components/query/index":73,"./oasisl/components/scrollspy/index":76,"./oasisl/components/select/index":77,"./oasisl/components/slider/index":82,"./oasisl/components/sticky/index":85,"./oasisl/components/tabsCard/index":86,"./oasisl/components/thinkInput/index":89,"./oasisl/components/timeline/index":90,"./oasisl/components/tooltip/index":92,"./oasisl/components/transfer/index":93,"./oasisl/components/tree/index":100,"./oasisl/components/treeSelect/index":97,"./plugins/jquery-cookie/jquery-cookie":104,"./plugins/jquery-validate/jquery.validate":105,"./plugins/lodash/lodash":107,"./plugins/moment/moment":108,"./plugins/oasis-map/index":111,"./plugins/path/path":112}],10:[function(require,module,exports){
;
module.exports = (function() {
    oasisl.form =  {
        objectify: function($form, filter){
            var returnArray = {};
            var formArray = $form.serializeArray();
            for(var i = 0; i < formArray.length; i++){
                var value = filter ? filter(formArray[i]['value']) : formArray[i]['value'],
                    name = formArray[i]['name'];
                if( returnArray[name] !== undefined ) {
                    if( !returnArray[name].push ){
                        returnArray[name] = [returnArray[name]]
                    }
                    returnArray[name].push(value || '');
                }else{
                    returnArray[name] = value || '';
                }
            }
            $form.find('input[type=checkbox]').each(function(index, item){
                var $item = $(item),
                    name = $item.attr('name');
                if(!_.isArray(returnArray[name])){
                    returnArray[name] = [];
                }
                if($item.is(':checked')){
                    var value = filter ? filter($item.val()) : $item.val();
                    returnArray[name].push(value);
                }
            })
            return returnArray;
        }
    };
})()


},{}],11:[function(require,module,exports){
var Class = function(){};
 
    //基类增加一个extend方法
Class.extend = function (prop) {
    var _super = this.prototype;
    //父类的实例赋给变量prototype
    var prototype = new this();
    //把要扩展的属性复制到prototype变量上
    for (var name in prop) {
        //下面代码是让ctor里可以直接访问使用this._super访问父类构造函数，除了ctor的其他方法，this._super都是访问父类的实例
        prototype[name] = name == "ctor" && typeof prop[name] == "function" &&
            typeof _super[name] == "function" ?
            (function (name, fn) {
                return function () {
                    //备份一下this._super
                    var tmp = this._super;
                    //替换成父类的同名ctor方法
                    this._super = _super[name];
                    //执行，此时fn中的this里面的this._super已经换成了_super[name],即父类的同名方法
                    var ret = fn.apply(this, arguments);
                    //把备份的还原回去
                    this._super = tmp;
                    return ret;
                };
            })(name, prop[name]) :
            prop[name];
    }

    //假的构造函数
    function Class() {
        //执行真正的ctor构造函数
        this.ctor && this.ctor.apply(this, arguments);
    }

    //继承父类的静态属性
    for (var key in this) {
        if (this.hasOwnProperty(key) && key != "extend")
            Class[key] = this[key];
    }

    // 子类的原型指向父类的实例
    Class.prototype = prototype;

    //这里一定要用new this
    //不能Class.prototype._super = prototype;（这里明显错误，prototype这时已经被copy进去了新的属性）
    //或者Class.prototype._super = _super;（这里会导致_super instanceof 不准确 ）
    Class.prototype._super = new this();

    //覆盖父类的静态属性
    if (prop.statics) {
        for (var name in prop.statics) {
            if (prop.statics.hasOwnProperty(name)) {
                Class[name] = prop.statics[name];
                if (name == "ctor") {
                    Class[name]();
                }
            }
        }
    }

    Class.prototype.constructor = Class;

    //原型可扩展
    Class.extendPrototype = function (prop) {
        for (var name in prop) {
            prototype[name] = prop[name];
        }
    };

    //任何Class.extend的返回对象都将具备extend方法
    Class.extend = arguments.callee;

    return Class;
}

module.exports = Class;


},{}],12:[function(require,module,exports){
;
module.exports = (function(global) {

	if (global.oasisl) {
		return global.oasisl;
	}

	var oasisl = global.oasisl = {
		version: '2.0.0'
	};

	var config = oasisl.config = {
		debug: true
	};

	var DIRNAME_RE = /[^?#]*\//;

	function dirname(path) {
		return path.match(DIRNAME_RE)[0]
	}

	var doc = window.document,
		loc = window.location,
		cwd = dirname(loc.href),
		ArrayProto = Array.prototype,
		ObjProto = Object.prototype,
		FunProto = Function.prototype,
		LocalStorage = window.localStorage,
		moduleCaches = {},
		loadedModul = [];


	oasisl.indexOf = function(target, arr){
		if(ArrayProto.indexOf){
			return arr.indexOf(target);
		}else{
			for(var i = 0, len = arr.length; i < len; i++){
				if(arr[i] === target){
					return i;
				}
			}
		}

		return -1;
	};
	/**
	 *  @param {Function} 地图显示和查询方法.
	 *	显示功能包括：包括经纬度、TGDID、地址、基站。
	 *  查询功能包括：经纬度、地址。
	 *  @param {Oject} [options]存数相关数据。
	 *  由于地图组件要求跨域访问，所以IE暂不支持。
	 */


	// 获取oasisl的路径.
	var scripts = doc.getElementsByTagName('script'),
		oasislScript = doc.getElementById('oasislnode'),
		src,
		oasislDir;

	if (!oasislScript) {
		for (var i = 0, len = scripts.length; i < len; i++) {
			src = scripts[i].hasAttribute ? scripts[i].src : scripts[i].getAttribute("src", 4);
			if (src.indexOf('oasisl.js') !== -1 || src.indexOf('oasisl.min.js') !== -1) {
				oasislDir = dirname(src).replace(/js\/$/, '');
				break;
			}
		}
	}

	oasisl.oasislDir = oasislDir;


	var isType = function(type) {
		return function(object) {
			return ObjProto.toString.call(object) === "[object " + type + "]";
		}
	}

	var type = oasisl.type = {};

	var isObject = type.isObject = isType("Object");
	var isString = type.isString = isType("String");
	var isArray = type.isArray = Array.isArray || isType("Array");
	var isFunction = type.isFunction = isType("Function");
	var isBoolean = type.isBoolean = isType("Boolean");

	var support = oasisl.support = {
		"placeholder": !! ("placeholder" in document.createElement('input'))
	}
	/**
	 * 使一个函数在规定的时间间隔内只执行一次（函数节流）.
	 * @param {Function} 需要节流的方法.
	 * @param {Number} [ms] 运行方法的间隔时间，-1时节流不生效，默认为150.
	 * @param {Object} [context] 运行方法的上下文
	 * @return {Function} 返回一个方法用以节流调用fn函数。
	 */
	oasisl.throttle = function(fn, ms, context) {
		ms = ms || 150;

		if (ms === -1) {
			return (function() {
				fn.apply(context || this, arguments);
			});
		}

		var start = new Date().getTime();
		return (function() {
			var now = new Date().getTime();
			if (now - start > ms) {
				start = now;
				fn.apply(context || this, arguments);
			}
		});
	};


	oasisl.stringFormat = function(){
		var a = arguments;
	    if (a.length === 0) {
	        return this;
	    }
	    return this.replace(/{(\d+)}/g, function(c, b) {
	        return typeof a[b] != "undefined" ? a[b] : c;
	    });
	};


	/*
	 * 移除数组中的一项
	 * @param target 需要删除的目标。
	 * @param array 需要删除的数组。
	 * @return 返回新的数组。
	 */
	oasisl.erase = function(target, array) {
		for (var i = 0, arrLen = array.length; i < arrLen; i++) {
			if (target === array[i]) {
				array.splice(i, 1);
				return array;
			}
		};
	};

	/*
	 * 在数组中添加一项
	 * @param target 需要添加的项
	 * @param index 需要添加的位置
	 * @param array 需要添加的数组
	 * @return 返回添加后的数组
	 */
	oasisl.addArrItem = function(target, index, array) {
		var array = $.extend(true, [], array),
			tempfront = array.splice(0, index),
			tempfinale = array;
		tempfront.push(target);

		return tempfront.concat(tempfinale);
	};

	// var private_loader = document.createElement('div');
	// var private_body = document.getElementsByTagName('body')[0];

	// private_loader.setAttribute('data-oasloader', 'loader');
	// private_body && private_body.appendChild(private_loader);

	var header = document.getElementsByTagName('head')[0];


	/*
     * 获取不跨域的最顶层的window对象
     * @return 最顶层的window对象
	 **/
	oasisl.getTopWindow = function() {
		var twin = window;
		while(twin.parent && twin.parent != twin){
			try {
				if(twin.parent.document.domain != document.domain){
					break;
				}
			} catch(e){
				break;
			}

			twin = twin.parent;
		}

		return twin;
	};


	/*
	 * 动态加载js
	 */
	var loadJS = oasisl.loadJS = function(url, fn) {

		// if (!private_body) {
		// 	private_body = document.getElementsByTagName('body')[0];
		// 	private_body.appendChild(private_loader);
		// }
		
		var script = document.createElement('script');
		script.type = 'text/javascript';
		script.charset = 'UTF-8';

		if (script.readyState) { // IE浏览器
			script.onreadystatechange = function() {
				if (script.readyState == 'loaded' || script.readyState == "complete") {
					script.onreadystatechange = null;
					fn && fn();
				}
			}
		} else {
			script.onload = function() {
				fn && fn();
			}
		}

		script.src = url;
		//private_loader.appendChild(script);
		header.appendChild(script);
	};


	var loadCss = oasisl.loadCss = function(url) {
		var link = document.createElement('link');
		link.type = "text/css";
		link.rel = "stylesheet";
		link.href = url;
		document.getElementsByTagName('head')[0].appendChild(link);
	};


	/*
     * 加载一个html片段模版
     * @param url 需要加载的内容url
     * @param jqObj 需要将内容注入的区域jquery对象
     * @注入完成后需要执行的回调函数
	 */
	oasisl.loadTpl = function(jqObj, url, callback){
		jqObj.load(url, function(data){
			if(data.indexOf('placeholder') !== -1){
				$(':[placeholder]').oasInput();
			}else if(data.indexOf('select') !== -1){
				$('select').oasSelect();
			}

			callback && callback();
		});
	};

	oasisl.Cookie = {
		set: function(name, value, expire) {
			var exp = new Date();
			exp.setTime(exp.getTime() + expire * 24 * 60 * 60 * 1000);
			document.cookie = name + "=" + encodeURIComponent(value, "UTF-8") + ";expires=" + exp.toGMTString();
		},
		get: function(key) {
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			for (var i = 0, l = cookies.length; i < l; i++) {
				var parts = cookies[i].split('=');
				var name = parts.shift();
				var cookie = parts.join('=');
				if (key && key === name) {
					return cookie;
				}
			}
		},
		setALCookie: function() {
			if ($("input[name='rememberme']").prop("checked")) {
				var Days = 3 * 30;
				this.set("alpin", $("#handle").val(), Days);
			} else {
				var v = this.get("alpin");
				if (v) {
					this.set("alpin", "", -100);
				}
			}
		}
	}

	oasisl.DBC2SBC = function(str){
		var result = "";
		if(!str){
			return result;
		}
		for(var i = 0;i<str.length;i++){
			code = str.charCodeAt(i);
			if(code>=65281&&code<=65373){
				result += String.fromCharCode(str.charCodeAt(i)-65248);
			}else if(code==12288){
				result += String.fromCharCode(str.charCodeAt(i)-12288+32);
			}else{
				result += str.charAt(i);
			}
		}
		return result;
	};


	/**
	 * 提供兼容性的本地存储
	 */
	if (!LocalStorage) {
		LocalStorage = {
			userData: null,
			name: location.hostname,
			init: function() {
				if (!LocalStorage.userData) {
					try {
						LocalStorage.userData = document.createElement("INPUT");
						LocalStorage.userData.type = "hidden";
						LocalStorage.userData.style.display = "none";
						LocalStorage.userData.addBehavior("#default#userData");
						var expires = new Date();
						expires.setDate(expires.getDate() + 365);
						LocalStorage.userData.expires = expires.toUTCString();
					} catch (e) {
						return false;
					}
				}
				return true;
			},
			setItem: function(key, value) {
				if (LocalStorage.init()) {
					LocalStorage.userData.load(LocalStorage.name);
					LocalStorage.userData.setAttribute(key, value);
					LocalStorage.userData.save(LocalStorage.name);
				}
			},
			getItem: function(key) {
				if (LocalStorage.init()) {
					LocalStorage.userData.load(LocalStorage.name);
					return LocalStorage.userData.getAttribute(key);
				}
			},
			removeItem: function(key) {
				if (LocalStorage.init()) {
					LocalStorage.userData.load(LocalStorage.name);
					LocalStorage.userData.removeAttribute(key);
					LocalStorage.userData.save(LocalStorage.name);
				}

			}
		};
	}

	oasisl.LocalStorage = this.LocalStorage = LocalStorage;

	/*
	 * 判断浏览器是否支持console对象，log->alert, 增加console.time和console.timeEnd
	 * 如果不支持（IE且未打开调试工具时，将console.log指向window.alert）
	 */
	window.oasisl_property = {};
	/*if (!window.console) {
		window.console = {};

		window.console.log = function(msg) {
			window.alert(msg);
		}
	}*/

	// 重置掉console.
	window.console || (window.console = {log: function(){}, error: function(){}});

	if (!window.console.time) {
		window.console.time = function(name) {
			window.oasisl_property[name] = +new Date();
		}

		window.console.timeEnd = function(name) {
			var tempTime = +new Date();
			window.console.log(name + '---耗时：' + (tempTime - window.oasisl_property[name]) + 'ms');
		}
	}

    oasisl.baseModel = Class.extend({
        statics: {
            baseUrl: '/test',
            save: function(data){
                return $.ajax({
                    url: this.baseUrl,
                    type: 'POST',
					dataType: 'json',
                    data: data
                });
            },

            update: function(data){
                return $.ajax({
                    url: this.baseUrl + '/'+ data.id,
                    type: 'PUT',
					dataType: 'json',
                    data: data
                })
            },

            // 通过ajax获取数据，获取完毕以后，可以做展示前的处理：格式转换、特殊内容解析等
            list: function(condition){
                return $.ajax({
                    url: this.baseUrl,
                    type: 'GET',
					dataType: 'json',
                    data: condition
                })
            },

			//ids为以逗号隔开的id
			destory: function(ids){
				return $.ajax({
                    url: this.baseUrl + '/' + ids,
                    type: 'DELETE',
					dataType: 'json'
                })
			}
        }
    });

	// 浏览器判断
	var ua = (window.navigator.userAgent || "").toLowerCase(),
		isIE7 = ua.indexOf("msie 7") !== -1,
		isIE8 = ua.indexOf("msie 8") !== -1;

	oasisl.browser = {
		isIE: ua.indexOf("msie") !== -1,
		isIE7: isIE7,
		isIE8: isIE8
	};

	var _modules = oasisl.modules = {
		"jsonToExcel": {
			"js": "js/plugins/jsonToExcel/jsonToExcel.js",
			"dependentJs":[
				"js/plugins/jsonToExcel/xlsx.full.min.js"
			]
		},
		"ckeditor": {
			"js": "js/plugins/ckeditor/ckeditor.js"
		},

		"mCustomScrollBar": {
			"js": "js/plugins/mCustomScrollBar/jquery.mCustomScrollbar.js",
			"css": "js/plugins/mCustomScrollBar/jquery.mCustomScrollbar.css",
			"params":{
				"mousewheel": {
					"js": "js/plugins/mCustomScrollBar/jquery.mousewheel.js"
				}
			}
		},

		"jquery-lazyload": {
			"js": "js/plugins/jquery-lazyload/jquery.lazyload.js"
		},

		"layui": {
			"js": "js/plugins/layui.layim-3.6.0/layui.js",
			"css": "js/plugins/layui.layim-3.6.0/css/layui.css"
		},

		"webuploader": {
			"js": "js/plugins/webuploader/webuploader.nolog.min.js"
		},

		"cropper": {
			"js": "js/plugins/webuploader/cropper/cropper.js",
			"css": "js/plugins/webuploader/cropper/cropper.css"
		},
		"swiper": {
			"js": "js/plugins/swiper/swiper.jquery.js",
			"css": "js/plugins/swiper/swiper.css"
		},
		"jquery-mask": {
			"js": "js/plugins/jquery-mask/jquery.mask.js"
		},
		"echarts": {
			"js": "js/plugins/echarts/echarts.min.js"
		},
		"peity": {
			"js": "js/plugins/peity/jquery.peity.min.js"
		},
		"toastr": {
			"js": "js/plugins/toastr/toastr.js",
			"css": "js/plugins/toastr/toastr.css"
		},
		"color-pick": {
			"js": "js/plugins/bootstrap-colorpicker/js/bootstrap-colorpicker.js",
			"css": "js/plugins/bootstrap-colorpicker/css/bootstrap-colorpicker.css"
		},
		"jquery-file-upload": {
			"js":"js/plugins/jquery-file-upload/js/jquery.fileupload.js",	
			"css": ["js/plugins/jquery-file-upload/css/style.css",
					"js/plugins/jquery-file-upload/css/jquery.fileupload.css"
			],
			"dependentJs":[
				"js/plugins/jquery-file-upload/js/vendor/jquery.ui.widget.js"
			]
		},
		"video-js": {	
			"js": "js/plugins/video-js/video.min.js",
			"css": "js/plugins/video-js/video-js.css"
		}
	}

	/**
	 * 内置模块加载器,目前仅支持加载jquery插件
	 * @param [mods] 需要加载的模块列表
	 * @param callback 模块加载完成后的回调函数
	 */
	oasisl.use = function(mods, callback){
		var exports = [];
		mods = isString(mods) ? [mods] : mods;
		if(!mods || !isArray(mods)) return;
		
		function onCallback(){
			mods.length > 1 ? oasisl.use(mods.slice(1), callback) : typeof callback === 'function' && callback.apply(oasisl, exports)
		}

		// 已经在加载过
		if(moduleCaches[mods[0]]){
			if(moduleCaches[mods[0]].state()=="resolved"){
				exports.push(moduleCaches[mods[0]].exports);
				onCallback();
			}else if(moduleCaches[mods[0]].state()=="pending"){
				moduleCaches[mods[0]].then(function(){
					exports.push(moduleCaches[mods[0]].exports);
					onCallback();
				})
			}
		}else{

			// 加载依赖
			if(isArray(_modules[mods[0]].dependentJs) && _modules[mods[0]].dependentJs.length > 0){
				for(var i=0;i<_modules[mods[0]].dependentJs.length;i++){
					loadJS(oasislDir + _modules[mods[0]].dependentJs[i])
				}
			}
			moduleCaches[mods[0]] = new $.Deferred();
			loadJS(oasislDir + _modules[mods[0]].js, function(){
				moduleCaches[mods[0]].resolve();
				onCallback();
			});
			//单个css
			if(isString(_modules[mods[0]].css)){
				_modules[mods[0]].css && loadCss(oasislDir + _modules[mods[0]].css);
			}else if(isArray(_modules[mods[0]].css)){//多个css
				for(var j = 0; j < _modules[mods[0]].css.length ; j++){
					_modules[mods[0]].css[j] && loadCss(oasislDir + _modules[mods[0]].css[j]);
				}
			}
		}
	};

    return oasisl;

})(window);
},{}],13:[function(require,module,exports){

/*
 *  eventAction
 */

module.exports = function(){
	/*
	 * 事件注册函数
	 */
	'use strict';

	var action = {};
	var selector = '[data-action]';

	var _actionList = {};

	function _getActionName($elemet) {
		var result = $elemet.data('action') || '';
		if (!result) {
			var href = $.trim($elemet.attr('href'));
			if (href && href.indexOf('#') === 0) result = href;
		}

		return _formatActionName(result);
	}


	function _formatActionName(s) {
		return s ? $.trim(String(s).replace(/^[#!\s]+/, '')) : '';
	}

	function _init() {
		var $wrapper = $(document.body || document.documentElement);
		$wrapper.on('click', selector, function(ev) {
			if ($(this).data('action-preventdefault') !== false) {
				ev.preventDefault();
			}

			var $elemet = $(this);
			var actionName = _getActionName($elemet);

			return _handle(actionName, this, ev);
		});
	}

	function _handle(actionName, context, ev) {
		if (!actionName) {
			console.warn('[Action] Empty action. Do nothing.');
			return;
		}

		var fn = _actionList[actionName];
		if (fn && $.isFunction(fn)) {
			return fn.call(context || window, ev);
		} else {
			console.error('[Action] Not found action %s', actionName);
		}
	}

	// api
	action.add = function(actionSet, ctx) {
		if ($.isPlainObject(actionSet)) {
			$.each(actionSet, function(key, value) {
				var actionName = _formatActionName(key);
				if (actionName) {
					if($.isFunction(value)){
						if(_actionList[actionName]){
							console.warn('[Action] The existed action %s has been overriden', actionName);
						}
						var fun = ctx ? value.bind(ctx) : value;
						_actionList[actionName] = fun;
					}else{
						console.error('[Action] The function for action %s is invalid', actionName)
					}
				}else{
					console.error('[Action] The action name %s is invalid.', key);
				}
			});
		}else{
			console.warn('[Action] Param must be a plain object');
		}
	}

	action.remove = function(actionName){
		if(_actionList.hasOwnProperty(actionName)){
			delete _actionList[actionName];
		}
	}
	
	action.trigger = function(actionName, context){
		return _handle(_formatActionName(actionName), context);
	}

	// init 
	_init();

	window.eventAction = action;
	return action;
}
},{}],14:[function(require,module,exports){
module.exports = function(){
	var dateFormat = function(dateRange) {
		var dfString = "yyyy-MM-dd";
		return util.dateFormat(dateRange[0],dfString)+"  -  "+util.dateFormat(dateRange[1],dfString);
	}

	var timeToString = {
		365 : function() {
			var t = util.time.getNearOneYear();
			return dateFormat(t);
		},
		180 : function() {
			var t = util.time.getNearHalfYear();
			return dateFormat(t);
		},
		90 : function() {
			var t = util.time.getNearThreeMonths();
			return dateFormat(t);
		},
		30 : function() {
			var t = util.time.getNearOneMonth();
			return dateFormat(t);
		},
		7 : function() {
			var t = util.time.getNearOneWeek();
			return dateFormat(t);
		},
		3 : function() {
			var t = util.time.getNearThreeDays();
			return dateFormat(t);
		},
		1 : function() {
			var t = util.time.getNearOneDay();
			return dateFormat(t);
		},
		0: function(){
			var t = util.time.getToday();
			return dateFormat(t);
		},			
		'-365' : function() {
			var t = util.time.getFutureOneYear();
			return dateFormat(t);
		},
		'-180' : function() {
			var t = util.time.getFutureHalfYear();
			return dateFormat(t);
		},
		'-90' : function() {
			var t = util.time.getFutureThreeMonths();
			return dateFormat(t);
		},
		'-30' : function() {
			var t = util.time.getFutureOneMonth();
			return dateFormat(t);
		},
		'-7' : function() {
			var t = util.time.getFutureOneWeek();
			return dateFormat(t);
		},
		'-3' : function() {
			var t = util.time.getFutureThreeDays();
			return dateFormat(t);
		},
		'-1' : function() {
			var t = util.time.getFutureOneDay();
			return dateFormat(t);
		}
	}

	$(document).on("click","form .oas-single-select .oas-single-select-item",function() {
		var $a = $(this).find("a"),
			timeRange = $(this).data("time-range"),
			$time = $(this).closest(".oas-single-select").find(".oas-user-define-range"),
			$timeText = $(this).closest(".oas-single-select").find(".oas-user-define-text"),
			valueType = $(this).data('value'),
			value;
		if($a.hasClass("oas-user-define-time-range")) {
			$time.css("display","inline");
			$timeText.css("display","none");
			$timeText.text("");
			if(!$time.data("oasCalendar")) {
				$time.oasCalendar({
					type : 'range',
					supportInput: $a.hasClass("support-input") ? true : false
				});
			}
 		} else if($a.hasClass("oas-user-define-time-end")) {
 			$time.css("display","inline");
			$timeText.css("display","none");
			$timeText.text("");
			if(!$time.data("oasCalendar")) {
				$time.find("input").oasCalendar({
					range:[new Date(),new Date(2100,0,1)],
					supportInput: $a.hasClass("support-input") ? true : false
				});
			}
			$time.find(".oas-user-define-range-start").text(util.dateFormat(new Date(),"yyyy-MM-dd"));
 		} else if(timeRange!=="infinite"&&timeRange!==undefined) {
			$time.css("display","none");
			$timeText.css("display","inline");
			$timeText.text(timeToString[timeRange]());
			if(valueType === 'end'){
				value = timeToString[timeRange]().split('  -  ')[1];
			}else{
				value = timeToString[timeRange]();
			}
			$(this).find('input[type="radio"]').val(value);
			$(this).siblings('.oas-user-define-range').find('input[type="text"]').eq(0).val(value.split('  -  ')[0]);
			$(this).siblings('.oas-user-define-range').find('input[type="text"]').eq(1).val(value.split('  -  ')[1]);
		} else {
			$time.css("display","none");
			$timeText.css("display","none");
			$timeText.text("");
		}
		$(this).siblings().find("a").removeClass("active");
		$a.addClass("active");
	})

	$(document).on("click","form .oas-muti-select a",function() {
		var $a = $(this);
		$a.toggleClass("active");
	})
	// 带清空功能的input
	$(document).on("mouseover keyup click",".form-clear:not(.no-clear)",function() {
		var val = $.trim($(this).find('input').val());
		if(val) {
			$(this).find('.oasicon').removeClass('oasicon-search').addClass('oasicon-fail');
		} else {
			$(this).find('i.oasicon').removeClass('oasicon-fail').addClass('oasicon-search');
		}
	})

	$(document).on("mouseout",".form-clear:not(.no-clear)",function() {
		$(this).find('i.oasicon').removeClass('oasicon-fail').addClass('oasicon-search');
	})

	$(document).on("click",".form-clear:not(.no-clear) .oasicon-fail",function() {
		$(this).siblings('input').val('');
		$(this).removeClass('oasicon-fail').addClass('oasicon-search');
	})

	var deleteBtn = '<a class="btn btn-default btn-sm" data-action="clone-delete">删除</a>'

	eventAction.add({
		'clone-add' : function() {
			var $parent = $(this).closest(".oas-clone-input"),
				$dom,
				$cloneDom,
				newDom = '<div class="row"><a class="btn btn-default btn-sm" data-action="clone-add">添加</a></div>',
				$newDom;
			if(!$parent.data("cloneStatus")) {
				$parent.data("cloneStatus",true);
				$cloneDom = $parent.find(".oas-clone-wrap").clone();
				$cloneDom.find("input[type='text']").val('').end().find("textarea").val('').end().find("input[type='checkbox']").prop("checked",false);
				$parent.data("cloneDom",$cloneDom);
			}
			$dom = $parent.data("cloneDom").clone();
			$newDom = $(newDom);
			$newDom.find("a").before($dom);
			$parent.find(".row").eq(0).find('a[data-action="clone-add"]').remove().end().find('.oas-clone-wrap').after(deleteBtn).end().before($newDom);
		},
		'clone-delete' : function() {
			var $parent = $(this).closest(".row");
			$parent.remove();
		}
	})

}
},{}],15:[function(require,module,exports){
/*
 * @desc 一些常用的html样式的js
 * @anthor jyye
 * @Date 2016-07-07
 */
module.exports = function(){
    //左侧菜单点击事件
    $(document).on("click.left-menu",".oas-left-menu li",function(){
        $(this).addClass('active').siblings().removeClass('active');
    });
    $(document).on("click.left-menu",".oas-left-menu .oas-menu-toggle",function(){
        var _menu = $(this).closest('.oas-left-menu');
        var _width = _menu.outerWidth();
       if(_menu.hasClass('menu-open')){
            _menu.removeClass('menu-open');
            _menu.stop().animate({left:-_width}, 500);
            $(this).parents(".has-left-menu").animate({paddingLeft:0}, 500);
       }else{
            _menu.addClass('menu-open');
            _menu.stop().animate({left:0}, 500);
            $(this).parents(".has-left-menu").animate({paddingLeft:_width+1}, 500);
       }
       
    });
    $(".oas-menu-toggle").hover(function(){
        $(this).closest('.oas-left-menu').addClass('hover');
    },function(){
        $(this).closest('.oas-left-menu').removeClass('hover');
    });

    //切换按钮
    $(document).on('click.switch-btn', '.oas-switch-btn li', function(event) {
        $(this).addClass('active').siblings().removeClass('active');
    });

    /*   
     *多级分栏
     *eszhang 2016-7-25增 
     */
    //多级分栏
    $(document).on('click.oas-tabs', '.oas-tabs .tab-items li', function(event) {
        $(this).siblings().removeClass('current').end().addClass('current');
    });

    //头部导航添加事件
    $(document).on("click",".oas-hd .first-level-nav li",function(event){
        $(this).parents('.oas-hd').find('.first-level-li').removeClass('active');
        if($(this).hasClass('first-level-li')){
            $(this).addClass('active');
        }else{
            $(this).parents('.first-level-li').addClass('active');
        }
        event.stopPropagation();
    });
    // 头部链接
    $(document).on("click",".oas-horizontal-menu .first-level-nav li",function(event){
        $(this).parents('.oas-horizontal-menu').find('.first-level-li').removeClass('active');
        if($(this).hasClass('first-level-li')){
            $(this).addClass('active');
        }else{
            $(this).parents('.first-level-li').addClass('active');
        }
        // event.stopPropagation();
    });
    // 右侧边栏点击事件
    $('.oas-vertical-menu.default').on("click",".menucontainer",function(event){
        if($(this).parents('a').siblings('ul').length === 0){
            $(this).parents('.oas-vertical-menu.default').find('.menucontainer').removeClass('active');
            $(this).addClass('active');
        }
        var $siblingDom = $(this).parents('a').siblings('ul');
        siblingDomHeight = $siblingDom.outerHeight();

        if($siblingDom.hasClass('vmClose')){
            $siblingDom.css({
                "height": 0,
                "overflow": "hidden"
            }).removeClass("vmClose");

            $siblingDom.stop().animate({
                height: siblingDomHeight + "px"
            },300,function(){
                $siblingDom.css({
                    "height": "auto",
                    "overflow": "inherit"
                })
            });
        }else{
            $siblingDom.stop().animate({
                height: 0
            },300,function(){
                $siblingDom.css({
                    "height": "auto"
                }).addClass("vmClose")
            })
        }
        $(this).toggleClass("close-animation")
        // event.stopPropagation();
    });

    $('.oas-vertical-menu').on("click",".whole-switch",function(event){
        var $siblingDom = $(this).siblings('ul');
        siblingDomHeight = $siblingDom.outerHeight();

        if($(this).siblings('ul').hasClass('vmClose')){
            $siblingDom.css({
                "height": 0,
                "overflow": "hidden"
            }).removeClass("vmClose");

            $siblingDom.stop().animate({
                height: siblingDomHeight + "px"
            },300,function(){
                $siblingDom.css({
                    "height": "auto",
                    "overflow": "inherit"
                })
            })
        }else{
            $siblingDom.stop().animate({
                height: 0
            },300,function(){
                $siblingDom.css({
                    "height": "auto"
                }).addClass("vmClose")
            })
        }
        event.stopPropagation();
    });
    // 有侧边栏 出左侧点击事件
    $('.oas-vertical-menu.right').on("click",".menucontainer",function(event){
        $(this).parents('.oas-vertical-menu.right').find('.menucontainer').removeClass('active');
        $(this).addClass('active');
    });
    /*
     *  按钮
     */    
    $(document).on("mouseup",".btn:not('[disabled]'),[rippled]:not('[disabled]')",function(){

        var that = this;
        
        $(this).addClass("btn-clicked");
        setTimeout(function(){
            $(that).removeClass("btn-clicked");
        },650)
    })

     $(document).on("click",".oas-switch-form-btn input[type='radio']",function(evt){

        evt.stopPropagation();
        evt.preventDefault();
    })

    $(document).on("click",".oas-switch-form-btn",function(evt){

        if($(this).hasClass("oas-switch-checked")){
            $(this).removeClass("oas-switch-checked");
            $(this).find("[type='radio']").eq(0).prop("checked",false);
            $(this).find("[type='radio']").eq(1).prop("checked",true);
        }else{
            $(this).addClass("oas-switch-checked");
            $(this).find("[type='radio']").eq(0).prop("checked",true);
            $(this).find("[type='radio']").eq(1).prop("checked",false);
        }
    })

   

    $(document).on("mousedown",".btn-loaded:not('.btn-loading')",function(evt){

        $(this).addClass("btn-loading");

        if($(this).find(".oasicon")){
            $(this).find(".oasicon")[0].className = $(this).find(".oasicon")[0].className.replace(/oasicon-\w*/,"");
            $(this).find(".oasicon").addClass("oasicon-quit")
        }
    })

    // alert
    $(document).on("click",".alert .close",function(evt){
        $(this).closest('.alert').remove();
    })

    // form-select 单选 & 多选
    
}
},{}],16:[function(require,module,exports){
/*
 * @desc 位置基础服务
 * @anthor rbai
 * @Date 2016-03-02
 */

(function() {
	var position = {
		getPosition: function($el, $viewport, direction) {
			var $elH = $el.outerHeight(),
				$elW = $el.outerWidth(),
				$elOffsetX = $el.offset().left,
				$elOffsetY = $el.offset().top,
				$viewportH = $viewport.outerHeight(),
				$viewportW = $viewport.outerWidth(),
				position;

			if (direction === "right") {
				position = {
					left: $elW + $elOffsetX + 10,
					top: $elH / 2 + $elOffsetY - $viewportH / 2
				};
			}
			if (direction === "left") {
				position = {
					left: $elOffsetX - $viewportW - 10,
					top: $elH / 2 + $elOffsetY - $viewportH / 2
				};
			}
			if (direction === "top") {

				position = {
					left: $elOffsetX - ($viewportW / 2 - $elW / 2),
					top: $elOffsetY - $viewportH - 10
				};
			}
			if (direction === "bottom") {

				position = {
					left: $elOffsetX - ($viewportW / 2 - $elW / 2),
					top: $elOffsetY + $elH + 10
				};
			}

			return position;
		}
	}

	module.exports = position;
})();
},{}],17:[function(require,module,exports){

/**
 * 所有ui组件的核心工厂方法。
 * @ author rbai
 * @ create time 2014.07.20
 * @ version  1.0.0
 */

/*
 * @param name即是组件名，示例oasDialog
 * @param prototype为name组件对应的原型方法
 */

(function() {
	/**
	 * modify by rbai @2017-6-22
	 * cache all ui widget this page
	 */
	oasisl.uiWidget = {};
	$.oasUiFactory = function(name, prototype) {

		var uiName = name;

		// 给组件创建选择器
		$.expr[":"][name] = function(elem) {
			return !!$.data(elem, name);
		}

		$['oasisl'] = $['oasisl'] || {};

		// 组件的构造器
		$['oasisl'][name] = function(options, element) {

			if (arguments.length) {
				this._createOasUi(options, element);
			}
		}


		// 属性的继承
		var basePrototype = new $.OasUiFactory();

		// 深度合并为basePrototype添加属性
		basePrototype.options = $.extend(true, {}, basePrototype.options);

		$['oasisl'][name].prototype = $.extend(true, basePrototype, {

			namespace: 'oasisl',
			uiName: uiName,
			widgetBaseClass: name

		}, prototype);

		$.oasUiFactory.bridge(name, $['oasisl'][name]);
	}

	$.oasUiFactory.bridge = function(name, object) {

		$.fn[name] = function(options, element) {

			var query = arguments[0],
				methodInvoked = (typeof query == 'string'),
				queryArguments = [].slice.call(arguments, 1),
				returnValue = $(this);

			// 方法调用
			if (methodInvoked) {

				this.each(function() {
					var instance = $.data(this, name);
					if (!instance) throw Error(name + '还没有被初始化');

					if (instance.invoke[query]) {
						var methodValue = instance.invoke[query].apply(instance, queryArguments);
						if (methodValue !== instance && methodValue !== undefined) {
							returnValue = methodValue;
							return false;
						}
					} else {
						console.warn(query + '---方法不存在');
						console.info(name + ' 组件你可以调用以下方法');
						if (console.table) {
							console.table(instance.invoke);
						} else {
							console.info(instance.invoke);
						}
					}
				});

			} else {
				// 初始化
				this.each(function(index) {
					var instance = $.data(this, name);

					if (!instance) {
						/**
						 * modify by rbai @2017-6-22
						 * 增加组件实例id，可以通过该id获取到ui组件的实例
						 * 使用实例可以调用到组件的函数，及绑定事件
						 */
						instance = new object(options, this);
						var id = instance._id;
						/**
						 * 如果存在id,则生成id
						 * 如果多个元素公用一个id,则用id+index来合并:id-1
						 */
						id = index > 0 ? id+'-' + index : id;
						id && (oasisl.uiWidget[id] = instance);
						// if(id) {
						// 	oasisl.uiWidget[id] = instance;
						// 	for(var func in instance.invoke){
						// 		instance[func] = instance.invoke[func];
						// 	}
						// }
						$.data(this, name, instance);
					}
				});

			}

			return returnValue;
		}
	}

	$.OasUiFactory = function(options, element) {


		if (arguments.length) {
			this._createOasUi(options, element);
		}
	}


	$.OasUiFactory.prototype = {

		_createOasUi: function(options, element) {

			// 缓存数据

			this.$el = $(element);

			// 合并所有的配置项，包括绑定在dom节点上的。
			this.DEFAULTS = $.extend(true, {}, this.options);
			var options = this.options = $.extend(true, {}, this.options, this._getElementOptions(), options);

			/**
			 * modify by rbai @2017-6-22
			 * 增加组件实例id，可以通过该id获取到ui组件的实例
			 * 使用实例可以调用到组件的函数，及绑定事件
			 */
			this._id = options.uiId;

			this.onCreate = options.onCreate;

			// modify by rbai @2015-05-07 
			// 新增组件是否已经创建完成标识。
			this.__isCreated__ = false;

			// 有模版文件则执行模版文件,并将预编译的模版文件存放到this.tpl中
			if (this._template) {

				this.tpl = this._template();
			}

			// 执行_create方法
			var _createValue = this._create();

			this.__isCreated__ = true;
			// 触发_create事件
			if (this.onCreate) {
				this.onCreate.call(this);
			}

			// 如果_create方法返回false，则退出创建UI对象。
			if (_createValue === false) {
				return false;
			}
			// 绑定事件
			this._bindUiEvents();


			// 覆盖默认的对外方法。
			this.invoke = $.extend(true, {
				show: function() {
					this.$el.show();
				},

				hide: function() {
					this.$el.hide();
				},

				destroy: function() {
					this.$el.unbind('.' + this.uiName).removeData(this.uiName);

					//$(document).unbind('.' + this.uiName);
				},


				// 获取(设置)一个组件对象的option.key
				option: function(key){
					if(typeof key === 'string'){
						return this.options[key];
					}
				},


				getDefaults: function(){
					return this.DEFAULTS;
				}

			}, this.invoke);
		},

		// 从元素中获取配置项。
		_getElementOptions: function() {

			var options = this.$el.data(),
				reg = new RegExp('^' + this.uiName, 'i'),
				tempOptions = {},
				tempDataName;

			for (var dataName in options) {
				if (reg.test(dataName)) {
					tempDataName = dataName.replace(reg, '');
					tempDataName = tempDataName.charAt(0).toLowerCase() + tempDataName.substr(1);
					tempOptions[tempDataName] = options[dataName];
				}
			}

			return tempOptions;
		},

		_create: function() {

		},


		on: function(eventname, func){
			this.$el.on(eventname+ '.'+ this.uiName, func);
		},

		icall: function(callname){
			var argument = Array.prototype.slice.call(arguments);
			argument = argument.splice(1);
			var result = argument ? this.invoke[callname].apply(this, argument) : this.invoke[callname].apply(this);
			return result;
		},


		/*
		 * 绑定事件，在具体的组件类里需要有events对象
		 * events: {
		 *	  'click li': '_liClick',
		 *    'hover .item': '_itemHover'
		 * }
		 */
		_bindUiEvents: function() {

			var $el = this.$el,
				self = this,
				_evetsTarget,
				_evetsType,
				_eventsArr,
				_event_callback,
				expr = /(\S+)\s(.+)/,
				target = $el;

			if (this.events) {
				if('target' in this.events){
					target = _.isFunction(this.events['target']) ? this.events['target'].call(this) : this.events['target'];
		
				}
				for (var _evets in this.events) {
					if(_evets === 'target'){
						continue;
					}
					_eventsArr = _evets.match(expr);
					_evetsTarget = _eventsArr[2];
					_eventsType = _eventsArr[1];

					_event_callback = null;
					if ($.isFunction(this.events[_evets])) {

						_event_callback = this.events[_evets];
					} else {
						_event_callback = this[this.events[_evets]];
					}

					(function(_callback) {
						target.on(_eventsType + '.' + self.uiName, _evetsTarget, function(evt) {
							if (_callback.call(self, this, evt) === false) {
								return false;
							}
						});
					})(_event_callback);

				}

				_eventsArr = null;
				_evetsTarget = null;
				_eventsType = null;
				_event_callback = null;
			}
		},

		/*
		 * 调用对外方法。
		 * @param {string} callname 对外方法函数名。
		 * @param {Array} 需要传递的参数。
		 * @return 返回对外方法的返回值。
		 * this.invokeCall('show', [akdlaskda,jja]);
		 */
		_iCall: function(callname, argumentA) {
			var result = argumentA ? this.invoke[callname].apply(this, argumentA) : this.invoke[callname].apply(this);
			return result;
		},

		/**
		 * 触发事件函数。
		 * @param {string} 需要触发的事件名
		 * @param {Array} 需要传递的参数。
		 * this._emit('onSelect', [id, value])
		 */
		_emit: function(eventname, argumentA) {
			this.$el.trigger(eventname+'.'+this.uiName, argumentA);
		}
	};
})()


},{}],18:[function(require,module,exports){
module.exports =  {
	/**
	 * [hasSameElement 比较两个数组是否有相同元素(使用数字型/字符串型)]
	 * @DateTime  2017-07-13
	 * @copyright [copyright]
	 * @license   [license]
	 * @version   [version]
	 * @param     {[type]}    firstArray  [description]
	 * @param     {[type]}    secondArray [description]
	 * @return    {Boolean}               [返回true说明有相同元素]
	 */
	hasSameElement: function(firstArray,secondArray){
		return (firstArray.length + secondArray.length) !== _.xor(firstArray,secondArray).length
	},	
    /**
     * [makeData2Tree 树节点转化]
     * @DateTime  2017-07-10
     * @copyright [copyright]
     * @license   [license]
     * @version   [version]
     * @param     {[type]}    data [定义时以pid作为key定义父节点 父节点不存在传-1]
     * @return    {[type]}         [以父节点为key，所有的子节点的集合组成数组]
     */
	makeData2TreeObject: function (data){
		var groupedByparents = _.groupBy(data,'pid');
		var catsById = _.indexBy(data,'id');
		_.each(_.omit(groupedByparents,''),function(childList,pid){
			if(pid !== '-1'){
				catsById[''+pid].childList = childList;
			}
		})
		_.each(catsById,function(cat){
			cat.isParent = !_.isEmpty(cat.childList);
		});
		return groupedByparents;
	},
	/**
	 * [makeData2TreeList list形式(树形式)]
	 * @DateTime  2017-07-10
	 * @copyright [copyright]
	 * @license   [license]
	 * @version   [version]
	 * @param     {[type]}    data [description]
	 * @return    {[type]}         [description]
	 */
	makeData2TreeList: function(data){
		var treeList = [];
		var groupedByparents = _.groupBy(data,'pid');
		var catsById = _.indexBy(data,'id');
		_.each(_.omit(groupedByparents,''),function(childList,pid){
			if(pid !== '-1'){
				catsById[''+pid].childList = childList;
			}
		})
		_.each(catsById,function(cat){
			cat.isParent = !_.isEmpty(cat.childList);
		});

		treeList = groupedByparents['-1'];
		return treeList;
	},
	/*
		* get a uuid whih prefix
		*/
	getUID: function(prefix){
		do prefix += ~~(Math.random() * 1000000)
		while (document.getElementById(prefix))
		return prefix;
	},

	DBC2SBC: function(str){
		var result = "";
		if(!str){
			return result;
		}
		for(var i = 0;i<str.length;i++){
			code = str.charCodeAt(i);
			if(code>=65281&&code<=65373){
				result += String.fromCharCode(str.charCodeAt(i)-65248);
			}else if(code==12288){
				result += String.fromCharCode(str.charCodeAt(i)-12288+32);
			}else{
				result += str.charAt(i);
			}
		}
		return result;
	},

	/**
	 * 获取url后面的参数
	 * @param  参数key
	 * @return 参数值
	 */
	getQueryString: function(name) {
		var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
		var r = window.location.search.substr(1).match(reg);
		if (r != null) return r[2];
		return null;
	},

	hashGoBack: function(){
		var prevHash = Path.routes.previous;
		if(prevHash){
			location.hash = prevHash;
		}else{
			location.hash = '';
		}
	},


	dateFormat: function (date, format) {
		date = new Date(date);
		var map = {
			"M": date.getMonth() + 1, //月份 
			"d": date.getDate(), //日 
			"h": date.getHours(), //小时 
			"m": date.getMinutes(), //分 
			"s": date.getSeconds(), //秒 
			"q": Math.floor((date.getMonth() + 3) / 3), //季度 
			"S": date.getMilliseconds() //毫秒 
		};
		format = format.replace(/([yMdhmsqS])+/g, function(all, t){
			var v = map[t];
			if(v !== undefined){
				if(all.length > 1){
					v = '0' + v;
					v = v.substr(v.length-2);
				}
				return v;
			}
			else if(t === 'y'){
				return (date.getFullYear() + '').substr(4 - all.length);
			}
			return all;
		});
		return format;
	},

	time: {
		getYesterday: function(){
			var now = new Date();
			return [new Date(now.getFullYear(),now.getMonth(),now.getDate()-1,0,0,0),new Date(now.getFullYear(),now.getMonth(),now.getDate()-1,23,59,59)];
		},

		getToday: function(){
			var now = new Date();
			return [new Date(now.getFullYear(),now.getMonth(),now.getDate(),0,0,0),now];
		},

		getNearOneDay: function(){
			var now = new Date();
			return [new Date(now.getFullYear(),now.getMonth(),now.getDate()-1,0,0,0),now];
		},

		getNearThreeDays: function(){
			var now = new Date();
			return [new Date(now.getFullYear(),now.getMonth(),now.getDate()-3,0,0,0),now];
		},

		getNearOneWeek: function(){
			var now = new Date();
			return [new Date(now.getFullYear(),now.getMonth(),now.getDate()-7,0,0,0),now];
		},

		getNearOneMonth: function(){
			var now = new Date();
			return [new Date(now.getFullYear(),now.getMonth(),now.getDate()-30,0,0,0),now];
		},

		getNearTwoMonths: function(){
			var now = new Date();
			return [new Date(now.getFullYear(),now.getMonth(),now.getDate()-60,0,0,0),now];
		},

		getNearThreeMonths: function(){
			var now = new Date();
			return [new Date(now.getFullYear(),now.getMonth(),now.getDate()-90,0,0,0),now];
		},

		getNearHalfYear: function(){
			var now = new Date();
			return [new Date(now.getFullYear(),now.getMonth(),now.getDate()-180,0,0,0),now];
		},

		getNearOneYear: function(){
			var now = new Date();
			return [new Date(now.getFullYear()-1,now.getMonth(),now.getDate(),0,0,0),now];
		},

		getFutureOneDay: function(){
			var now = new Date();
			return [now,new Date(now.getFullYear(),now.getMonth(),now.getDate()+1,0,0,0)];
		},

		getFutureThreeDays: function(){
			var now = new Date();
			return [now,new Date(now.getFullYear(),now.getMonth(),now.getDate()+3,0,0,0)];
		},

		getFutureOneWeek: function(){
			var now = new Date();
			return [now,new Date(now.getFullYear(),now.getMonth(),now.getDate()+7,0,0,0)];
		},

		getFutureOneMonth: function(){
			var now = new Date();
			return [now,new Date(now.getFullYear(),now.getMonth(),now.getDate()+30,0,0,0)];
		},

		getFutureTwoMonths: function(){
			var now = new Date();
			return [now, new Date(now.getFullYear(),now.getMonth(),now.getDate()+60,0,0,0)];
		},

		getFutureThreeMonths: function(){
			var now = new Date();
			return [now,new Date(now.getFullYear(),now.getMonth(),now.getDate()+90,0,0,0)];
		},

		getFutureHalfYear: function(){
			var now = new Date();
			return [now,new Date(now.getFullYear(),now.getMonth(),now.getDate()+180,0,0,0)];
		},

		getFutureOneYear: function(){
			var now = new Date();
			return [now,new Date(now.getFullYear()+1,now.getMonth(),now.getDate(),0,0,0)];
		},

		date2day : function(targetDate) {
			var nowDate = new Date(),
				nowYear = nowDate.getFullYear(),
				nowMonth = nowDate.getMonth(),
				nowDay = nowDate.getDate(),
				targetYear = targetDate.getFullYear(),
				targetMonth = targetDate.getMonth(),
				targetDay = targetDate.getDate(),
				res;

			res = new Date(targetYear,targetMonth,targetDay) - new Date(nowYear,nowMonth,nowDay)
			res = Math.floor(res/24/60/60/1000);
			return res;
		},

		day2date : function(day) {
			var nowDate = new Date(),
				nowYear = nowDate.getFullYear(),
				nowMonth = nowDate.getMonth(),
				nowDay = nowDate.getDate(),
				nowHour = nowDate.getHours(),
				nowMinute = nowDate.getMinutes(),
				nowSecond = nowDate.getSeconds();
			return new Date(nowYear,nowMonth,nowDay+day,nowHour,nowMinute,nowSecond);
		}
	},

	getScrollParent: function(node) {
		if (node === null) {
			return null;
		}

		if ( node.scrollHeight > node.clientHeight ) {
			return node;
		} else {
			return this.getScrollParent(node.parentNode);
		}
	}
};
},{}],19:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"382fdb8b65962bb5a069c41437dc011b"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/calendar/calendar_daysTpl',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$each=$utils.$each,week=$data.week,weekObj=$data.weekObj,index=$data.index,$escape=$utils.$escape,daysArr=$data.daysArr,dayObj=$data.dayObj,$out='';$out+='<table class="oas-calendar-day-table"> <thead> <tr class="oas-calendar-row"> ';
$each(week,function(weekObj,index){
$out+=' <th class="week-name">';
$out+=$escape(weekObj.weekName);
$out+='</th> ';
});
$out+=' </tr> </thead> <tbody> ';
$each(daysArr,function(dayObj,index){
$out+=' ';
if(index%7==0){
$out+=' <tr> ';
}
$out+=' <td class="oas-calendar-day ';
$out+=$escape(dayObj.type);
$out+='-month-day ';
if(dayObj.isToday === true){
$out+='oas-today';
}
$out+=' ';
if(dayObj.disableState===false){
$out+='disable-item';
}
$out+=' ';
if(dayObj.selectedDay===true){
$out+='selectedDay';
}
$out+=' ';
if(dayObj.maySelected===true){
$out+='maySelected';
}
$out+='" data-year="';
$out+=$escape(dayObj.year);
$out+='" data-month="';
$out+=$escape(dayObj.month);
$out+='" data-day="';
$out+=$escape(dayObj.day);
$out+='" data-dateformat="';
$out+=$escape(dayObj.dateFormat);
$out+='" > <div class="oas-calendar-date" title="';
$out+=$escape(dayObj.year);
$out+='/';
$out+=$escape(dayObj.month);
$out+='/';
$out+=$escape(dayObj.day);
$out+='">';
$out+=$escape(dayObj.day);
$out+='</div> </td> ';
if(index%7==6){
$out+=' </tr> ';
}
$out+=' ';
});
$out+=' </tbody> </table>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],20:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"6f7654112fe3d694831db8b4f371be85"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/calendar/calendar_doubleMonth',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,isStatic=$data.isStatic,$escape=$utils.$escape,calendarUUID=$data.calendarUUID,timePickHeaderStatus=$data.timePickHeaderStatus,monthPrePanelNub=$data.monthPrePanelNub,monthPrePanel=$data.monthPrePanel,yearPrePanelNub=$data.yearPrePanelNub,yearPrePanel=$data.yearPrePanel,monthNextPanelNub=$data.monthNextPanelNub,monthNextPanel=$data.monthNextPanel,yearNextPanelNub=$data.yearNextPanelNub,yearNextPanel=$data.yearNextPanel,extendStatus=$data.extendStatus,$each=$utils.$each,shortcutsArr=$data.shortcutsArr,shortcut=$data.shortcut,index=$data.index,operatorStatus=$data.operatorStatus,$out='';$out+='<div class="oas-calendar ';
if(isStatic === false){
$out+=$escape(calendarUUID);
}
$out+=' oas-doubleMonthCalendar" ';
if(isStatic === false){
$out+='style="display: none"';
}
$out+='> <div class="oas-calendar-wrapper oas-doubleMonthCalendar-pre"> <div class="oas-calendar-time-pick-header ';
if(timePickHeaderStatus === false){
$out+='oas-calendar-hidden';
}
$out+='" > <span class="oas-calendar-pick-wrap"> <div class="oas-input oas-day-input"> <input type="text" placeholder="选择日期" class="oas-input-inner" readonly> </div> </span> <div class="oas-calendar-pick-wrap"> <div class="oas-input oas-time-input"> <input type="text" placeholder="选择时间" class="oas-input-inner" readonly> </div>  <div class="oas-time-panel"> </div> </div> </div> <div class="oas-calendar-date-panel oas-calendar-wrap"> <div class="oas-calendar-hd clearfix"> <div class="oas-calendar-hd-wrapper"> <a class="oas-calendar-year-pre oas-calendar-doubble-left" title="上一年"><i class=" oasicon oasicon-left-doubble"></i> </a><a class="oas-calendar-month-pre oas-calendar-left" title="上一月"><i class="oasicon oasicon-prevstep"></i> </a> <span class="oas-calendar-year-month"> <a class="oas-calendar-month" data-month="';
$out+=$escape(monthPrePanelNub);
$out+='" title="月选择">';
$out+=$escape(monthPrePanel);
$out+=' </a><a class="oas-calendar-year" data-year="';
$out+=$escape(yearPrePanelNub);
$out+='" title="年选择">';
$out+=$escape(yearPrePanel);
$out+='</a> </span> <a class="oas-calendar-month-next oas-calendar-right" title="下一月" style="display: none"><i class="oasicon oasicon-nextstep"></i> </a><a class="oas-calendar-year-next oas-calendar-doubble-right" title="下一年" style="display: none"><i class=" oasicon oasicon-right-doubble"></i></a> </div>  <div class="oas-calendar-month-panel"> </div>  <div class="oas-calendar-year-panel"> </div> </div> <div class="oas-calendar-bd"> </div> </div> </div><div class="oas-calendar-wrapper oas-doubleMonthCalendar-next"> <div class="oas-calendar-time-pick-header ';
if(timePickHeaderStatus === false){
$out+='oas-calendar-hidden';
}
$out+='" > <span class="oas-calendar-pick-wrap"> <div class="oas-input oas-day-input"> <input type="text" placeholder="选择日期" class="oas-input-inner" readonly> </div> </span> <div class="oas-calendar-pick-wrap"> <div class="oas-input oas-time-input"> <input type="text" placeholder="选择时间" class="oas-input-inner" readonly> </div>  <div class="oas-time-panel"> </div> </div> </div> <div class="oas-calendar-date-panel oas-calendar-wrap"> <div class="oas-calendar-hd clearfix"> <div class="oas-calendar-hd-wrapper"> <a class="oas-calendar-year-pre oas-calendar-doubble-left" style="display: none" title="上一年"><i class=" oasicon oasicon-left-doubble"></i> </a><a class="oas-calendar-month-pre oas-calendar-left" style="display: none" title="上一月"><i class="oasicon oasicon-prevstep"></i> </a> <span class="oas-calendar-year-month"> <a class="oas-calendar-month" data-month="';
$out+=$escape(monthNextPanelNub);
$out+='" title="月选择">';
$out+=$escape(monthNextPanel);
$out+=' </a><a class="oas-calendar-year" data-year="';
$out+=$escape(yearNextPanelNub);
$out+='" title="年选择">';
$out+=$escape(yearNextPanel);
$out+='</a> </span> <a class="oas-calendar-month-next oas-calendar-right" title="下一月"><i class="oasicon oasicon-nextstep"></i> </a><a class="oas-calendar-year-next oas-calendar-doubble-right" title="下一年"><i class=" oasicon oasicon-right-doubble"></i></a> </div>  <div class="oas-calendar-month-panel"> </div>  <div class="oas-calendar-year-panel"> </div> </div> <div class="oas-calendar-bd"> </div> </div> </div> <div class="oas-calendar-footer"> <div class="oas-calendar-extend ';
if(extendStatus === false){
$out+='oas-calendar-hidden';
}
$out+='"> ';
$each(shortcutsArr,function(shortcut,index){
$out+=' <div class="oas-calendar-shortcut ';
$out+=$escape(shortcut.className);
$out+='">';
$out+=$escape(shortcut.text);
$out+='</div> ';
});
$out+=' </div> <div class="oas-calendar-operator oas-calendar-';
$out+=$escape(operatorStatus);
$out+=' clearfix"> <div> <span class="oas-calendar-footer-btn"> ';
if(operatorStatus === 'oneButton'){
$out+='<a class="oas-calendar-today-btn">今天</a>';
}
$out+=' </span> <button class="btn btn-primary oas-calendar-makesure">确定</button> </div> </div> </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],21:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"2938fccea209bf2f2e85b373753367ce"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/calendar/calendar_main',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,calendarUUID=$data.calendarUUID,type=$data.type,isStatic=$data.isStatic,timePickHeaderStatus=$data.timePickHeaderStatus,month=$data.month,year=$data.year,extendStatus=$data.extendStatus,$each=$utils.$each,shortcutsArr=$data.shortcutsArr,shortcut=$data.shortcut,index=$data.index,operatorStatus=$data.operatorStatus,$out='';$out+='<div class="oas-calendar ';
$out+=$escape(calendarUUID);
$out+=' ';
if(type === 'week'){
$out+='oas-calendar-weekModel';
}
$out+='" ';
if(isStatic === false){
$out+='style="display: none"';
}
$out+='> <div class="oas-calendar-wrapper"> <div class="oas-calendar-time-pick-header ';
if(timePickHeaderStatus === false){
$out+='oas-calendar-hidden';
}
$out+='" > <span class="oas-calendar-pick-wrap"> <div class="oas-input oas-day-input"> <input type="text" placeholder="选择日期" class="oas-input-inner"> </div> </span> <div class="oas-calendar-pick-wrap"> <div class="oas-input oas-time-input"> <input type="text" placeholder="选择时间" class="oas-input-inner"> </div>  <div class="oas-time-panel"> </div> </div> </div> <div class="oas-calendar-date-panel oas-calendar-wrap"> <div class="oas-calendar-hd clearfix"> <div class="oas-calendar-hd-wrapper"> <a class="oas-calendar-year-pre oas-calendar-doubble-left" title="上一年"><i class=" oasicon oasicon-left-doubble"></i> </a><a class="oas-calendar-month-pre oas-calendar-left" title="上一月"><i class="oasicon oasicon-prevstep"></i> </a> <span class="oas-calendar-year-month"> <a class="oas-calendar-month" title="月选择">';
$out+=$escape(month);
$out+=' </a><a class="oas-calendar-year" title="年选择">';
$out+=$escape(year);
$out+='</a> </span> <a class="oas-calendar-month-next oas-calendar-right" title="下一月"><i class="oasicon oasicon-nextstep"></i> </a><a class="oas-calendar-year-next oas-calendar-doubble-right" title="下一年"><i class=" oasicon oasicon-right-doubble"></i></a> </div>  <div class="oas-calendar-month-panel"> </div>  <div class="oas-calendar-year-panel"> </div> </div> <div class="oas-calendar-bd"> </div> <div class="oas-calendar-footer"> <div class="oas-calendar-extend ';
if(extendStatus === false){
$out+='oas-calendar-hidden';
}
$out+='"> ';
$each(shortcutsArr,function(shortcut,index){
$out+=' <div class="oas-calendar-shortcut ';
$out+=$escape(shortcut.className);
$out+='">';
$out+=$escape(shortcut.text);
$out+='</div> ';
});
$out+=' </div> ';
if(type !== 'week'){
$out+=' <div class="oas-calendar-operator oas-calendar-';
$out+=$escape(operatorStatus);
$out+=' clearfix"> <div> <span class="oas-calendar-footer-btn"> ';
if(operatorStatus === 'oneButton'){
$out+='<a class="oas-calendar-today-btn">今天</a>';
}else{
$out+=' <a class="oas-calendar-nowTime-btn">此刻</a>';
}
$out+=' </span> <button class="btn btn-primary oas-calendar-makesure">确定</button> </div> </div> ';
}
$out+=' </div> </div> </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],22:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"66a88b14fa56faca35ba0d201947e6f0"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/calendar/calendar_monthsTpl',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,selectedYear=$data.selectedYear,$each=$utils.$each,arr=$data.arr,monthObj=$data.monthObj,index=$data.index,$out='';$out+='<div class="oas-calendar-month-panel-wrapper"> <div class="oas-calendar-month-panel-header"> <a class="oas-calendar-month-panel-pre-year-btn oas-calendar-doubble-left" title="上一年"> </a><a class="oas-calendar-month-panel-year-select oas-calendar-year">';
$out+=$escape(selectedYear);
$out+=' </a><a class="oas-calendar-month-panel-next-year-btn oas-calendar-doubble-right" title="下一年"></a> </div> <div class="oas-calendar-month-panel-body"> <table class="oas-calendar-month-panel-table"> <tbody class="oas-calendar-month-panel-tbody"> ';
$each(arr,function(monthObj,index){
$out+=' ';
if(index%3==0){
$out+=' <tr class="oas-calendar-row"> ';
}
$out+=' <td class="oas-calendar-month-panel-cell ';
if(monthObj.disableState===false){
$out+='disable-item';
}
$out+=' ';
if(monthObj.selectedMonth===true){
$out+='selectedMonth';
}
$out+='" data-month=';
$out+=$escape(monthObj.month);
$out+=' data-year=';
$out+=$escape(monthObj.year);
$out+='> <a class="oas-calendar-month-panel-month">';
$out+=$escape(monthObj.name);
$out+='</a> </td> ';
if(index%3==2){
$out+=' </tr> ';
}
$out+=' ';
});
$out+=' </tbody> </table> </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],23:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"935c36d0aa2dba2a60ef078638e834b4"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/calendar/calendar_timeModel_panel',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,calendarUUID=$data.calendarUUID,$each=$utils.$each,hSwiper=$data.hSwiper,h=$data.h,$index=$data.$index,mSwiper=$data.mSwiper,m=$data.m,sSwiper=$data.sSwiper,s=$data.s,$out='';$out+='<div class="oas-calendar ';
$out+=$escape(calendarUUID);
$out+=' noShow oas-calendar-timePickerModel " > <div class="oas-calendar-wrapper"> <div class="oas-time-panel"> <div class="oas-time-panel-body"> <div class="oas-time-spinner"> <div class="oas-time-spinner-wrap oas-time-hour-spinner-wrap swiper-container"> <div class="oas-time-pick oas-time-pick-hour swiper-wrapper"> ';
$each(hSwiper,function(h,$index){
$out+=' <div class="swiper-slide">';
$out+=$escape(h);
$out+='</div> ';
});
$out+=' </div> </div><div class="oas-time-spinner-wrap oas-time-minute-spinner-wrap swiper-container"> <div class="oas-time-pick oas-time-pick-minute swiper-wrapper"> ';
$each(mSwiper,function(m,$index){
$out+=' <div class="swiper-slide">';
$out+=$escape(m);
$out+='</div> ';
});
$out+=' </div> </div><div class="oas-time-spinner-wrap oas-time-second-spinner-wrap swiper-container"> <div class="oas-time-pick oas-time-pick-second swiper-wrapper"> ';
$each(sSwiper,function(s,$index){
$out+=' <div class="swiper-slide">';
$out+=$escape(s);
$out+='</div> ';
});
$out+=' </div> </div> </div> </div> <div class="oas-time-panel-footer"> <span class="oas-time-cancel">取消 </span><span class="oas-time-confirm">确定</span> </div> </div> </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],24:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"0d58fe604542037c7b1a7b1371ed9da3"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/calendar/calendar_timesTpl',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$each=$utils.$each,hSwiper=$data.hSwiper,h=$data.h,$index=$data.$index,$escape=$utils.$escape,mSwiper=$data.mSwiper,m=$data.m,sSwiper=$data.sSwiper,s=$data.s,$out='';$out+='<div class="oas-time-panel-body"> <div class="oas-time-spinner"> <div class="oas-time-spinner-wrap oas-time-hour-spinner-wrap swiper-container"> <div class="oas-time-pick oas-time-pick-hour swiper-wrapper"> ';
$each(hSwiper,function(h,$index){
$out+=' <div class="swiper-slide">';
$out+=$escape(h);
$out+='</div> ';
});
$out+=' </div> </div><div class="oas-time-spinner-wrap oas-time-minute-spinner-wrap swiper-container"> <div class="oas-time-pick oas-time-pick-minute swiper-wrapper"> ';
$each(mSwiper,function(m,$index){
$out+=' <div class="swiper-slide">';
$out+=$escape(m);
$out+='</div> ';
});
$out+=' </div> </div><div class="oas-time-spinner-wrap oas-time-second-spinner-wrap swiper-container"> <div class="oas-time-pick oas-time-pick-second swiper-wrapper"> ';
$each(sSwiper,function(s,$index){
$out+=' <div class="swiper-slide">';
$out+=$escape(s);
$out+='</div> ';
});
$out+=' </div> </div> </div> </div> <div class="oas-time-panel-footer"> <span class="oas-time-cancel">取消 </span><span class="oas-time-confirm">确定</span> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],25:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"d4d565ebcc11a4497ee6dde155ee9c38"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/calendar/calendar_yearsTpl',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,startYear=$data.startYear,endYear=$data.endYear,$each=$utils.$each,arr=$data.arr,yearObj=$data.yearObj,index=$data.index,$out='';$out+='<div class="oas-calendar-year-panel-wrapper"> <div class="oas-calendar-year-panel-header"> <a class="oas-calendar-year-panel-pre-year-btn oas-calendar-doubble-left" title="上一年"> </a><a class="oas-calendar-year-panel-year-select oas-calendar-year"><span>';
$out+=$escape(startYear);
$out+='-';
$out+=$escape(endYear);
$out+=' </span></a><a class="oas-calendar-year-panel-next-year-btn oas-calendar-doubble-right" title="下一年"></a> </div> <div class="oas-calendar-year-panel-body"> <table class="oas-calendar-year-panel-table"> <tbody class="oas-calendar-year-panel-tbody"> ';
$each(arr,function(yearObj,index){
$out+=' ';
if(index%3==0){
$out+=' <tr class="oas-calendar-row"> ';
}
$out+=' <td class="oas-calendar-year-panel-cell ';
$out+=$escape(yearObj.type);
$out+='-ten-year ';
if(yearObj.disableState===false){
$out+='disable-item';
}
$out+=' ';
if(yearObj.selectedYear===true){
$out+='selectedYear';
}
$out+='" data-year=';
$out+=$escape(yearObj.year);
$out+='> <a class="oas-calendar-year-panel-year">';
$out+=$escape(yearObj.year);
$out+='</a> </td> ';
if(index%3==2){
$out+=' </tr> ';
}
$out+=' ';
});
$out+=' </tbody> </table> </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],26:[function(require,module,exports){
/*
 * @desc calendar组件
 * @anthor fw
 * @Date 2017-07-27
 */
var Position   = require('../position/index'),
    calendarMainTpl   = require('./calendar_main.tpl'),
    calendarTimeModelPanelTpl   = require('./calendar_timeModel_panel.tpl'),
    calendarYearsTpl   = require('./calendar_yearsTpl.tpl'),
    calendarMonthsTpl   = require('./calendar_monthsTpl.tpl'),
    calendarDaysTpl   = require('./calendar_daysTpl.tpl'),
    calendartimesTpl   = require('./calendar_timesTpl.tpl'),
    doubleMonthTpl   = require('./calendar_doubleMonth.tpl');
module.exports = function(){
    $.oasUiFactory('oasCalendar', {
    	VERSION: '1.0.0',
    	options: {
            // 是否只读 (双面板 默认只读)
            readyOnly: true,
            // 是否禁用
            disabled: false,
            // 是否可清除
            clearable: true, 
            // input框尺寸 default/small/large(没有写)
            size: 'default',
            // 设置是否为静态(time暂不提供静态)
            isStatic : false,
            // year/month/date/time/week/daterange/datatime(日期带时间)/datetimerange(日期范围带时间)/   为兼容以前分开写法 增加oldrange oldtimerange 
            type: 'date',
            // 日期格式化
            format: 'YYYY-MM-DD',
            // 默认日期
            defaultDate: new Date(),
            defaultRangeDate: [],
            // 容器
            container:'body',
            // 扩展面板的类(shortcuts length为0不启用扩展 [{'近一周':'function(){}'}])
            shortcuts: [],
            // 第一列显示星期几
            startFrom : 0,
            // 日历可选择区间
            range : [new Date(1900,0,1),new Date(2100,0,1)],
            // 哪些元素触发日历打开 (传递jquery对象)
            triggerSelector: [],
            // 设置input框长度
            width: '',
            // 设置input框大小 large、small、default
            size: 'defalut',
        }, 
        _numberToWeek : {
            0 : '日',
            1 : '一',
            2 : '二',
            3 : '三',
            4 : '四',
            5 : '五',
            6 : '六'
        },
        _numberToMonth : {
            0 : '1月',
            1 : '2月',
            2 : '3月',
            3 : '4月',
            4 : '5月',
            5 : '6月',
            6 : '7月',
            7 : '8月',
            8 : '9月',
            9 : '10月',
            10 : '11月',
            11 : '12月'
        },
        _numberToChinese : {
            0 : '一',
            1 : '二',
            2 : '三',
            3 : '四',
            4 : '五',
            5 : '六',
            6 : '七',
            7 : '八',
            8 : '九',
            9 : '十',
            10 : '十一',
            11 : '十二'
        },
        events : {
            'target': function() {
                return this.$calendar;
            },
            // 时间面板确认按钮
            'click .oas-time-confirm': function(self) {
                var $calendar = this.$calendar,
                    $self = $(self);
                    hour = $self.parents('.oas-calendar-wrapper').find('.oas-time-pick-hour .swiper-slide-active').html(),
                    minute = $self.parents('.oas-calendar-wrapper').find('.oas-time-pick-minute .swiper-slide-active').html(),
                    second = $self.parents('.oas-calendar-wrapper').find('.oas-time-pick-second .swiper-slide-active').html(),
                    time = moment({h:hour,m:minute,s:second}).format('HH:mm:ss');
                if( this.obj.isDoublePanel === false ){
                    // 更新对象
                    this._setObj({
                        hour: hour,
                        minute: minute,
                        second: second
                    });
                    if($calendar.find('.oas-calendar-time-pick-header').length === 0){
                        // 单独时间选择模式
                        //转为制定格式 
                        var time = moment({h:hour,m:minute,s:second}).format(this.options.format);
                        this.$el.val(time);
                        this.$el.attr('value',time);
                        this._timePanelClose();
                        this._toggleIcon();
                    }else{
                        // 选择时间
                        $calendar.find('.oas-time-input input').val(time);
                        this._setDateSingle(this.obj.selectedDate,{hour:hour,minute:minute,second:second});
                        this._timePanelClose();
                    }           
                }else{
                    if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                        // 更新对象
                        this._setObj({
                            hourPrePanel: hour,
                            minutePrePanel: minute,
                            secondPrePanel: second
                        });
                        $self.parents('.oas-doubleMonthCalendar-pre').find('.oas-time-input input').val(time);
                        this._setDateSingle(this.obj.selectedDatePrePanel,{hour:hour,minute:minute,second:second});
                        this._timePanelClose();
                    }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                        // 更新对象
                        this._setObj({
                            hourNextPanel: hour,
                            minuteNextPanel: minute,
                            secondNextPanel: second
                        });
                        $self.parents('.oas-doubleMonthCalendar-next').find('.oas-time-input input').val(time);
                        this._setDateSingle(this.obj.selectedDateNextPanel,{hour:hour,minute:minute,second:second});
                        this._timePanelClose();
                    }
                }  
            },
            // 确定按钮
            'click .oas-calendar-makesure:not([disabled])': function(self) {
                if( this.obj.isDoublePanel === false ){
                    if(this.obj.isStatic === true){
                        this._updateObjByDate(this.obj.selectedDate);
                        this._emit('select',[this.$el,this.obj.date]);
                        this._emit('selected',[this.$el,this.obj.date]);
                        return ;
                    }
                    var time = moment(this.obj.selectedDate).format(this.options.format);
                    this.$el.val(time);
                    this.$el.attr('value',time);
                    // 确认后同步到date中
                    this._updateObjByDate(this.obj.selectedDate);
                    this._close();
                    this._toggleIcon();
                    this._emit('select',[this.$el,this.obj.date]);
                    this._emit('selected',[this.$el,this.obj.date]);
                }else{
                    if(this.obj.selectedDatePrePanel.getTime() > this.obj.selectedDateNextPanel.getTime()){
                        this.obj.selectedDatePrePanel = this.obj.selectedDatePrePanelBak;
                        this.obj.selectedNumb = 2;
                        if(this.obj.isStatic !== true){
                            this._close();
                            this._toggleIcon();
                        }
                        return false;
                    }
                    var timePre = moment(this.obj.selectedDatePrePanel).format(this.options.format);
                    var timeNext = moment(this.obj.selectedDateNextPanel).format(this.options.format);
                    // 备份防止确认时只选择了一个，需要恢复
                    this.obj.selectedDatePrePanelBak =  moment(this.obj.selectedDatePrePanel)._d;
                    this.$el.find('.oas-calendar-startTime').val(timePre);
                    this.$el.find('.oas-calendar-endTime').val(timeNext);
                    this.$el.find('.oas-calendar-startTime').attr('value',timePre);
                    this.$el.find('.oas-calendar-endTime').attr('value',timeNext);
                    // 确认后同步到date中
                    this._updateObjByDateDoublePanel(this.obj.selectedDatePrePanel,this.obj.selectedDateNextPanel);
                    if(this.obj.isStatic !== true){
                        this._close();
                        this._toggleIcon();
                    }
                    this._emit('select',[this.$el,this.obj.startDate,this.obj.endDate]);
                    this._emit('selected',[this.$el,this.obj.startDate,this.obj.endDate]);
                }
            },
            // 此刻
            'click .oas-calendar-nowTime-btn': function(self) {
                var time,
                    today = new Date();
                if(this.obj.isStatic === true){
                    this._updateObjByDate(today);
                    this._rendarHeaderInput();
                    this._renderYearMonthHd();
                    this._createDays(this.obj.date);
                }else{
                    if(today>this.obj.minDate && today<this.obj.maxDate) {
                        this._updateObjByDate(today);
                        this.$el.val(moment(this.obj.date).format(this.options.format));
                    }
                    this._close();
                    this._toggleIcon();
                }
                this._emit('select',[this.$el,this.obj.date]);
                this._emit('selected',[this.$el,this.obj.date]);
            },
            'click .oas-time-cancel': function(self) {
                this._timePanelClose();
            },
            
            'click .oas-time-input': function(self) {
                this._createTime($(self));                
            },
            
            // 日视图
            'click .current-month-day': function(self) {
                var $self = $(self),
                    year = $self.data('year'),
                    month = $self.data('month'),
                    day = $self.data('day');
                    // console.log(day);
                if($self.hasClass('disable-item')) {
                    return false;
                };
                if(this.obj.type === 'week'){
                    var week = moment(new Date(year,month,day)).week();
                    // 当周第一天（周日）
                    var date = moment(moment().week(week)._d).subtract(3,'days')._d;
                    this.obj.date = date;
                    this._updateObjByDate(date);
                    this.$el.attr('data-value',moment(date).format(this.options.format));
                    this.$el.val(year +" 第 "+week +" 周");
                    this._close();
                    this._emit('select',[this.$el,this.obj.date]);
                    this._emit('selected',[this.$el,this.obj.date]);
                    return false;
                }
                if( this.obj.isDoublePanel === false ){
                        // 静态的情况
                    if(this.obj.isStatic === true){
                        var type = this.options.type; 
                        this.$calendar.find('.selectedDay').removeClass('selectedDay');
                        $self.addClass('selectedDay');
                        switch( type ){
                            case 'year' :
                                this._setDateSingle(this.obj.date,{year:year,month:month,day:day});
                                this._updateObjByDate(moment(this.obj.date)._d);
                                break;  
                            case 'month' :
                                this._setDateSingle(this.obj.date,{year:year,month:month,day:day});
                                this._updateObjByDate(moment(this.obj.date)._d);
                                break;  
                            case 'date' :
                                this._setDateSingle(this.obj.date,{year:year,month:month,day:day});
                                this._updateObjByDate(moment(this.obj.date)._d);
                                break;  
                            case 'time' :
                                break;  
                            case 'datetime' :
                                this._setDateSingle(this.obj.selectedDate,{year:year,month:month,day:day});
                                this.$calendar.find('.oas-day-input input').val(moment(this.obj.selectedDate).format('YYYY-MM-DD'));
                                break;  
                        }
                        this._emit('select',[this.$el,this.obj.selectedDate]);
                        this._emit('selected',[this.$el,this.obj.selectedDate]);
                        return false;
                    }
                    this._setDateSingle(this.obj.selectedDate,{year:year,month:month,day:day});
                    this.$calendar.find('.selectedDay').removeClass('selectedDay');
                    $self.addClass('selectedDay');
                    if(this.options.type === 'date'){
                        this._confirmDate();
                        if(!this.options.isStatic) {
                            this._close();
                        }   
                    this._emit('select',[this.$el,this.obj.selectedDate]);
                    this._emit('selected',[this.$el,this.obj.selectedDate]);
                    }else{
                        this.$calendar.find('.oas-day-input input').val(moment(this.obj.selectedDate).format('YYYY-MM-DD'));
                    }
                    return false;
                }else{
                    // 双面板
                    if(this.obj.selectedNumb === 1){
                        // 已选中1个 即选择中
                        this.obj.isInChose = false;
                        this._setDateSingle(this.obj.selectedDateNextPanel,{year:year,month:month,day:day});
                        // 如果前一个面板日期在后面，选中后交换
                        this._sortPreNextDate();
                        // this._setDateSingle(this.obj.selectedDateNextPanel,{year:year,month:month,day:day});
                        this.$calendar.find('.oas-doubleMonthCalendar-next .oas-day-input input').val(moment(this.obj.selectedDateNextPanel).format('YYYY-MM-DD'));
                        this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-day-input input').val(moment(this.obj.selectedDatePrePanel).format('YYYY-MM-DD'));
                        // 重新渲染
                        this._updateSelectedDateDoublePanel();
                        this._renderYearMonthHdDoublePanel();                            
                        this._createTimeRangeDays(this.obj.selectedDatePrePanel,this.obj.selectedDateNextPanel);
                        this._addMaySelectedStyle(this.obj.selectedDatePrePanel,this.obj.selectedDateNextPanel);
                        this._isHiddenButton();
                    }else if(this.obj.selectedNumb === 0 || this.obj.selectedNumb === 2){
                        // 已选中0个
                        this.obj.isInChose = true;
                        this._setDateSingle(this.obj.selectedDatePrePanel,{year:year,month:month,day:day});
                        this.$calendar.find('.selectedDay').removeClass('selectedDay'); 
                        this.$calendar.find('.maySelected').removeClass('maySelected');
                        //  选择第一个时清空两个面板
                        this.$calendar.find('.oas-day-input input').val(moment(this.obj.selectedDatePrePanel).format('YYYY-MM-DD'));
                    }
                    this.obj.selectedNumb === 1 ? this.$calendar.find('.oas-calendar-makesure').removeAttr('disabled') : this.$calendar.find('.oas-calendar-makesure').attr('disabled','disabled');
                    // 增加选中个数
                    this._addSelectedNub();
                    $self.addClass('selectedDay');
                    this._emit('select',[this.$el,this.obj.startDate,this.obj.endDate]);
                    this._emit('selected',[this.$el,this.obj.startDate,this.obj.endDate]);
                    return false;
                }
            },
            'click .pre-month-day': function(self) {
                var $self = $(self),
                    year = $self.data('year'),
                    month = $self.data('month'),
                    day = $self.data('day');
                if($self.hasClass('disable-item')) {
                    return false;
                };
                if(this.obj.type === 'week'){
                    var week = moment(new Date(year,month,day)).week();
                    // 当周第一天（周日）
                    var date = moment(moment().week(week)._d).subtract(3,'days')._d;
                    this.$el.attr('value',moment(date).format(this.options.format));
                    this.$el.val(year +" 第 "+week +" 周");
                    this._close();
                    return false;
                }
                if( this.obj.isDoublePanel === false ){
                    this._setDateSingle(this.obj.selectedDate,{year:year,month:month,day:day});
                    if(this.options.type === 'datetime'){
                        this._setPreMonth($self);
                        this._renderYearMonthHd();
                        this._createDays(this.obj.monthSelectedTempDate);
                    }else{
                        this._confirmDate();
                        this._close();
                    }
                }else{
                    //如果前一个面板只比下个月小一个月 则点击上个月日期无效
                    if( $(self).parents('.oas-doubleMonthCalendar-next').length > 0 && $(self).parents('.oas-doubleMonthCalendar-next').find('.oas-calendar-left').css('display') === 'none'){
                        return false;
                    }

                    // 双月面板
                    this._setPreMonth($self);
                    this._renderYearMonthHdDoublePanel();
                    this._createDaysDoublePanel($self,this.obj.monthSelectedTempDatePrePanel,this.obj.monthSelectedTempDateNextPanel);
                    this._isHiddenButton();
                }
                    return false;
            },
            'click .next-month-day': function(self) {
                var $self = $(self),
                    year = $self.data('year'),
                    month = $self.data('month'),
                    day = $self.data('day');
                if($self.hasClass('disable-item')) {
                    return false;
                };
                if(this.obj.type === 'week'){
                    var week = moment(new Date(year,month,day)).week();
                    // 当周第一天（周日）
                    var date = moment(moment().week(week)._d).subtract(3,'days')._d;
                    this.$el.attr('value',moment(date).format(this.options.format));
                    this.$el.val(year +" 第 "+week +" 周");
                    this._close();
                    return false;
                }
                if( this.obj.isDoublePanel === false ){
                    this._setDateSingle(this.obj.selectedDate,{year:year,month:month,day:day});
                    if(this.options.type === 'datetime'){
                        this._setNextMonth($self);
                        this._renderYearMonthHd();
                        this._createDays(this.obj.monthSelectedTempDate);
                    }else{
                        this._confirmDate();
                        this._close();
                    }
                }else{
                    //如果前一个面板只比下个月小一个月 则点击下个月日期无效
                    if( $(self).parents('.oas-doubleMonthCalendar-pre').length > 0 &&  $(self).parents('.oas-doubleMonthCalendar-pre').find('.oas-calendar-right').css('display') === 'none'){
                        return false;
                    }

                    // 双月面板
                    this._setNextMonth($self);
                    this._renderYearMonthHdDoublePanel();
                    this._createDaysDoublePanel($self,this.obj.monthSelectedTempDatePrePanel,this.obj.monthSelectedTempDateNextPanel);
                    this._isHiddenButton();
                }
                return false;
            },
            'click .oas-calendar-today-btn':function() {
                var today = new Date();
                if(this.obj.isStatic === true){
                    this._updateObjByDate(today);
                    this._rendarHeaderInput();
                    this._renderYearMonthHd();
                    this._createDays(this.obj.date);
                }else{
                    // 为适应老版本 双input框时间范围添加
                    if(today>this.obj.minDate && today<this.obj.maxDate) {
                        this._updateObjByDate(today);
                    }
                    this._confirmDate();
                    this._close();
                }
                // 为适应老版本 双input框时间范围添加
                if(today>this.obj.minDate && today<this.obj.maxDate) {
                    this._emit('select',[this.$el,this.obj.date]);
                    this._emit('selected',[this.$el,this.obj.date]);
                }
            },
            'click .oas-calendar-month-pre':function(self) {
                var $self = $(self);
                if( this.obj.isDoublePanel === false ){
                    this._setPreMonth($self);
                    this._renderYearMonthHd();
                    this._createDays(this.obj.monthSelectedTempDate);
                }else{
                    // 双月面板
                    this._setPreMonth($self);
                    this._renderYearMonthHdDoublePanel();
                    this._createDaysDoublePanel($self,this.obj.monthSelectedTempDatePrePanel,this.obj.monthSelectedTempDateNextPanel);
                    this._isHiddenButton();
                }
            },
            'click .oas-calendar-month-next':function(self) {
                var $self = $(self);
                if( this.obj.isDoublePanel === false ){
                    this._setNextMonth($self);
                    this._renderYearMonthHd();
                    this._createDays(this.obj.monthSelectedTempDate);
                }else{
                    // 双月面板
                    this._setNextMonth($self);
                    this._renderYearMonthHdDoublePanel();
                    this._createDaysDoublePanel($self,this.obj.monthSelectedTempDatePrePanel,this.obj.monthSelectedTempDateNextPanel);
                    this._isHiddenButton();
                }
            },
            'click .oas-calendar-year-pre':function(self) {
                var $self = $(self);
                if( this.obj.isDoublePanel === false ){
                    this._setPreYear($self);
                    this._renderYearMonthHd();
                    this._createDays(this.obj.yearSelectedTempDate);
                }else{
                    // 双月面板
                    this._setPreYear($self);
                    this._renderYearMonthHdDoublePanel();
                    this._createDaysDoublePanel($self,this.obj.yearSelectedTempDatePrePanel,this.obj.yearSelectedTempDateNextPanel);
                    this._isHiddenButton();
                }
            },
            'click .oas-calendar-year-next':function(self) {
                var $self = $(self);
                if(this.obj.isDoublePanel === false){
                    this._setNextYear($self);
                    this._renderYearMonthHd();
                    this._createDays(this.obj.yearSelectedTempDate);
                }else{
                    // 双月面板
                    this._setNextYear($self);
                    this._renderYearMonthHdDoublePanel();
                    this._createDaysDoublePanel($self,this.obj.yearSelectedTempDatePrePanel,this.obj.yearSelectedTempDateNextPanel);
                    this._isHiddenButton();
                }
            },

            // 月面板相关
            'click .oas-calendar-month':function(self) {
                var $self = $(self);
                if(this.obj.isDoublePanel === false){
                    // // 设置进入月视图的初始值
                    this._createMonths();
                }else{
                    this._renderMonthsDoublePanel($self);
                }
            },
            'click .oas-calendar-month-panel-pre-year-btn':function(self) {
                var $self = $(self);
                this._setMonthModelPreYear($self);
                this._renderMonthPanelHd($self);
                if(this.obj.isDoublePanel === false){
                    this._createMonths();
                    if(this.options.isStatic) {
                        this.obj.date = moment(this.obj.yearSelectedTempDate)._d;
                    } 
                }else{
                    this._renderMonthsDoublePanel($self);
                }
            },
            'click .oas-calendar-month-panel-next-year-btn':function(self) {
                var $self = $(self);
                // 更新日期
                this._setMonthModelNextYear($self);
                // 渲染头部
                this._renderMonthPanelHd($self);
                if(this.obj.isDoublePanel === false){
                    this._createMonths();
                    if(this.options.isStatic) {
                        this.obj.date = moment(this.obj.yearSelectedTempDate)._d;
                    } 
                }else{
                    // 双面板渲染
                    this._renderMonthsDoublePanel($self);
                }
            },
            'click .oas-calendar-month-panel-cell':function(self) {
                var $self = $(self),
                    year = $self.data('year'),
                    month = $self.data('month');
                if($self.hasClass('disable-item')) {
                    return false;
                };
                if(this.obj.isDoublePanel === false){
                    if(this.options.type === 'month'){
                        var time = moment({year:year,month:month}).format(this.options.format);
                        this._setDateSingle(this.obj.selectedDate,{year:year,month:month});
                        this._updateObjByDate(this.obj.selectedDate);
                        if(this.obj.isStatic !== true ){
                            this.$el.val(time);
                            this.$el.attr('value',time);
                            this._close();
                            this._toggleIcon();
                        }else{
                            this._createMonths(this.obj.date.getMonth());
                        }
                        this._emit('select',[this.$el,this.obj.date]);
                        this._emit('selected',[this.$el,this.obj.date]);
                    }else{
                        this._setDateSingle(this.obj.selectedDate,{year:year,month:month});
                        this._setDateSingle(this.obj.monthSelectedTempDate,{year:year,month:month});
                        // 关闭月视图
                        $self.parents('.oas-calendar-month-panel').css('display','none');
                        // 重绘日视图
                        this._renderYearMonthHd();
                        this._createDays(this.obj.selectedDate);
                    }
                }else{
                    var leftPanelSelectedDate,
                        rightPanelSelectedDate;
                    if($self.parents('.oas-doubleMonthCalendar-pre').length === 1 ){
                        leftPanelSelectedDate = this._setDateSingle(this.obj.yearSelectedTempDatePrePanel,{year:year,month:month});
                        rightPanelSelectedDate = this._setDateSingle(this.obj.monthSelectedTempDatePrePanel,{year:year,month:month});
                    }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                        leftPanelSelectedDate = this._setDateSingle(this.obj.yearSelectedTempDateNextPanel,{year:year,month:month});
                        rightPanelSelectedDate = this._setDateSingle(this.obj.monthSelectedTempDateNextPanel,{year:year,month:month});
                    }
                    // 关闭月视图
                    $self.parents('.oas-calendar-month-panel').css('display','none');
                    this._renderYearMonthHdDoublePanel();
                    this._createDaysDoublePanel($self,leftPanelSelectedDate,rightPanelSelectedDate);
                }
            },

            // 年视图
            'click .oas-calendar-year':function(self) {
                var $self = $(self);
                if(this.obj.isDoublePanel === false){
                    // // 设置进入月视图的初始值
                    this._createYears(this.obj.yearSelectedTempDate.getFullYear());
                }else{
                    this._renderYearsDoublePanel($self);
                }
            },
            'click .oas-calendar-year-panel-pre-year-btn':function(self) {
                var $self = $(self);
                this._setYearModelPreYear($self);
                this._renderYearPanelHd($self);
                if(this.obj.isDoublePanel === false){
                    this._createYears(this.obj.yearSelectedTempDate.getFullYear());
                    if(this.obj.isStatic === true){
                        this._setDateSingle(this.obj.date,{year:this.obj.yearSelectedTempDate.getFullYear()});
                        this._updateObjByDate(this.obj.date);
                    }
                }else{
                    this._renderYearsDoublePanel($self);
                }
            },
            'click .oas-calendar-year-panel-next-year-btn':function(self) {
                var $self = $(self);
                this._setYearModelNextYear($self);
                this._renderYearPanelHd($self);
                if(this.obj.isDoublePanel === false){
                    this._createYears(this.obj.yearSelectedTempDate.getFullYear());
                    if(this.obj.isStatic === true){
                        this._setDateSingle(this.obj.date,{year:this.obj.yearSelectedTempDate.getFullYear()});
                        this._updateObjByDate(this.obj.date);
                    }
                }else{
                    this._renderYearsDoublePanel($self);
                }
            },
            'click .current-ten-year':function(self) {
                var $self = $(self),
                    year = $self.data('year');
                if($self.hasClass('disable-item')) {
                    return false;
                };
                if( this.obj.isDoublePanel === false ){
                    if(this.options.type === 'year'){
                        var time = moment({y:year}).format(this.options.format);
                        this._setDateSingle(this.obj.date,{year:year});
                        this._updateObjByDate(this.obj.date);
                        if(this.obj.isStatic !== true ){
                            this.$el.val(time);
                            this.$el.attr('value',time);
                            this._close();
                            this._toggleIcon();
                        }else{
                            this._createYears(this.obj.date.getFullYear());
                        }
                        this._emit('select',[this.$el,this.obj.date]);
                        this._emit('selected',[this.$el,this.obj.date]);
                    }else{
                        this._setDateSingle(this.obj.yearSelectedTempDate,{year:year});
                        this._setDateSingle(this.obj.monthSelectedTempDate,{year:year});
                        // 关闭年视图
                        $self.parents('.oas-calendar-year-panel').css('display','none');
                        // 重绘月视图
                        this._renderMonthPanelHd($self);
                        this._createMonths(this.obj.selectedDate);
                        if(this.obj.isStatic){
                            this._updateObjByDate(this.obj.yearSelectedTempDate);
                        }
                    }
                }else{
                    if($self.parents('.oas-doubleMonthCalendar-pre').length === 1 ){
                        this._setDateSingle(this.obj.yearSelectedTempDatePrePanel,{year:year});
                        this._setDateSingle(this.obj.monthSelectedTempDatePrePanel,{year:year});
                    }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                        this._setDateSingle(this.obj.yearSelectedTempDateNextPanel,{year:year});
                        this._setDateSingle(this.obj.monthSelectedTempDateNextPanel,{year:year});
                    }
                    // 关闭年视图
                    $self.parents('.oas-calendar-year-panel').css('display','none');
                    this._renderMonthPanelHd($self);
                    this._renderMonthsDoublePanel($self);
                }
            },
            'click .pre-ten-year':function(self) {
                var $self = $(self);
                if($(self).hasClass('disable-item')) {
                    return false;
                };
                this._setYearModelPreYear($self);
                this._renderYearPanelHd($self);
                if(this.obj.isDoublePanel === false){
                    this._createYears(this.obj.yearSelectedTempDate.getFullYear());
                }else{
                    this._renderYearsDoublePanel($self);
                }
                return false;
            },
            'click .next-ten-year':function(self) {
                var $self = $(self);
                if($(self).hasClass('disable-item')) {
                    return false;
                };
                this._setYearModelNextYear($self);
                this._renderYearPanelHd($self);
                if(this.obj.isDoublePanel === false){
                    this._createYears(this.obj.yearSelectedTempDate.getFullYear());
                }else{
                    this._renderYearsDoublePanel($self);
                }
                return false;
            },
            'mouseover .oas-calendar-day': function(self){
                if(this.obj.type === 'week'){
                    // 周模式
                    $(self).parents('.oas-calendar-day-table').find('tr').removeClass('weekInchose');
                    $(self).parents('tr').addClass('weekInchose');
                }else{
                    // 双月模式
                    var timeBegin = this.obj.selectedDatePrePanel,
                        timeEnd = $(self).data('dateformat'),
                        that = this;
                    if(this.obj.isInChose === true && this.obj.selectedNumb === 1){
                        this._addMaySelectedStyle(timeBegin,timeEnd);
                    }
                }
            }
        },
        _create: function(){
            this._createDefaultObj(); 
            this._initOptions(); 
            this._initObj();
            this.options.isStatic === false ? this._initInput() : undefined; 
            var type = this.options.type; 
            switch( type ){
                case 'year' :
                    this._yearCreate();
                    break;  
                case 'month' :
                    this._monthCreate();
                    break;  
                case 'date' :
                    this._dateCreate();
                    break;  
                case 'time' :
                    this._timeCreate();
                    break;  
                case 'week' :
                    this._weekCreate();
                    break;  
                case 'datetime' :
                    this._dateTimeCreate();
                    break;  
                case 'daterange' :
                    this._daterangeCreate();
                    break;  
                case 'datetimerange' :
                    this._datetimerangeCreate();
                    break;  
                case 'oldrange' :
                    this._oldrangeCreate();
                    break;  
                case 'oldtimerange' :
                    this._oldtimerangeCreate();
                    break;  
            }
            this._checkInputValue(); 
            this._bindTrigger(); 
            this._bindShortcuts();
            this._setWidth();   
            oasisl.use(["swiper"],function(){})    
        },
        _setWidth: function(){
            if(this.options.width === ''){
                return false;
            }
            this.$el.parents('.oas-input-wrapper').css('width',this.options.width);
            if(this.options.type ==='daterange' || this.options.type ==='datetimerange'){
            this.$el.find('.oas-calendar-double-panel-input-wrapper').css('width','100%');
                this.$el.find('input').css('width',(this.options.width - 44 )/2);
            }else{
                this.$el.css('width','100%');
            }
        },
        // 初始化对象属性
        _initObj: function(){
            // 2017-10-25 增加双面板设置默认日期范围
            this.options.defaultRangeDate.length !== 0 ? this.options.defaultDate = this.options.defaultRangeDate[0] : undefined;
            var time = this.options.defaultDate,
                type = this.options.type; 
            // UUID生成组件唯一标识
            this.calendarUUID = oasisl.util.getUID(this.uiName);
            this._setObj({
                date: moment(time)._d,
                calendarUUID: this.calendarUUID,
                year: moment(time).year(),
                month: moment(time).month(),
                week: moment(time).week(),
                day: moment(time).date(),
                hour: moment(time).hour(),
                minute: moment(time).minute(),
                second: moment(time).second(),
                startDate: moment(time)._d,
                endDate: moment(time).add(1,'months')._d,
                isStatic: this.options.isStatic,                
                minDate: this.options.range[0],
                maxDate: this.options.range[1],
                container:$(this.options.container),
                size: this.options.size,
                hSwiper:this._getArray(24),
                mSwiper: this._getArray(60),
                sSwiper: this._getArray(60),
            });
            // 2017-10-25 增加双面板设置默认日期范围
            this.options.defaultRangeDate.length !== 0 ? this.obj['endDate'] = this.options.defaultRangeDate[1] : undefined;

            switch( type ){
                case 'year' :
                    this.options.format === 'YYYY-MM-DD' ? this.options.format = 'YYYY' : undefined;
                    break;  
                case 'month' :
                    this.options.format === 'YYYY-MM-DD' ? this.options.format = 'YYYY-MM' : undefined;
                    break;  
                case 'date' :
                    break;  
                case 'time' :
                    this.options.format === 'YYYY-MM-DD' ? this.options.format = 'HH:mm:ss' : undefined;
                    break;  
                case 'week' :
                    this.options.readyOnly = true;
                    break;  
                case 'datetime' :
                    this.options.format === 'YYYY-MM-DD' ? this.options.format = 'YYYY-MM-DD HH:mm:ss' : undefined;
                    this._setObj({timePickHeaderStatus: true,operatorStatus: 'twoButton'});
                    break;  
                case 'daterange' :
                    this._setObj({
                        yearPrePanel:this.obj.startDate.getFullYear(),
                        monthPrePanel: this.obj.startDate.getMonth(),
                        dayPrePanel:this.obj.startDate.getDate(),
                        hourPrePanel:this.obj.startDate.getHours(),
                        minutePrePanel:this.obj.startDate.getMinutes(),
                        secondPrePanel:this.obj.startDate.getSeconds(),
                        yearNextPanel:this.obj.endDate.getFullYear(),
                        monthNextPanel: this.obj.endDate.getMonth(),
                        dayNextPanel:this.obj.endDate.getDate(),
                        hourNextPanel:this.obj.endDate.getHours(),
                        minuteNextPanel:this.obj.endDate.getMinutes(),
                        secondNextPanel:this.obj.endDate.getSeconds(),

                        selectedDatePrePanel: moment(this.obj.startDate)._d,
                        selectedDateNextPanel: moment(this.obj.endDate)._d,
                        yearSelectedTempDatePrePanel: moment(this.obj.startDate)._d,
                        yearSelectedTempDateNextPanel: moment(this.obj.endDate)._d,
                        monthSelectedTempDatePrePanel: moment(this.obj.startDate)._d,
                        monthSelectedTempDateNextPanel: moment(this.obj.endDate)._d,
                        // 隐藏头部框
                        timePickHeaderStatus: false,
                        isDoublePanel: true,
                        isInChose: false,
                        // 选中的个数
                        selectedNumb: 2,
                        operatorStatus: 'twoButton'
                    });
                    break;  
                case 'datetimerange' :
                    this.options.format === 'YYYY-MM-DD' ? this.options.format = 'YYYY-MM-DD HH:mm:ss' : undefined;
                    this._setObj({
                        yearPrePanel:this.obj.startDate.getFullYear(),
                        monthPrePanel: this.obj.startDate.getMonth(),
                        dayPrePanel:this.obj.startDate.getDate(),
                        hourPrePanel:this.obj.startDate.getHours(),
                        minutePrePanel:this.obj.startDate.getMinutes(),
                        secondPrePanel:this.obj.startDate.getSeconds(),
                        yearNextPanel:this.obj.endDate.getFullYear(),
                        monthNextPanel: this.obj.endDate.getMonth(),
                        dayNextPanel:this.obj.endDate.getDate(),
                        hourNextPanel:this.obj.endDate.getHours(),
                        minuteNextPanel:this.obj.endDate.getMinutes(),
                        secondNextPanel:this.obj.endDate.getSeconds(),

                        selectedDatePrePanel: moment(this.obj.startDate)._d,
                        selectedDateNextPanel: moment(this.obj.endDate)._d,
                        yearSelectedTempDatePrePanel: moment(this.obj.startDate)._d,
                        yearSelectedTempDateNextPanel: moment(this.obj.endDate)._d,
                        monthSelectedTempDatePrePanel: moment(this.obj.startDate)._d,
                        monthSelectedTempDateNextPanel: moment(this.obj.endDate)._d,
                        timePickHeaderStatus: true,
                        isDoublePanel: true,
                        isInChose: false,
                        // 选中的个数
                        selectedNumb: 0,
                        operatorStatus: 'twoButton'
                    });
                    break;  
            }
        },
        _getArray:function(num){
            var array = [];
            for(var i = 0; i < num; i++){
                array.push(i);
            }
            return array;
        },
        _createDefaultObj: function(){
            this.obj = {
                date: new Date(),
                isStatic: true,
                calendarUUID: '',
                year: 1990,
                month: 0,
                day: 1,
                hour: 0,
                minute: 0,
                second: 0,
                week: 1,
                // 选中的开始日期，结束日期（用于组合的情况）
                startDate: new Date(),
                endDate: new Date(),
                // 可以选择的最大最小日期
                minDate: new Date(),
                maxDate: new Date(),
                isStatic: this.options.isStatic,
                type: this.options.type,
                // 是否双面板
                isDoublePanel: false,
                container:$('body'),
                // 时间选择头部是否展示 false/true 隐藏/显示
                timePickHeaderStatus: false ,
                // 操作模块显示隐藏  oneButton twoButton
                operatorStatus: 'oneButton' ,
                // 是否启用扩展面板
                extendStatus: (this.options.shortcuts.length === 0 ? false : true),
                // 扩展面板对象数组
                shortcutsArr: this._getShortcutsArr(),
                // 此时选中时间，尚未确定
                selectedDate: new Date(),
                //  月模式下选中的时间
                monthSelectedTempDate: new Date(),
                yearSelectedTempDate: new Date()
            }
        },
        // 初始化options(目的在于兼容以前)
        _initOptions: function(){
            // 将原版本supportInput 转成readonly
            this.options.readonly = !this.options.hasOwnProperty('supportInput')&&this.options.supportInput; 
            // 展示类型兼容以前
            if(this.options.type === 'single' && !!this.options.isShowTime === false){
                this.options.type = 'date';
            }
            if(this.options.type === 'single' && !!this.options.isShowTime === true){
                this.options.type = 'datatime';
            }
            if(this.options.type === 'range' && !!this.options.isShowTime === false){
                this.options.type = 'oldrange';
            }
            if(this.options.type === 'range' && !!this.options.isShowTime === true){
                this.options.type = 'oldtimerange';
            }
        },
        // 时间模式
        _createTimeMainBody: function(){
            var $el = this.$el,
                dom = calendarTimeModelPanelTpl(this.obj),
                that = this;
            this.$calendar = $(dom);
            this.obj.container.append(this.$calendar);
            this.$calendar.addClass('dynamic'); 
            oasisl.use(["swiper"],function(){ 
                that._initTimePicker(); 
                // 此时原input即为time-input
                $el.addClass('oas-time-show-input');
                that._setTimeShowInputWidth();
                that._adjustInput();
                $el.on('click.oasCalendar',function() {
                    that._closeOthers();
                    that._timePanelOpen();
                    that._adjustInput();
                });
                $(document).on('mousedown.oasCalendar',function(e) {
                    var $target = $(e.target);
                    // input框 或者 主面板或子元素
                    if( $target.parents('.oas-calendar-timePickerModel').length === 0 && !$target.hasClass('oas-time-show-input')) {
                        // 隐藏面板
                        that.$calendar.find('.oas-time-panel').css('visibility','hidden');
                        that.$calendar.find('.swiper-slide').css('visibility','hidden');;
                    }
                })
            });
        },
        // 年模式
        _createYearMainBody:function(){
            var $el = this.$el,
                that = this;
                var dom = '<div class="oas-calendar  noShow oas-calendar-yearPickerModel">'+
	                        '<div class="oas-calendar-wrapper">'+
                                '<div class="oas-calendar-year-panel">'+
				                '</div>'+
				            '</div>'+
                        '</div>';
            if(this.obj.isStatic){
                // 静态
                $el.append(dom);
                this.$calendar = $el;
                $el.addClass('oas-calendar').addClass(this.obj.calendarUUID);
                this.$calendar.addClass('oas-calendar-static');
                this._createYears(this.obj.date.getFullYear());
            }else{        
                this.$calendar = $(dom);
                this.obj.container.append(this.$calendar);
                this.$calendar.addClass(this.calendarUUID).css('display','none');
                this.$calendar.addClass('dynamic');
                this._createYears(this.obj.date.getFullYear());
                 // 此时原input即为time-input
                $el.addClass('oas-time-show-input');
                this._adjustInput();
                $el.on('click.oasCalendar',function() {
                    that._closeOthers();
                    that._openYearModel();
                    that._adjustInput();
                });
            }
            this._bindClose();
        },
        //月模式 
        _createMonthMainBody:function(){
            var $el = this.$el,
                that = this;
                var dom = '<div class="oas-calendar  noShow oas-calendar-monthPickerModel">'+
	                        '<div class="oas-calendar-wrapper">'+
                                '<div class="oas-calendar-month-panel">'+
                                '</div>'+
                                '<div class="oas-calendar-year-panel">'+
				                '</div>'+
				            '</div>'+
                        '</div>';
            if(this.obj.isStatic){
                // 静态
                $el.append(dom);
                this.$calendar = $el;
                $el.addClass('oas-calendar').addClass(this.obj.calendarUUID);
                this.$calendar.addClass('oas-calendar-static');
                this._createMonths(this.obj.date.getMonth());
            }else{   
                this.$calendar = $(dom);
                this.obj.container.append(this.$calendar);
                this.$calendar.addClass(this.calendarUUID).css('display','none');
                this.$calendar.addClass('dynamic');
                this._createMonths(this.obj.date.getMonth());
                 // 此时原input即为time-input
                $el.addClass('oas-time-show-input');
                this._adjustInput();
                $el.on('click.oasCalendar',function() {
                    that._closeOthers();
                    that._openMonthModel();
                    that._adjustInput();
                });
            }
            this._bindClose();
        },
        // 创建主体body
        _createMainBody: function(){
            var $el = this.$el,
                dom = calendarMainTpl(this._obj2tplobj(this.obj)),
                that = this;
            if(this.obj.isStatic){
                // 静态
                $el.append(dom);
                $el.addClass('oas-calendar').addClass(this.obj.calendarUUID);
                this.$calendar = $el;
                this.$calendar.addClass('oas-calendar-static');
            }else{
                this.$calendar = $(dom);
                this.obj.container.append(this.$calendar);
                this.$calendar.addClass('dynamic');
                // 此时原input即为time-input
                $el.addClass('oas-time-show-input');
                // 创建后绑定事件
                $el.on('click.oasCalendar',function(self) {
                    if(that.$calendar.css('display') === 'none'){
                        // 关闭其他
                        that._closeOthers();
                        that._openDatePanel();
                        that._adjustInput();
                    }
                });
                this._bindClose();
            }
        },
        _createWeekMainBody: function(){
            var $el = this.$el,
                dom = calendarMainTpl(this._obj2tplobj(this.obj)),
                that = this;
            if(this.obj.isStatic){
                // 静态
                $el.append(dom);
                $el.addClass('oas-calendar').addClass(this.obj.calendarUUID);
                this.$calendar = $el;
                this.$calendar.addClass('oas-calendar-static');
            }else{
                this.$calendar = $(dom);
                this.obj.container.append(this.$calendar);
                this.$calendar.addClass('dynamic');
                // 此时原input即为time-input
                $el.addClass('oas-time-show-input');
                // 创建后绑定事件
                $el.on('click.oasCalendar',function(self) {
                    if(that.$calendar.css('display') === 'none'){
                        // 关闭其他
                        that._closeOthers();
                        that._openDatePanel();
                        that._adjustInput();
                        // 选中日期的dom
                        var $dom = that.$calendar.find('[data-dateformat='+ moment(that.obj.date).format(that.options.format) +']');
                        $dom.parents('tr').addClass('weekInchose');
                    }
                });
                this._bindClose();
            }
        },
        _createDateTimeRangeMainBody: function(){
            var $el = this.$el,
                dom = doubleMonthTpl(this._obj2tplDoublePanel(this.obj)),
                that = this;
            if(this.obj.isStatic){
                // 静态
                $el.append(dom);
                $el.addClass('oas-calendar').addClass(this.obj.calendarUUID);
                this.$calendar = $el;
                this.$calendar.css('width','488px');
                this.$calendar.addClass('oas-calendar-static');
                this._rendarHeaderInputDoublePanel();
                this._renderYearMonthHdDoublePanel();
                this._createTimeRangeDays(this.obj.startDate,this.obj.endDate);
            }else{
                this.$calendar = $(dom);
                this.obj.container.append(this.$calendar);
                this.$calendar.addClass('dynamic');
                var dom = '<div class="oas-calendar-double-panel-input-wrapper ">'+
                    '<input readonly placeholder="开始时间" name="oas-calendar-startTime" class=" oas-calendar-startTime">'+
                    '<span class="oas-calendar-range-separator">~</span>'+
                    '<input readonly placeholder="结束时间" name="oas-calendar-endTime" class=" oas-calendar-endTime">'+
                '</div>';
                this.$el.html(dom);
                if(this.options.size === 'large'){
                    this.$el.parents('.oas-input-wrapper').addClass('large');
                }else if(this.options.size === 'small'){
                    this.$el.parents('.oas-input-wrapper').addClass('small');
                }


                // 创建后绑定事件
                $el.on('click.oasCalendar',function(self) {
                    if(that.$calendar.css('display') === 'none'){
                        // 关闭其他
                        that._closeOthers();
                        that._openTimeRangePanel();
                        that._isHiddenButton();
                        that._adjustInput();
                    }
                });
                this._bindClose();
            }
        },
        _createMainBodyOldRange: function(){
            var type,
                that = this;
            this.$el.addClass('oas-calender-range');
            this.$calA = $calA = this.$el.find("input").eq(0);
            this.$calB = $calB = this.$el.find("input").eq(1);
            this.events = {};
            this.options.type === 'oldrange' ? type = 'date' : type = 'datetime';
            $calA.oasCalendar({
                startFrom : 0,
                type : type,
                isStatic : false,
                container : $(this.options.container)
            }).on('select.oasCalendar',function(ev,$el,date) {
                $calB.oasCalendar('setMindate',date);
                return false;
            }).on('afterClear.oasCalendar',function(ev,$el,date) {
                $calB.oasCalendar('setMindate',that.options.range[0]);
                return false;
            });
            $calB.oasCalendar({
                startFrom : 0,
                type : type,
                isStatic : false,
                container : $(this.options.container)
            }).on('select.oasCalendar',function(ev,$el,date) {
                $calA.oasCalendar('setMaxdate',date);
                return false;
            }).on('afterClear.oasCalendar',function(ev,$el,date) {
                $calA.oasCalendar('setMaxdate',that.options.range[1]);
                return false;
            });  
            // this.rangeObj = [$calA,$calB];
            // 覆盖对外方法getSelectDate
            // this.invoke.getSelectDate = function() {
            //     return [$calA.oasCalendar('getSelectDate'),$calB.oasCalendar('getSelectDate')];
            // }  
        },
        _initInput: function(){
            var that = this;
            // 为了兼容以前oldrange oldtimerange 以前的时间范围容器不要渲染加图标
            if(this.options.type === 'oldrange' || this.options.type === 'oldtimerange'){
                return false;
            }
            this.$el.wrap('<div class="oas-input-wrapper"></div>');
            if(this.options.type !== 'daterange' && this.options.type !== 'datetimerange'){
                this.$el.parents('.oas-input-wrapper').addClass('no-clear form-clear');
                this.$el.addClass('form-control');
                if(this.options.size === 'large'){
                    this.$el.addClass('input-lg');
                }else if(this.options.size === 'small'){
                    this.$el.addClass('input-sm');
                }
            }

            this.$el.parents('.oas-input-wrapper').append('<i class="oas-calendar-icon oas-calendar-logo oasicon oasicon-calendarNew"></i><i class="oas-calendar-icon oas-calendar-clear oasicon oasicon oasicon-fail"></i>');

            if(this.options.readyOnly === true){
                this.$el.attr('readonly',true);
            }
            if(this.options.disabled === true){
                this.$el.attr('disabled',true);
                this.$el.addClass('oas-calendar-disabled');
            }
            this.$el.parents('.oas-input-wrapper').on('click','.oas-calendar-clear',function() {
                if(that.obj.isDoublePanel === false){
                    // 清空input,修改图标状态
                    that.$el.val('');
                    that._toggleIcon();

                    if(that.options.type === 'time'){
                        // 关闭时间选择面板
                        that._timePanelClose();
                    }else{
                        // 关闭日期选择面板
                        that._close();
                    }
                    // 设置时间为当前时间
                    that._updateObjByDate(new Date());
                }else{
                    that.$el.find('input').val('');
                    that._toggleIcon();
                    // 关闭时间选择面板
                    that._timePanelClose();
                    // 关闭日期选择面板
                    that._close();
                    that._updateObjByDateDoublePanel(new Date(),moment(new Date()).add(1,'months')._d);
                }
                that._emit('afterClear',[this.$el]);
            });
            this.$el.parents('.oas-input-wrapper').on('click','.oas-calendar-logo',function() {
                that.$el.trigger('click');
            });
        },
        _setObj: function(object){
            for(var a in object){
                this.obj[a] = object[a] ;
            }
        },
        _yearCreate:function(){
            this._createYearMainBody(); 
        },
        _monthCreate:function(){
            this._createMonthMainBody();
        },
        _dateCreate:function(){
            this._createMainBody(); 
            this._createDays(this.obj.date);
        },
        // 单时间模式
        _timeCreate:function(){
            this._createTimeMainBody();
        },
        _weekCreate:function(){
            this._createWeekMainBody();
        },
        _dateTimeCreate:function(){
            this._createMainBody();
            this._createDays(this.obj.date);
        },
        _daterangeCreate:function(){
            this._createDateTimeRangeMainBody();
        },
        _datetimerangeCreate:function(){
            this._createDateTimeRangeMainBody();
        },
        _oldrangeCreate: function(){
            this._createMainBodyOldRange();
        },
        _oldtimerangeCreate: function(){
            this._createMainBodyOldRange();
        },
        _createDays: function(date) {
            //创建日期选择部分
            var daysInfoInMonth = this._getDaysInfoInMonth(date);
            this.$calendar.find('.oas-calendar-bd').html(calendarDaysTpl(daysInfoInMonth));
        },
        _createDaysDoublePanel: function($self,datePrePanel,dateNextPanel) {
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                // 前一个面板
                var daysInfoInMonth = this._getDaysInfoInMonthDoublePanel(datePrePanel);
                $self.parents('.oas-doubleMonthCalendar-pre').find('.oas-calendar-bd').html(calendarDaysTpl(daysInfoInMonth));
            }else{
                // 后一个面板
                var daysInfoInMonth = this._getDaysInfoInMonthDoublePanel(dateNextPanel);
                $self.parents('.oas-doubleMonthCalendar-next').find('.oas-calendar-bd').html(calendarDaysTpl(daysInfoInMonth));
            }
        },
        _createTimeRangeDays: function(startDate,endDate){
            var startDay = moment(startDate)._d,
                endDay = moment(endDate)._d;
            if(moment(startDate).isSame(endDate,'month')){
                endDay = moment(startDay).add(1,'months')._d;
            }
            var startDaysInfoInMonth = this._getDaysInfoInMonthDoublePanel(startDay);
            var endDaysInfoInMonth = this._getDaysInfoInMonthDoublePanel(endDay);
            this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-calendar-bd').html(calendarDaysTpl(startDaysInfoInMonth));
            this.$calendar.find('.oas-doubleMonthCalendar-next .oas-calendar-bd').html(calendarDaysTpl(endDaysInfoInMonth));
        },
        _createMonths: function(){
            var i = 0,
                newDate,
                monthArr = [],
                disableState = false,
                dateRangeMin = new Date(this.obj.minDate.getFullYear(),this.obj.minDate.getMonth(),1),
                dateRangeMax = new Date(this.obj.maxDate.getFullYear(),this.obj.maxDate.getMonth(),1),
                selectedYear = this.obj.monthSelectedTempDate.getFullYear(); 
            for(;i<12;i++) {
                var selectedMonth = false;
                newDate = new Date(selectedYear,i,1);
                if(newDate>=dateRangeMin) {
                    disableState = true;
                }
                if(newDate>dateRangeMax) {
                    disableState = false;
                }
                if(moment(newDate).isSame(this.obj.monthSelectedTempDate,'month') && moment(newDate).isSame(this.obj.monthSelectedTempDate,'year') ){
                    selectedMonth = true;
                }
                monthArr.push({
                    name : this._numberToChinese[i]+'月',
                    month : i,
                    year : selectedYear,
                    disableState : disableState,
                    selectedMonth: selectedMonth
                })
            }
            this.$calendar.find('.oas-calendar-month-panel').html(calendarMonthsTpl({
                selectedYear: selectedYear + '年',
                arr : monthArr
            }));
            this.$calendar.find('.oas-calendar-month-panel').css('display','block');

        },
        _createMonthsDoublePanel: function(date){
            var i = 0,
                newDate,
                monthArr = [],
                disableState = false,
                dateRangeMin = new Date(this.obj.minDate.getFullYear(),this.obj.minDate.getMonth(),1),
                dateRangeMax = new Date(this.obj.maxDate.getFullYear(),this.obj.maxDate.getMonth(),1),
                selectedYear = date.getFullYear(); 
            for(;i<12;i++) {
                var selectedMonth = false;
                newDate = new Date(selectedYear,i,1);
                if(newDate>=dateRangeMin) {
                    disableState = true;
                }
                if(newDate>dateRangeMax) {
                    disableState = false;
                }
                if(moment(newDate).isSame(date,'month') && moment(newDate).isSame(date,'year') ){
                    selectedMonth = true;
                }
                monthArr.push({
                    name : this._numberToChinese[i]+'月',
                    month : i,
                    year : selectedYear,
                    disableState : disableState,
                    selectedMonth: selectedMonth
                })
            }
            return {
                    selectedYear: selectedYear + '年',
                    arr : monthArr
            }
        },
        _createYears: function(year){
            //创建年份选择部分
            var i=0,
                yearArr=[],
                yearStart = Math.floor(year/10)*10-1,
                disableState = false,
                yearMin = this.obj.minDate.getFullYear(),
                yearMax = this.obj.maxDate.getFullYear(),
                yearNow = 0;
            for(;i<12;i++) {
                var type = 'current',
                    selectedYear = false;
                yearNow = yearStart+i;
                if(yearMin<=yearNow) {
                    disableState = true;
                }
                if(yearMax<yearNow) {
                    disableState = false;
                }
                if(yearNow === this.obj.yearSelectedTempDate.getFullYear()){
                    selectedYear = true;
                }
                i === 0 ? (type = 'pre') : undefined ;
                i === 11 ? (type = 'next') : undefined ;
                yearArr.push({
                    year : yearNow,
                    type:  type,
                    disableState : disableState,
                    selectedYear: selectedYear
                })
            }
            this.$calendar.find('.oas-calendar-year-panel').html(calendarYearsTpl({
                arr : yearArr,
                startYear : yearStart+1,
                endYear : yearStart+10
            }))
            this.$calendar.find('.oas-calendar-year-panel').css('display','block');
        },
        _createYearsDoublePanel: function(year){
            //创建年份选择部分
            var i=0,
                yearArr=[],
                yearStart = Math.floor(year.getFullYear()/10)*10-1,
                disableState = false,
                yearMin = this.obj.minDate.getFullYear(),
                yearMax = this.obj.maxDate.getFullYear(),
                yearNow = 0;
            for(;i<12;i++) {
                var type = 'current',
                    selectedYear = false;
                yearNow = yearStart+i;
                if(yearMin<=yearNow) {
                    disableState = true;
                }
                if(yearMax<yearNow) {
                    disableState = false;
                }
                if(yearNow === year.getFullYear()){
                    selectedYear = true;
                }
                i === 0 ? (type = 'pre') : undefined ;
                i === 11 ? (type = 'next') : undefined ;
                yearArr.push({
                    year : yearNow,
                    type:  type,
                    disableState : disableState,
                    selectedYear: selectedYear
                })
            }
             return {
                arr : yearArr,
                startYear : yearStart+1,
                endYear : yearStart+10
            };
        },
        // 获取一个月份中所有日期的信息
        _getDaysInfoInMonth: function(date){
            var options = this.options,
            bgYear = date.getFullYear(),
            bgMonth = date.getMonth(),
            // 该月第一天日期
            firstDay = new Date(bgYear,bgMonth,1,0,0,0),
            // 该月第一天周几
            bgDay = firstDay.getDay(),
            // 该月中第几天
            bgDate = firstDay.getDate(),
            // 该月有多少天
            bgDayInMonth = moment(date).daysInMonth(),

            opStartFrom = options.startFrom,
            // 第一天前面有几天
            prevDays = opStartFrom < bgDay ? bgDay - opStartFrom : 7-(opStartFrom - bgDay),
            // 
            // prevDay = 1 - prevDays,
            iterator = 1 - prevDays,
            nextDay = bgDayInMonth+1,
            daysArr = [],
            nowDay,
            nowDay2,
            dayObj,
            weeks = this._getWeekArr(),
            minDate = this.obj.minDate,
            maxDate = this.obj.maxDate,
            disableState = false,
            i = 0;
            for(;i<42;i++) {
                var selectedDay = false;
                nowDay = new Date(bgYear,bgMonth,iterator,23,59,59);
                nowDay2 = new Date(bgYear,bgMonth,iterator,0,0,0);
                if(nowDay >= minDate) {
                    disableState = true;
                }
                if(nowDay2 > maxDate) {
                    disableState = false;
                }
                if(moment(nowDay).isSame(this.obj.selectedDate,'day')){
                    selectedDay = true;
                }

                dayObj = {
                    dateObj : nowDay,
                    dateFormat : moment(nowDay).format(this.options.format),
                    day : nowDay.getDate(),
                    year : nowDay.getFullYear(),
                    month : nowDay.getMonth(),
                    disableState : disableState,
                    selectedDay: selectedDay,
                    isToday: false
                };
                if(moment(nowDay).isSame(new Date(),'day')){
                    dayObj.isToday = true;
                }
                if(iterator<1) {
                    //上一个月的
                    dayObj.type = 'pre';
                }
                if(iterator>=1&&iterator<=bgDayInMonth) {
                    //当前月
                    dayObj.type = 'current';
                }
                if(iterator>bgDayInMonth) {
                    //下个月
                    dayObj.type = 'next';
                }
                iterator++;
                daysArr.push(dayObj);
            }
            return {
                daysArr: daysArr,
                week : weeks,
                year : bgYear,
                month : bgMonth
            };
        },
        _getDaysInfoInMonthDoublePanel: function(date){
            var options = this.options,
            bgYear = date.getFullYear(),
            bgMonth = date.getMonth(),
            // 该月第一天日期
            firstDay = new Date(bgYear,bgMonth,1,0,0,0),
            // 该月第一天周几
            bgDay = firstDay.getDay(),
            // 该月中第几天
            bgDate = firstDay.getDate(),
            // 该月有多少天
            bgDayInMonth = moment(date).daysInMonth(),

            opStartFrom = options.startFrom,
            // 第一天前面有几天
            prevDays = opStartFrom < bgDay ? bgDay - opStartFrom : 7-(opStartFrom - bgDay),
            // 
            // prevDay = 1 - prevDays,
            iterator = 1 - prevDays,
            nextDay = bgDayInMonth+1,
            daysArr = [],
            nowDay,
            nowDay2,
            dayObj,
            weeks = this._getWeekArr(),
            minDate = this.obj.minDate,
            maxDate = this.obj.maxDate,
            disableState = false,
            i = 0;
            for(;i<42;i++) {
                var selectedDay = false;
                var maySelected = false;
                nowDay = new Date(bgYear,bgMonth,iterator,23,59,59);
                nowDay2 = new Date(bgYear,bgMonth,iterator,0,0,0);
                if(nowDay >= minDate) {
                    disableState = true;
                }
                if(nowDay2 > maxDate) {
                    disableState = false;
                }
                if((moment(nowDay).isSame(this.obj.selectedDatePrePanel,'day')&&moment(nowDay).isSame(this.obj.selectedDatePrePanel,'month')&&moment(nowDay).isSame(this.obj.selectedDatePrePanel,'year'))
                    ||(moment(nowDay).isSame(this.obj.selectedDateNextPanel,'day') && moment(nowDay).isSame(this.obj.selectedDateNextPanel,'month') && moment(nowDay).isSame(this.obj.selectedDateNextPanel,'year'))){
                    selectedDay = true;
                }

                if(moment(nowDay).isAfter(this.obj.selectedDatePrePanel) && moment(nowDay).isBefore(this.obj.selectedDateNextPanel)){
                    maySelected = true;
                }
                dayObj = {
                    dateObj : nowDay,
                    dateFormat : moment(nowDay).format(this.options.format),
                    day : nowDay.getDate(),
                    year : nowDay.getFullYear(),
                    month : nowDay.getMonth(),
                    disableState : disableState,
                    selectedDay: selectedDay,
                    maySelected: maySelected,
                    isToday: false
                };
                if(moment(nowDay).isSame(new Date(),'day')){
                    dayObj.isToday = true;
                }
                if(iterator<1) {
                    //上一个月的
                    dayObj.type = 'pre';
                }
                if(iterator>=1&&iterator<=bgDayInMonth) {
                    //当前月
                    dayObj.type = 'current';
                }
                if(iterator>bgDayInMonth) {
                    //下个月
                    dayObj.type = 'next';
                }
                iterator++;
                daysArr.push(dayObj);
            }
            return {
                daysArr: daysArr,
                week : weeks,
                year : bgYear,
                month : bgMonth
            };
        },
        // 初始化时分秒选择
        _initTimePicker: function(){
            var hour = this.obj.hour;
            var minute = this.obj.minute;
            var second = this.obj.second;
            var that = this;
            this.hourSwiper = new Swiper('.'+this.calendarUUID+' .oas-time-hour-spinner-wrap',this._getSwiperConfig(hour,this));
            this.minuteSwiper = new Swiper('.'+this.calendarUUID+' .oas-time-minute-spinner-wrap',this._getSwiperConfig(minute,this));
            this.secondSwiper = new Swiper('.'+this.calendarUUID+' .oas-time-second-spinner-wrap',this._getSwiperConfig(second,this));
            // swiper占时无滚动后的对外方法，该方法用于解决滚动后样式改变
            this._dealProgress(this.hourSwiper);
            this._dealProgress(this.minuteSwiper);
            this._dealProgress(this.secondSwiper);
        },
        _dealProgress: function(swiper){
            var that = this;
            if(oasisl.type.isArray(swiper)){
                for(var i = 0; i < swiper.length; i++){
                    swiper[i].on('progress',function(){
                        that.$calendar.find('.swiper-slide').removeClass('show-chose');
                        that.$calendar.find('.swiper-slide-active').addClass('show-chose');
                    })
                }
            }else{
                swiper.on('progress',function(){
                    that.$calendar.find('.swiper-slide').removeClass('show-chose');
                    that.$calendar.find('.swiper-slide-active').addClass('show-chose');
                })
            }
        },
        _getSwiperConfig: function(init,that){
            var swiperConfig = {
			    // 初始化时第四个为默认值
			    initialSlide: init,
			    // 方向
			    direction: 'vertical',
			    // 每行能够出现的个数
			    slidesPerView: 5,
			    // 设置第一个滑块的位置，默认false 居左，true居中（竖直方向类似）
			    centeredSlides: true,
			    // 鼠标移上去手的形状
			    grabCursor: true,
			    watchSlidesProgress: true,
			    watchSlidesVisibility: true,
			    // 滚轮事件开启
			    mousewheelControl: true,
			    mousewheelSensitivity: 1,
			    freeMode: true,
			    // 设置移动惯性
                freeModeMomentumRatio: 1,
                // 惯性模式下实现贴合
                freeModeSticky: true,
                // 是否点击居中
                slideToClickedSlide:true,
                onTransitionEnd: function(swiper){
                    that.$calendar.find('.swiper-slide').removeClass('show-chose');
                    that.$calendar.find('.swiper-slide-active').addClass('show-chose');
                }
            };
            return swiperConfig;
        },
        // 设置时间选择和对应的input宽度相等
        _setTimeShowInputWidth: function(){
            var inputWidth = this.$el.outerWidth();
            this.$calendar.find('.oas-time-panel').css('width',inputWidth);
        },
        // 设置日历面板位置
        _adjustInput: function(){
            var $el = this.$el,
                $calendar = this.$calendar,
                left = $el.offset().left,
                top = $el.offset().top,
                height = $el.outerHeight(),
                isStatic = this.options.isStatic,
                location,
                topVal,
                leftVal;

            if(isStatic)
                return;
            topVal  = top+height+5;
            leftVal = left;
            location = Position.location($el, 'fixed');
            if(location.bottom < $calendar.outerHeight() + 5){
                topVal = top-$calendar.outerHeight()-5;
            }
            $calendar.offset({
                top:topVal,
                left:leftVal
            });
        },
        _setTimePanel: function(){
            var obj = this.obj;
            this.hourSwiper.slideTo(this.obj.hour,10,true);
            this.minuteSwiper.slideTo(this.obj.minute,10,true);
            this.secondSwiper.slideTo(this.obj.second,10,true);
        },
        // 打开面板以及重绘
        _openDatePanel: function(){
            var $calendar = this.$calendar;
            this._rendarHeaderInput();
            this._renderYearMonthHd();
            this._createDays(this.obj.date);
            this._emit('openPanel',[this.$el,this.obj.selectedDate]);
            $calendar.css('display','block');
        },
        // 打开面板以及重绘
        _openTimeRangePanel: function(){
            var $calendar = this.$calendar;
            this._rendarHeaderInputDoublePanel();
            this._renderYearMonthHdDoublePanel();
            this._createTimeRangeDays(this.obj.startDate,this.obj.endDate);
            this._emit('openPanel',[this.$el,[this.obj.startDate,this.obj.endDate]]);
            $calendar.css('display','block');
        },
        _openYearModel: function(){
            this._createYears(this.obj.date.getFullYear());
            this.$calendar.css('display','block');
        },
        _openMonthModel: function(){
            this._createMonths(this.obj.date.getMonth());
            this.$calendar.css('display','block');
        },
        _timePanelOpen: function(){
            var $calendar = this.$calendar,
                that = this;
            this._setTimePanel();
            $calendar.find('.oas-time-panel').css('visibility','visible');
            $calendar.find('.swiper-slide').css('visibility','visible');
            
            that.$calendar.find('.swiper-slide').removeClass('show-chose');
            that.$calendar.find('.swiper-slide-active').addClass('show-chose');
        },
        _timePanelClose : function() {
            var $calendar = this.$calendar;
            $calendar.find('.oas-time-panel').css('visibility','hidden');
            $calendar.find('.swiper-slide').css('visibility','hidden');

        },
        _toggleIcon: function(){
            var $iconLogo = this.$el.parents('.oas-input-wrapper').find('.oas-calendar-logo');
            var $iconClear = this.$el.parents('.oas-input-wrapper').find('.oas-calendar-clear');
            // 如果不可清除
            if( this.options.clearable === false){
                return;
            }
            if( this.obj.isDoublePanel === false ){
                if( this.$el.val()===''){
                    $iconLogo.css('display','block');
                    $iconClear.css('display','none');
                }else{
                    $iconLogo.css('display','none');
                    $iconClear.css('display','block');
                }
            }else{
                if( this.$el.find('.oas-calendar-startTime').val()==='' && this.$el.find('.oas-calendar-endTime').val()===''){
                    $iconLogo.css('display','block');
                    $iconClear.css('display','none');
                }else{
                    $iconLogo.css('display','none');
                    $iconClear.css('display','block');
                }
            }
        },
        _toggleCalendar: function(){
            this.$calendar.css('display') === 'none' ? this.$calendar.css('display','block') : this.$calendar.css('display','none');
        },
        _toggleTimePanel: function(){
            var $timePanel = this.$calendar.find('.oas-time-panel');
            // 解决动画结束 swiper不消失
            var $timePanelSwiper = this.$calendar.find('.swiper-slide');
            $timePanel.css('visibility') === 'hidden' ? $timePanel.css('visibility','visible') : $timePanel.css('visibility','hidden');
            $timePanelSwiper.css('visibility') === 'hidden' ? $timePanelSwiper.css('visibility','visible') : $timePanelSwiper.css('visibility','hidden');
        },
        _checkInputValue:function(){
            var that = this;
            this.$el.parents('.oas-input-wrapper').on('blur','.oas-time-show-input',function(e){
                var $target = $(e.target),
                    value = $target.val(),
                    newDate = moment(value,that.options.format)._d;

                if(that.options.type === 'week'){
                    return false;
                }
                // 严格模式下是否符合格式，不可以则设为当前时间
                if(moment(value,that.options.format,true).isValid() && 
                    moment(newDate).isBefore(that.obj.maxDate) && 
                    moment(newDate).isAfter(that.obj.minDate) ){
                    that.obj.date = newDate;
                    that._updateObjByDate(newDate);
                    that._toggleIcon();
                    return;
                }else{
                    $target.val('');
                }
            });

            this.$el.parents('.oas-input-wrapper').on('keyup','.oas-time-show-input',function(e){
                var $target = $(e.target),
                    value = $target.val(),
                    newDate = moment(value,that.options.format)._d;
                if(moment(value,that.options.format,true).isValid() && 
                moment(newDate).isBefore(that.obj.maxDate) && 
                moment(newDate).isAfter(that.obj.minDate) ){
                    that.obj.date = newDate;
                    that._updateObjByDate(newDate);
                    if(that.options.type === 'year'){
                        that._openYearModel();
                    }else if(that.options.type === 'month'){
                        that._openMonthModel();
                    }else if(that.options.type === 'date' || that.options.type === 'datetime'){
                        that._openDatePanel();
                        that._timePanelClose();
                    }else if(that.options.type === 'time'){
                        that._timePanelOpen();
                    }
                    that.$el.attr('value',moment(newDate).format(that.options.format));
                    that._toggleIcon();
                }
            })
            if(this.$calendar !== undefined){
                // 小的年月日input框
                this.$calendar.find('.oas-day-input').on('keyup','.oas-input-inner',function(e){
                    var $target = $(e.target),
                        value = $target.val(),
                        newDate = moment(value,'YYYY-MM-DD')._d;
                        that._setDateSingle(that.obj.selectedDate,{year: newDate.getFullYear(),month: newDate.getMonth(),day: newDate.getDate()});
                    if(moment(value,'YYYY-MM-DD',true).isValid() && 
                    moment(that.obj.selectedDate).isBefore(that.obj.maxDate) && 
                    moment(that.obj.selectedDate).isAfter(that.obj.minDate) ){
                        that._updateObjByDate(that.obj.selectedDate);
                        that._openDatePanel();
                    }
                })

                // 小的时分秒input框
                this.$calendar.find('.oas-time-input').on('keyup','.oas-input-inner',function(e){
                    var $target = $(e.target),
                        value = $target.val(),
                        newDate = moment(value,'HH:mm:ss')._d;
                        that._setDateSingle(that.obj.selectedDate,{hour: newDate.getHours(),minute: newDate.getMinutes(),second: newDate.getSeconds()});
                        // newDate = (moment(newDate).hours(moment(that.obj.date).hours()).minutes(moment(that.obj.date).minutes()).seconds(moment(that.obj.date).seconds()))._d;
                    if(moment(value,'HH:mm:ss',true).isValid() && 
                    moment(that.obj.selectedDate).isBefore(that.obj.maxDate) && 
                    moment(that.obj.selectedDate).isAfter(that.obj.minDate) ){
                        that._updateObjByDate(that.obj.selectedDate);
                        that._timePanelOpen();
                    }
                })
                this.$calendar.on('focus','.oas-input-inner',function(e){
                    $(this).addClass('oas-calendar-focus');
                })
                this.$calendar.on('blur','.oas-input-inner',function(e){
                    $(this).removeClass('oas-calendar-focus');
                })
            }
        },
        // 把对象转换成模板渲染需要的数据
        _obj2tplobj:function(obj){
            var object = $.extend(true,{},obj)
            object.year =  object.year + '年';
            object.month =  this._numberToMonth[object.month];
            return object;
        },
        // 为obj添加元素供渲染模板使用
        _obj2tplDoublePanel: function(obj){
            var object = $.extend(true,{},obj)
            object.monthPrePanelNub =  object.monthPrePanel;
            object.monthNextPanelNub =  object.monthNextPanel;
            object.yearPrePanelNub = object.yearPrePanel;
            object.yearNextPanelNub = object.yearNextPanel;
            object.yearPrePanel =  object.yearPrePanel + '年';
            object.yearNextPanel =  object.yearNextPanel + '年';
            object.monthPrePanel =  this._numberToMonth[object.monthPrePanel];
            object.monthNextPanel =  this._numberToMonth[object.monthNextPanel];
            return object;
        },
        _getWeekArr : function() {
            var startFrom = this.options.startFrom,
                week = [],i=0;
            for(;i<7;i++) {
                if(startFrom===7) {
                    startFrom = 0;
                }
                week.push({
                    weekName : this._numberToWeek[startFrom]
                });
                startFrom++;
            }
            this.week = week;
            return week;
        },
        // 给定日期设置日期
        _updateObjByDate: function(date){
            this._setObj({
                date: moment(date)._d,
                year: moment(date).year(),
                month: moment(date).month(),
                week: moment(date).week(),
                day: moment(date).date(),
                hour: moment(date).hour(),
                minute: moment(date).minute(),
                second: moment(date).second(),
                selectedDate: moment(date)._d,
                monthSelectedTempDate: moment(date)._d,
                yearSelectedTempDate: moment(date)._d
            });
        },
        _updateObjByDateDoublePanel: function(datePre,dateNext){
            this._setObj({
                startDate: moment(datePre)._d,
                endDate: moment(dateNext)._d,
                yearPrePanel:datePre.getFullYear(),
                monthPrePanel: datePre.getMonth(),
                dayPrePanel:datePre.getDate(),
                hourPrePanel:datePre.getHours(),
                minutePrePanel:datePre.getMinutes(),
                secondPrePanel:datePre.getSeconds(),
                yearNextPanel:dateNext.getFullYear(),
                monthNextPanel: dateNext.getMonth(),
                dayNextPanel:dateNext.getDate(),
                hourNextPanel:dateNext.getHours(),
                minuteNextPanel:dateNext.getMinutes(),
                secondNextPanel:dateNext.getSeconds(),
                selectedDatePrePanel: moment(datePre)._d,
                selectedDateNextPanel: moment(dateNext)._d,
                yearSelectedTempDatePrePanel: moment(datePre)._d,
                yearSelectedTempDateNextPanel: moment(dateNext)._d,
                monthSelectedTempDatePrePanel: moment(datePre)._d,
                monthSelectedTempDateNextPanel: moment(dateNext)._d,
                isInChose: false,
                selectedNumb: 2
            });
        },
        _confirmDate: function(){
            var date = moment(this.obj.selectedDate)._d,
                isStatic = this.options.isStatic,
                dateString = moment(date).format(this.options.format),
                range = this.options.range,
                $el = this.$el;
            if(date<this.obj.minDate||date>this.obj.maxDate) {
                return;
            }
            this._updateObjByDate(this.obj.selectedDate);
            if(!isStatic) {
                $el.val(dateString);
                $el.attr('value',dateString);
                this._toggleIcon();
            }
            return dateString;    
        },
        // 创建时间面板
        _createTime: function($self){
            var $oasTimePanel;
            // 选择需要创建面板的父容器
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                $oasTimePanel =  $self.parents('.oas-doubleMonthCalendar-pre').find('.oas-time-panel');
                // 关闭另一个
                this.$calendar.find('.oas-doubleMonthCalendar-next .oas-time-panel').css('visibility','hidden');
                this.$calendar.find('.oas-doubleMonthCalendar-next .oas-time-panel .swiper-slide').css('visibility','hidden');
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                $oasTimePanel =  $self.parents('.oas-doubleMonthCalendar-next').find('.oas-time-panel');
                // 关闭另一个
                this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-time-panel').css('visibility','hidden');
                this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-time-panel .swiper-slide').css('visibility','hidden');
            }else{
                $oasTimePanel =  this.$calendar.find('.oas-time-panel');
            }
            $oasTimePanel.html(calendartimesTpl({hSwiper:this._getArray(24),mSwiper: this._getArray(60),sSwiper: this._getArray(60),}));
            this._initTimePicker();
            $oasTimePanel.css('visibility','visible');
            $oasTimePanel.find('.swiper-slide').css('visibility','visible');
        },
        _rendarHeaderInput: function(){
            if(this.$calendar.find('.oas-calendar-time-pick-header').length > 0 ){
                this.$calendar.find('.oas-day-input input').val(moment(this.obj.date).format('YYYY-MM-DD'));
                this.$calendar.find('.oas-time-input input').val(moment(this.obj.date).format('HH:mm:ss'));
            }
        },
        _rendarHeaderInputDoublePanel: function(){
            if(this.$calendar.find('.oas-calendar-time-pick-header').length > 0 ){
                this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-day-input input').val(moment(this.obj.startDate).format('YYYY-MM-DD'));
                this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-time-input input').val(moment(this.obj.startDate).format('HH:mm:ss'));
                this.$calendar.find('.oas-doubleMonthCalendar-next .oas-day-input input').val(moment(this.obj.endDate).format('YYYY-MM-DD'));
                this.$calendar.find('.oas-doubleMonthCalendar-next .oas-time-input input').val(moment(this.obj.endDate).format('HH:mm:ss'));
            }
        },
        _renderYearMonthHd: function(){
            var year = this.obj.yearSelectedTempDate.getFullYear() + '年';
            var month =  this._numberToMonth[this.obj.monthSelectedTempDate.getMonth()];
            this.$calendar.find('.oas-calendar-year').text(year);
            this.$calendar.find('.oas-calendar-month').text(month);
        },
        _renderYearMonthHdDoublePanel: function(){
            var yearPrePanelNub = this.obj.yearSelectedTempDatePrePanel.getFullYear(),
                monthPrePanelNub =  this.obj.monthSelectedTempDatePrePanel.getMonth(),
                yearNextPanelNub = this.obj.yearSelectedTempDateNextPanel.getFullYear(),
                monthNextPanelNub =  this.obj.monthSelectedTempDateNextPanel.getMonth(),
                yearPrePanel = yearPrePanelNub + '年',
                monthPrePanel =  this._numberToMonth[monthPrePanelNub],
                yearNextPanel = yearNextPanelNub + '年',
                monthNextPanel =  this._numberToMonth[monthNextPanelNub];
            // 处理处于同一个月的情况
            if(yearPrePanelNub === yearNextPanelNub && monthPrePanelNub === monthNextPanelNub){
                monthNextPanelNub = monthPrePanelNub + 1; 
                monthNextPanel = this._numberToMonth[monthNextPanelNub];
            }

            this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-calendar-year').text(yearPrePanel).attr('data-year',yearPrePanelNub);
            this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-calendar-month').text(monthPrePanel).attr('data-month',monthPrePanelNub);
            this.$calendar.find('.oas-doubleMonthCalendar-next .oas-calendar-year').text(yearNextPanel).attr('data-year',yearNextPanelNub);
            this.$calendar.find('.oas-doubleMonthCalendar-next .oas-calendar-month').text(monthNextPanel).attr('data-month',monthNextPanelNub);
        },
        _renderMonthPanelHd: function($self){
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                var year = this.obj.monthSelectedTempDatePrePanel.getFullYear() + '年';
                $self.parents('.oas-doubleMonthCalendar-pre').find('.oas-calendar-month-panel-year-select').text(year);
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                var year = this.obj.monthSelectedTempDateNextPanel.getFullYear() + '年';
                $self.parents('.oas-doubleMonthCalendar-next').find('.oas-calendar-month-panel-year-select').text(year);
            }else{
                var year = this.obj.monthSelectedTempDate.getFullYear() + '年';
                this.$calendar.find('.oas-calendar-month-panel-year-select').text(year);
            }
        },
        _renderYearPanelHd: function($self){
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                var year = this.obj.yearSelectedTempDatePrePanel.getFullYear(),
                yearStart = Math.floor(year/10)*10,
                yearEnd = Math.floor(year/10)*10;
                yearString = yearStart + '-' + yearEnd;
                this.$calendar.find('.oas-calendar-year-panel-year-select').text(yearString);
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                var year = this.obj.yearSelectedTempDateNextPanel.getFullYear(),
                yearStart = Math.floor(year/10)*10,
                yearEnd = Math.floor(year/10)*10;
                yearString = yearStart + '-' + yearEnd;
                this.$calendar.find('.oas-calendar-year-panel-year-select').text(yearString);
            }else{
                var year = this.obj.yearSelectedTempDate.getFullYear(),
                yearStart = Math.floor(year/10)*10,
                yearEnd = Math.floor(year/10)*10;
                yearString = yearStart + '-' + yearEnd;
                this.$calendar.find('.oas-calendar-year-panel-year-select').text(yearString);
            }
        },
        // 单独改变年月日 时分秒
        _setDateSingle:function(obj,date){
            date.hasOwnProperty('year') ? obj.setFullYear(date.year) : undefined;
            date.hasOwnProperty('month') ? obj.setMonth(date.month) : undefined;
            date.hasOwnProperty('day') ? obj.setDate(date.day) : undefined;
            date.hasOwnProperty('hour') ? obj.setHours(date.hour) : undefined;
            date.hasOwnProperty('minute') ? obj.setMinutes(date.minute) : undefined;
            date.hasOwnProperty('second') ? obj.setSeconds(date.second) : undefined;
            return obj;
        },
        _close : function() {
            var $calendar = this.$calendar;
            $calendar.css('display','none');
            this._emit('closePanel',[this.$el,this.obj.date]);
        },
        _open : function() {
            var $calendar = this.$calendar;
            $calendar.css('display','block');
        },
        // 关闭其他面板
        _closeOthers: function(){
            var that = this;
            $('.oas-calendar').each(function(index,element) {
                if($(element).is(that.$calendar) === false && $(element).parents('.oas-calendar').length === 0 ){
                    if($(element).hasClass('oas-calendar-static')){
                        $(element).css('display','block');
                    }else if($(element).hasClass('oas-calendar-timePickerModel')){
                        $(element).find('.oas-time-panel').css('visibility','hidden');
                        $(element).find('.swiper-slide').css('visibility','hidden');;
                    }else{
                        $(element).css('display','none')
                    }
                }
            }); 
        },
        _setPreMonth: function($self){
            // 获取上一个月的时间
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                this.obj.monthSelectedTempDatePrePanel = moment(this.obj.monthSelectedTempDatePrePanel).subtract(1,'months')._d;
                this.obj.yearSelectedTempDatePrePanel = moment(this.obj.yearSelectedTempDatePrePanel).subtract(1,'months')._d;
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                this.obj.monthSelectedTempDateNextPanel = moment(this.obj.monthSelectedTempDateNextPanel).subtract(1,'months')._d;
                this.obj.yearSelectedTempDateNextPanel = moment(this.obj.yearSelectedTempDateNextPanel).subtract(1,'months')._d;
            }else{
                this.obj.monthSelectedTempDate = moment(this.obj.monthSelectedTempDate).subtract(1,'months')._d;
                this.obj.yearSelectedTempDate = moment(this.obj.yearSelectedTempDate).subtract(1,'months')._d;
            }
        },
        _setNextMonth: function($self){
            // 获取下一个月的时间
            // 获取上一个月的时间
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                this.obj.monthSelectedTempDatePrePanel = moment(this.obj.monthSelectedTempDatePrePanel).add(1,'months')._d;
                this.obj.yearSelectedTempDatePrePanel = moment(this.obj.yearSelectedTempDatePrePanel).add(1,'months')._d;
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                this.obj.monthSelectedTempDateNextPanel = moment(this.obj.monthSelectedTempDateNextPanel).add(1,'months')._d;
                this.obj.yearSelectedTempDateNextPanel = moment(this.obj.yearSelectedTempDateNextPanel).add(1,'months')._d;
            }else{
                this.obj.monthSelectedTempDate = moment(this.obj.monthSelectedTempDate).add(1,'months')._d;
                this.obj.yearSelectedTempDate = moment(this.obj.yearSelectedTempDate).add(1,'months')._d;
            }
        },
        _setPreYear: function($self){
            // 获取上一年的时间
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                this.obj.monthSelectedTempDatePrePanel =  moment(this.obj.yearSelectedTempDatePrePanel).subtract(1,'years')._d;
                this.obj.yearSelectedTempDatePrePanel = moment(this.obj.yearSelectedTempDatePrePanel).subtract(1,'years')._d;
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                this.obj.monthSelectedTempDateNextPanel =  moment(this.obj.yearSelectedTempDateNextPanel).subtract(1,'years')._d;
                this.obj.yearSelectedTempDateNextPanel = moment(this.obj.yearSelectedTempDateNextPanel).subtract(1,'years')._d;
            }else{
                this.obj.monthSelectedTempDate = moment(this.obj.yearSelectedTempDate).subtract(1,'years')._d;
                this.obj.yearSelectedTempDate = moment(this.obj.yearSelectedTempDate).subtract(1,'years')._d;
            }
        },
        _setNextYear: function($self){
            // 获取下一年的时间
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                this.obj.monthSelectedTempDatePrePanel = moment(this.obj.yearSelectedTempDatePrePanel).add(1,'years')._d;
                this.obj.yearSelectedTempDatePrePanel = moment(this.obj.yearSelectedTempDatePrePanel).add(1,'years')._d;
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                this.obj.monthSelectedTempDateNextPanel = moment(this.obj.yearSelectedTempDateNextPanel).add(1,'years')._d; 
                this.obj.yearSelectedTempDateNextPanel = moment(this.obj.yearSelectedTempDateNextPanel).add(1,'years')._d;
            }else{
                this.obj.monthSelectedTempDate = moment(this.obj.yearSelectedTempDate).add(1,'years')._d;
                this.obj.yearSelectedTempDate = moment(this.obj.yearSelectedTempDate).add(1,'years')._d;
            }     
        },
        _setMonthModelPreYear: function($self){
            // 获取上一年的时间
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                this.obj.yearSelectedTempDatePrePanel = moment(this.obj.monthSelectedTempDatePrePanel).subtract(1,'years')._d; 
                this.obj.monthSelectedTempDatePrePanel = moment(this.obj.monthSelectedTempDatePrePanel).subtract(1,'years')._d;
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                this.obj.yearSelectedTempDateNextPanel =  moment(this.obj.monthSelectedTempDateNextPanel).subtract(1,'years')._d;
                this.obj.monthSelectedTempDateNextPanel = moment(this.obj.monthSelectedTempDateNextPanel).subtract(1,'years')._d;
            }else{
                this.obj.yearSelectedTempDate = moment(this.obj.monthSelectedTempDate).subtract(1,'years')._d; 
                this.obj.monthSelectedTempDate = moment(this.obj.monthSelectedTempDate).subtract(1,'years')._d;
            }
        },
        _setMonthModelNextYear: function($self){
            // 获取下一年的时间
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                this.obj.yearSelectedTempDatePrePanel = moment(this.obj.monthSelectedTempDatePrePanel).add(1,'years')._d; 
                this.obj.monthSelectedTempDatePrePanel = moment(this.obj.monthSelectedTempDatePrePanel).add(1,'years')._d;
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                this.obj.yearSelectedTempDateNextPanel = moment(this.obj.monthSelectedTempDateNextPanel).add(1,'years')._d; 
                this.obj.monthSelectedTempDateNextPanel = moment(this.obj.monthSelectedTempDateNextPanel).add(1,'years')._d;
            }else{
                this.obj.yearSelectedTempDate = moment(this.obj.monthSelectedTempDate).add(1,'years')._d; 
                this.obj.monthSelectedTempDate = moment(this.obj.monthSelectedTempDate).add(1,'years')._d;
            }
        },
        _setYearModelPreYear: function($self){
            // 获取上一年的时间
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                this.obj.yearSelectedTempDatePrePanel = moment(this.obj.yearSelectedTempDatePrePanel).subtract(10,'years')._d;
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                this.obj.yearSelectedTempDateNextPanel = moment(this.obj.yearSelectedTempDateNextPanel).subtract(10,'years')._d;
            }else{
                this.obj.yearSelectedTempDate = moment(this.obj.yearSelectedTempDate).subtract(10,'years')._d;
            }
        },
        _setYearModelNextYear: function($self){
            // 获取上一年的时间
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                this.obj.yearSelectedTempDatePrePanel = moment(this.obj.yearSelectedTempDatePrePanel).add(10,'years')._d;
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                this.obj.yearSelectedTempDateNextPanel = moment(this.obj.yearSelectedTempDateNextPanel).add(10,'years')._d;
            }else{
                this.obj.yearSelectedTempDate = moment(this.obj.yearSelectedTempDate).add(10,'years')._d;
            }
        },
        _bindClose: function(){
            var that = this;
            $(document).on('mousedown.oasCalendar',function(e) {
                var $target = $(e.target);
                if( !$target.is(that.$calendar) && !$target.is(that.$el) && $target.parents('.oas-input-wrapper').length===0 
                && $target.parents('.oas-calendar').length===0 && $target.parents('.oas-calendar-day-table').length===0
                && $target.parents('.oas-calendar-month-panel-wrapper').length===0 && $target.parents('.oas-time-panel-body').length===0 
                && $target.parents('.oas-calendar-year-panel-wrapper').length===0 ){
                    // 静态不收起
                    if(that.$calendar.hasClass('oas-calendar-static')){
                        return;
                    }
                    // 隐藏面板
                    that.$calendar.find('.oas-calendar-year-panel').css('display','none');
                    that.$calendar.find('.oas-calendar-month-panel').css('display','none');
                    that.$calendar.find('.oas-time-panel').css('visibility','hidden');
                    that.$calendar.find('.swiper-slide').css('visibility','hidden');;
                    that.$calendar.css('display','none');
                    // 当前日历清除操作
                    if(that.options.type === 'daterange' || that.options.type === 'datetimerange'){
                        that._updateObjByDateDoublePanel(that.obj.startDate,that.obj.endDate);
                    }else{
                        that._updateObjByDate(that.obj.date);
                    }
                    that._emit('closePanel',[that.$el,that.obj.date]);
                }
            })
        },
        _sortPreNextDate: function(){
            var isChange = false;
            if(moment(this.obj.selectedDateNextPanel).isBefore(this.obj.selectedDatePrePanel)){
                var temp =  moment(this.obj.selectedDatePrePanel)._d;
                this.obj.selectedDatePrePanel = moment(this.obj.selectedDateNextPanel)._d;
                this.obj.selectedDateNextPanel = temp;
                isChange = true;
            }
            return isChange;
        },
        // time是否在startTime和timeEnd之间
        _isBetween: function(time,startTime,endTime){
            return (moment(time).isAfter(startTime) && moment(time).isBefore(endTime) || moment(time).isAfter(endTime) && moment(time).isBefore(startTime)) 
        },
        // 增加选中个数 过2置0
        _addSelectedNub: function(){
            2 === this.obj.selectedNumb ? this.obj.selectedNumb = 1 : this.obj.selectedNumb++;
        },
        // 同步selectedDate到年/月模式的临时变量
        _updateSelectedDateDoublePanel: function(){
            this.obj.yearSelectedTempDatePrePanel = moment(this.obj.selectedDatePrePanel)._d;
            this.obj.yearSelectedTempDateNextPanel = moment(this.obj.selectedDateNextPanel)._d;
            this.obj.monthSelectedTempDatePrePanel = moment(this.obj.selectedDatePrePanel)._d;
            this.obj.monthSelectedTempDateNextPanel = moment(this.obj.selectedDateNextPanel)._d;
        },
        _addMaySelectedStyle: function(timeBegin,timeEnd){
            var that = this;
            this.$calendar.find('.current-month-day').each(function(){
                var time = $(this).data('dateformat');
                that._isBetween(time,timeBegin,timeEnd) ? $(this).addClass('maySelected') :  $(this).removeClass('maySelected');
            });
        },
        _renderMonthsDoublePanel: function($self){
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                var monthInfo = this._createMonthsDoublePanel(this.obj.monthSelectedTempDatePrePanel);
                $self.parents('.oas-doubleMonthCalendar-pre').find('.oas-calendar-month-panel').html(calendarMonthsTpl(monthInfo)).css('display','block');
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                var monthInfo = this._createMonthsDoublePanel(this.obj.monthSelectedTempDateNextPanel);
                $self.parents('.oas-doubleMonthCalendar-next').find('.oas-calendar-month-panel').html(calendarMonthsTpl(monthInfo)).css('display','block');
            }
        },
        _renderYearsDoublePanel: function($self){
            if($self.parents('.oas-doubleMonthCalendar-pre').length === 1){
                var yearInfo = this._createYearsDoublePanel(this.obj.yearSelectedTempDatePrePanel);
                $self.parents('.oas-doubleMonthCalendar-pre').find('.oas-calendar-year-panel').html(calendarYearsTpl(yearInfo)).css('display','block');
            }else if($self.parents('.oas-doubleMonthCalendar-next').length === 1){
                var yearInfo = this._createYearsDoublePanel(this.obj.yearSelectedTempDateNextPanel);
                $self.parents('.oas-doubleMonthCalendar-next').find('.oas-calendar-year-panel').html(calendarYearsTpl(yearInfo)).css('display','block');
            }
        },
        _isHiddenButton: function(){
            // 前一个面板日期小于后一个，或者前一个面板月份雨后一个面板月份差一，
            // 去除前一个面板下一年下一月按钮以及后一面板前一年前一月按钮
            if( (moment(this.obj.monthSelectedTempDatePrePanel).isSame(this.obj.monthSelectedTempDateNextPanel,'year') && 
                (this.obj.monthSelectedTempDatePrePanel.getMonth() + 1 === this.obj.monthSelectedTempDateNextPanel.getMonth())) 
            ){
                this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-calendar-month-next').css('display','none');
                this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-calendar-year-next').css('display','none');
                this.$calendar.find('.oas-doubleMonthCalendar-next .oas-calendar-month-pre').css('display','none');
                this.$calendar.find('.oas-doubleMonthCalendar-next .oas-calendar-year-pre').css('display','none');
            }else{
                this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-calendar-month-next').css('display','block');
                this.$calendar.find('.oas-doubleMonthCalendar-pre .oas-calendar-year-next').css('display','block');
                this.$calendar.find('.oas-doubleMonthCalendar-next .oas-calendar-month-pre').css('display','block');
                this.$calendar.find('.oas-doubleMonthCalendar-next .oas-calendar-year-pre').css('display','block');
            }
        },
        _bindTrigger: function(){
            var that = this;
            for(var i = 0; i<this.options.triggerSelector.length ; i++){
                this.options.triggerSelector[i].click(function(){
                    that.$el.trigger('click');
                    event.stopPropagation();
                });
            }
        },
        // 绑定扩展事件
        _bindShortcuts: function(){
            if(this.obj.shortcutsArr === undefined){
                return ;
            }
            for(var i = 0 ; i < this.obj.shortcutsArr.length ; i++){
                var that = this;
                this.$calendar.on('click','.' + this.obj.shortcutsArr[i].className,(function(j){
                    return function(){
                        that.obj.shortcutsArr[j].fn();
                    }
                })(i));
            }
        },
        // 获取shortcuts的key数组
        _getshortcutsObjs: function(shortcuts){
            var arr = [];
            for(var i = 0; i < shortcuts.length; i++){
                for(var shortcut in shortcuts[i]){
                    var obj = {
                        text : shortcut,
                        fn: shortcuts[i][shortcut],
                        className: 'oas-calendar-shortcuts' + i 
                    }
                    arr.push(obj);
                }
                // // 合并数组
                // arr = _.union(arr,_.keys(shortcuts[i]));
            }
            return arr;
        },
        _getShortcutsArr: function(){
            if(this.options.shortcuts.length > 0){
                return this._getshortcutsObjs(this.options.shortcuts);
            }else{
                return undefined;
            }
        },
         invoke: {
            //在初始化时 如果为组合使用 对方法进行了复写，获得开始和结束时间的数组
            getSelectDate : function() {
                if(this.options.type === 'daterange' || this.options.type === 'datetimerange'){
                    return [this.obj.startDate,this.obj.endDate];
                }else if(this.options.type === 'oldrange' || this.options.type === 'oldtimerange'){
                    return [this.$calA.oasCalendar('getSelectDate'),this.$calB.oasCalendar('getSelectDate')];
                }else{
                    return this.obj.date;
                }
            },
            getSelectDateObj : function() {
                var year = this.obj.date.getFullYear(),
                    month = this.obj.date.getMonth(),
                    date = this.obj.date.getDate(),
                    hour = this.obj.date.getHours(),
                    minute = this.obj.date.getMinutes() ,
                    second = this.obj.date.getSeconds(),
                    type = this.options.type; 
                    if(type === 'year'){
                        var obj = {
                            year: year
                        }
                    }else if(type === 'month'){
                        var obj = {
                            year: year,
                            month: month
                        }
                    }else if(type === 'date'){
                         var obj = {
                            year: year,
                            month: month,
                            date: date
                        }
                    }else if(type === 'datetime'){
                        var obj = {
                            year: year,
                            month: month,
                            date: date,
                            hour: hour,
                            minute: minute,
                            second: second
                        }
                    }else if(type === 'time'){
                        var obj = {
                            hour: hour,
                            minute: minute,
                            second: second
                        }
                    }
                return obj;
            },
            setDate: function(date){
                this.obj.date = date;
                this._updateObjByDate(moment(this.obj.date)._d);
                this.$el.val(moment(this.obj.date).format(this.options.format));
            },
            getRange : function() {
                var rangeTime = [];
                rangeTime[0] = this.obj.startDate;
                rangeTime[1] = this.obj.endDate;
                return rangeTime;
            },
            setStart : function(date) {
                 this.obj.startDate = date;
                 this._updateObjByDateDoublePanel(this.obj.startDate,this.obj.endDate);
            },
            setEnd : function(date) {
                 this.obj.endDate = date;
                 this._updateObjByDateDoublePanel(this.obj.startDate,this.obj.endDate);
            },
            setMindate: function(date){
                this.obj.minDate = date;
                // this._updateObjByDate(date);

                this._rendarHeaderInput();
                this._renderYearMonthHd();
                this._createDays(this.obj.date);
            },
            setMaxdate: function(date){
                this.obj.maxDate = date;
                // this._updateObjByDate(date);

                this._rendarHeaderInput();
                this._renderYearMonthHd();
                this._createDays(this.obj.date);
            },
            rendar: function(){
                if(this.options.type === 'daterange' || this.options.type === 'datetimerange'){
                    this._rendarHeaderInputDoublePanel();
                    this._renderYearMonthHdDoublePanel();
                    this._createTimeRangeDays(this.obj.startDate,this.obj.endDate);
                    this._isHiddenButton();
                }else if(this.options.type === 'date'){
                    this._rendarHeaderInput();
                    this._renderYearMonthHd();
                    this._createDays(this.obj.date);
                    this.$el.val(moment(this.obj.date).format(this.options.format));
                    this._close();
                    this._toggleIcon();
                }else if(this.options.type === 'datetime'){
                    this._rendarHeaderInput();
                    this._renderYearMonthHd();
                    this._createDays(this.obj.date);
                    this.$el.val(moment(this.obj.date).format(this.options.format));
                }
            },
            triggerMakeSure: function(){
                this.$calendar.find('.oas-calendar-makesure').trigger('click');
            },
            setInputTime: function(date){
                if(Object.prototype.toString.call(date) == "[object String]"){
                    date = moment(date,this.options.format)._d;
                }
                if(moment(this.obj.minDate).isBefore(date) && moment(this.obj.maxDate).isAfter(date)){
                    this.obj.date = date;
                    this._updateObjByDate(moment(this.obj.date)._d);
                    this.$el.val(moment(date).format(this.options.format));
                    this.$el.attr('value',moment(date).format(this.options.format));
                }
            },
            destroy : function() {
                this.$el.unbind('.' + this.uiName).removeData(this.uiName);
                this.$calendar.remove();
            }
         }
    });
    $('[data-toggle="oasCalendar"]').oasCalendar({});
}
},{"../position/index":70,"./calendar_daysTpl.tpl":19,"./calendar_doubleMonth.tpl":20,"./calendar_main.tpl":21,"./calendar_monthsTpl.tpl":22,"./calendar_timeModel_panel.tpl":23,"./calendar_timesTpl.tpl":24,"./calendar_yearsTpl.tpl":25}],27:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"ce020eb3d4e745d75b93345a8534e3ca"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/cascader/cascaderHeaderTpl',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,isSearch=$data.isSearch,loadData=$data.loadData,$escape=$utils.$escape,placeholder=$data.placeholder,showInput=$data.showInput,$out='';if(isSearch && loadData === null){
$out+=' <input type="text" class="oas-cascader-input-search" placeholder="';
$out+=$escape(placeholder);
$out+='" > <a class="oasicon oasicon-search"></a> <input type="text" class="oas-cascader-input" readonly="readonly"> ';
}else{
$out+=' ';
if(showInput === ''){
$out+=' <span class="cascader-placeholder">';
$out+=$escape(placeholder);
$out+='</span> ';
}else{
$out+=' <span class="select-value" title="';
$out+=$escape(showInput);
$out+='">';
$out+=$escape(showInput);
$out+='</span> ';
}
$out+=' <a class="oasicon oasicon-desc"></a> <input type="text" class="oas-cascader-input" readonly="readonly"> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],28:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"e3c47015bfa31aa895510e04a48c47c5"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/cascader/cascaderSearchMenuTpl',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,tempArray=$data.tempArray,$each=$utils.$each,item=$data.item,$index=$data.$index,$escape=$utils.$escape,$string=$utils.$string,nodataTip=$data.nodataTip,$out='';if(tempArray.length > 0){
$out+=' <ul class="oas-cascader-menu oas-cascader-searchMenu"> ';
$each(tempArray,function(item,$index){
$out+=' <li class="oas-cascader-menu-item-search ';
if(item.disabled){
$out+=' disabled';
}
$out+='" data-value="';
$out+=$escape(item.value);
$out+='"> <div class="oas-cascader-menu-item-name" title="';
$out+=$escape(item.showInputTextTitle);
$out+='"> ';
$out+=$string(item.showInputText);
$out+=' </div> </li> ';
});
$out+=' </ul> ';
}else{
$out+=' <div class="oas-cascader-nodata">';
$out+=$escape(nodataTip);
$out+='</div> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],29:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"e6b6c406204353868573beb3b45888c1"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/cascader/cascaderTpl',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,label=$data.label,$escape=$utils.$escape,isSearch=$data.isSearch,loadData=$data.loadData,disabled=$data.disabled,placeholder=$data.placeholder,showInput=$data.showInput,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$out='';if(label !== ''){
$out+=' <div class="oas-cascader-label">';
$out+=$escape(label);
$out+='</div> ';
}
$out+=' ';
if(isSearch && loadData === null){
$out+=' <div class="oas-cascader-hd ';
if(disabled){
$out+=' disabled';
}
$out+=' ';
if(label !== ''){
$out+=' oas-cascader-hasLabel';
}
$out+='" role="button" data-target="#" >  <span>  <input type="text" class="oas-cascader-input-search" placeholder="';
$out+=$escape(placeholder);
$out+='" > <a class="oasicon oasicon-search"></a>  <input type="text" class="oas-cascader-input" readonly="readonly"> </span> </div> ';
}else{
$out+=' <div class="oas-cascader-hd ';
if(disabled){
$out+=' disabled';
}
$out+=' ';
if(label !== ''){
$out+=' oas-cascader-hasLabel';
}
$out+='" role="button" data-target="#" > <span> ';
if(showInput === ''){
$out+=' <span class="cascader-placeholder">';
$out+=$escape(placeholder);
$out+='</span> ';
}else{
$out+=' <span class="select-value" title="';
$out+=$escape(showInput);
$out+='">';
$out+=$escape(showInput);
$out+='</span> ';
}
$out+=' <a class="oasicon oasicon-desc"></a> <input type="text" class="oas-cascader-input" readonly="readonly"> </span> </div> ';
}
$out+=' <div class="oas-cascader-bd dropdown-menu" role="menu"> <div> <ul class="oas-cascader-menu"> ';
$each($data.data,function($value,$index){
$out+=' <li class="oas-cascader-menu-item ';
if($value.disabled){
$out+=' disabled';
}
$out+='" data-value="';
$out+=$escape($value.value);
$out+='" > <div class="oas-cascader-menu-item-name" title="';
$out+=$escape($value.label);
$out+='">';
$out+=$escape($value.label);
$out+='</div> ';
if( $value.childList !== undefined ){
$out+=' <i class="oasicon oasicon-arrow-right oas-cascader-menu-item-left"></i> ';
}
$out+=' </li> ';
});
$out+=' </ul> </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],30:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"a4a8584999dd30d6cf40afe888b7445f"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/cascader/cascaderUlTpl',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,$out='';$out+='<ul class="oas-cascader-menu"> ';
$each($data,function($value,$index){
$out+=' <li class="oas-cascader-menu-item ';
if($value.disabled){
$out+=' disabled';
}
$out+='" data-value="';
$out+=$escape($value.value);
$out+='"> <div class="oas-cascader-menu-item-name" title="';
$out+=$escape($value.label);
$out+='">';
$out+=$escape($value.label);
$out+='</div> ';
if($value.childList  !== undefined  ){
$out+=' <i class="oasicon oasicon-arrow-right oas-cascader-menu-item-left"></i> ';
}
$out+=' </li> ';
});
$out+=' </ul>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],31:[function(require,module,exports){
var cascaderTpl = require("./cascaderTpl.tpl"),
    cascaderUlTpl = require("./cascaderUlTpl.tpl"),
    cascaderHeaderTpl = require("./cascaderHeaderTpl.tpl"),
    cascaderSearchMenuTpl = require("./cascaderSearchMenuTpl.tpl");
module.exports = function(){
    $.oasUiFactory("oasCascader", {
        VERSION: '1.0.0',
		options: { 
			//展示的数据 
			data: [],
			//通过url传递数据
			url:  '',
			//当前选择的数据的value值数组，比如['beijing','guangdong'],按照级联顺序依次排序
			value: [],
			//是否禁用
			disabled: false,
			// 设置面板前面的label
			label:'',
			//输入框占位文本
			placeholder: '请选择',
			//是否支持清空选项
			clearable: false,
			//次级菜单的展开方式,可选值为'click' 或 'hover'
			trigger: 'click',
			//是否可搜索 在loadData不为null时，也就是分批加载时不可用
			isSearch: false,
			//是否可以选择任意一级选项
            changeOnSelect: false,
			//输入框中是否展示选中值的完整路径
            showAllLevels: true,
			//动态加载数据 动态加载下搜索无效 不能使用hover展开,即isSearch:true和trigger:'hover'失效;在使用动态加载时，传递的数据中有childList:[] 说明含有子节点
            loadData: null,
			//渲染模板,用于渲染input中展示的内容, 默认是展示为 北京/故宫  (如果手动设置了该函数，则showAllLevels参数失效)
            renderFunction: function(value,kvNodes){
				if(this.options.showAllLevels){
					var showString = '';
					if(value.length === 0){
						return '';
					} 
					for(var i = 0; i < value.length; i++){
						showString += this.kvNodes[value[i]].label;
						i !== (value.length-1) ? showString = showString + '/': undefined ;
					}
					return showString;
				}else{
					if(value.length === 0){
						return '';
					} 
					return this.kvNodes[value[value.length-1]].label;
				}
				
			},            
			//选项面板的父节点(需oasdropdown支持)
            container: 'body',
            // 无数据时展示的文字
			nodataTip: '暂无数据',
			size: 'default'
        },
        _create: function(){
			// url形式
			if(this.options.url === ''){
				this._initDataModel();
			}else{
				this._initUrlModel();
			}
        },
        events: {
			//指定绑定事件的元素
			'target': function() {
				return $(this.options.container).find('.' + this.randomClass);
			},
			'click .oas-cascader-menu-item': function(self, evt) {
				var $self = $(self),
					value = $self.attr('data-value');
				this.$selfClick = $self;
					
				// 添加样式 active控制选中样式，selected控制当前选中的项用于控制键盘上下键的操作
				$self.parents('.oas-cascader-bd').find('.oas-cascader-menu-item').removeClass('selected');
				$self.addClass('selected');
				// 如果禁用 后面代码不执行， 带式selected标志还是要加上的，因为用来控制键盘上下箭头使用
				if($self.hasClass('disabled')){
					return false;
				}
				$self.addClass('active').siblings('.oas-cascader-menu-item').removeClass('active');
				
				if(this.options.loadData !== null && this.kvNodes[value].childList !== undefined && this.kvNodes[value].childList.length === 0){
					// 动画开启
					this._loadloadController(this.kvNodes[value],true);
					this.options.loadData.apply(this,[this.kvNodes[value],this._clickOperator]);
				}else{
					this._clickOperator();
				}

				// 阻止冒泡
				return false;
			},
			'select .oas-cascader-menu-item': function(self, evt) {
				var $self = $(self),
					value = $self.attr('data-value');
				this.selfSelect = $self;
				// 添加样式 active控制选中样式，selected控制当前选中的项用于控制键盘上下键的操作
				$self.parents('.oas-cascader-bd').find('.oas-cascader-menu-item').removeClass('selected');
				$self.addClass('selected');
				// 如果禁用 后面代码不执行， 带式selected标志还是要加上的，因为用来控制键盘上下箭头使用
				if($self.hasClass('disabled')){
					return false;
				}
				$self.addClass('active').siblings('.oas-cascader-menu-item').removeClass('active');
				

				if(this.options.loadData !== null && this.kvNodes[value].childList !== undefined && this.kvNodes[value].childList.length === 0){
					this._loadloadController(this.kvNodes[value],true);
					this.options.loadData.apply(this,[this.kvNodes[value],this._selectOperator]);
					this._preRenderData();
				}else{
					this._selectOperator();
				}
				
				// 阻止冒泡
				return false;
			},
			'click .oas-cascader-menu-item-search': function(self, evt) {
				var $self = $(self),
					value = $self.attr('data-value');
				if($self.hasClass('disabled')){
					return false;
				}

				// 点击最后一级更新value值,修改input框
				this._updateValue(value);
				this.$el.find('.oas-cascader-hd>span').html(cascaderHeaderTpl(this._renderData));
				this.$el.find('.oas-cascader-hd .oas-cascader-input').attr('value',value);
				this.$el.find('.oas-cascader-hd .oas-cascader-input-search').attr('value',this.kvNodes[value].label);
				this._emit('afterSelected',[$self,this.kvNodes[value]]);
				this._iCall('close');
				return false;
			},
			'mouseover .oas-cascader-menu-item:not(.disabled)': function(self, evt) {
				var $self = $(self),
					value = $self.attr('data-value');
				// 动态加载数据时，不能使用hover展开 
				if(this.options.trigger === 'click' || this.options.loadData !== null){
					return false;
				}
				$self.addClass('active').siblings('.oas-cascader-menu-item').removeClass('active');
				// 有子元素则打开面板
				if( this.kvNodes[value].childList === undefined || this.kvNodes[value].childList.length === 0){
					return false;
				}else{
					$self.parents('.oas-cascader-menu').nextAll('.oas-cascader-menu').remove();
					this.$cascader_bd.find('>div').append(cascaderUlTpl(this.kvNodes[value].childList));
					this._adjustWidth();
				}
				return false;
			}
		},
        invoke: {
			data: function(data){
				this.options.data = data;
				this._preRenderData();
				this.$cascader_el.find('.oas-cascader-hd>span').html(cascaderHeaderTpl(this._renderData));
				this.$cascader_bd.find('>div').html(cascaderUlTpl(this._renderData.data));
				this._adjustWidth();
			},
			getValue: function(){
				return this._renderData.value;
			},
			//关闭cascader_el选项面板
			close: function() {
				if (this.$cascader_el.find('.oas-cascader-hd').data('oasDropdown')) {
					this.$cascader_el.find('.oas-cascader-hd').oasDropdown('close');
				} else {
					console.warn('disabled状态下不可操作面板');
				}
			},
			//打开cascader_el选项面板
			open: function() {
				if (this.$cascader_el.find('.oas-cascader-hd').data('oasDropdown')) {
					this.$cascader_el.find('.oas-cascader-hd').oasDropdown('open');
				} else {
					console.warn('disabled状态下不可操作面板');
				}	
			}
		},
		// 用来补充绑定那些不在target上的事件
		_bindEvents: function(){
			var that = this;
			if(this.options.disabled){
				return false;
			}
			// 清空按钮事件绑定
			if(this.options.clearable){
				this.$cascader_el.on('mouseover','.oas-cascader-hd',function() {
					var $self = $(this);
					if(that._renderData.value.length > 0){
						$self.find('.oasicon').addClass('oasicon-fail').removeClass('oasicon-desc').removeClass('oasicon-search');
					}
				}).on('mouseout','.oas-cascader-hd',function() {
					var $self = $(this);
					if(that._renderData.value.length > 0){
						that.options.isSearch === true ? $self.find('.oasicon').addClass('oasicon-search').removeClass('oasicon-fail') : $self.find('.oasicon').addClass('oasicon-desc').removeClass('oasicon-fail');
					}
				})
				this.$cascader_el.find('.oas-cascader-hd>span').on('click','.oasicon-fail',function() {
					// 清空选项
					that._updateValue('');
					that.$el.find('.oas-cascader-hd>span').html(cascaderHeaderTpl(that._renderData));
					that.$cascader_bd.find('>div').html(cascaderUlTpl(that._renderData.data));
					that._adjustWidth();
					return false;
				})
			}
			// 解决点击面板会关闭面板的问题
			this.$cascader_bd.on('click','>div',function() {
				return false;
			})

			this.$cascader_el.find('.oas-cascader-hd').on('keyup','.oas-cascader-input-search',function(evt){
				// 输入是打开面板
				that._iCall('open');
				// 如果是向下键不触发
				if(evt.keyCode === 40){
					return false;
				}

				that._renderDataBak = $.extend(true, {}, that._renderData);
				inputValue = $(this).val();
				if(that.inputValue === inputValue){
					return;
				}
				// 如果input框为空，则恢复默认的情况
				if(inputValue === ''){
					that.inputValue = '';
					that.$cascader_bd.find('>div').html(cascaderUlTpl(that._renderData.data));
					that._adjustWidth();
					return false;
				}

				that.inputValue = inputValue;
				that._emit('change',[$(this),$(this).val()]);

				var tempArray = that._validateRendar();
				that._reloadOptions(tempArray);
			})
		},
		_initDataModel: function(){
			this._preRenderData();
			this._createDom();
			this._bindEvents();
		},
		_initUrlModel: function(){
			var that = this;
			that._model = oasisl.baseModel.extend({
				statics: {
					baseUrl: that.options.url
				}
			});

			that.options.data = [];
			that._preRenderData();
			that._renderData =  $.extend(true, {}, that._initData);
			that._createDom();
			that._bindEvents();

			that._model.list().then(function(res){
				if(res.meta.status === 0 ){
					that._iCall('data',[res.data]);
				}else{
					console.log("获取数据失败，code为：" + res.meta.status);
				}
			});
		},
		_preRenderData: function(){
			this._initData = {
				data : this.options.data,
				value : this.options.value,
				disabled : this.options.disabled,
				clearable : this.options.clearable,
				trigger : this.options.trigger,
				isSearch : this.options.isSearch,
				changeOnSelect : this.options.changeOnSelect,
				nodataTip : this.options.nodataTip,
				placeholder : this.options.placeholder,
				label: this.options.label,
				loadData: this.options.loadData
			};
			// 树组形式的data
			this.arrayData = [];
			// 生成树组形式的data
			this._tree2Array(this._initData.data);
			// 生成value到object的映射 this.kvNodes
			this._generateKv();
			// this.c2parentValue 子value到父value的映射 如：{'gugong':'beijing'}
			this._generateChild2Parent();
			// this.c2parentsValueArray value值的映射，例如比如{'fuzimiao':['jiangsu','nanjing']}按照级联顺序依次排序 
			this._generateValue();
			this._generateValue2text();
			this._initData.showInput = this.options.renderFunction.apply(this,[this.options.value,undefined]);
			this._renderData =  $.extend(true, {}, this._initData);
		},


		_createDom: function() {
			var options = this.options,
				that = this;
			this._addSizeClass();
			this.$el.addClass('oas-cascader dropdown clearfix').empty().html(cascaderTpl(this._renderData));
			this.$cascader_el = this.$el;
			this.$cascader_el.css({
				width: options.width
			});

			//初始化选项面板
			this._dropDown();

		},
		_addSizeClass: function(){
			if(this.options.size === 'large'){
				this.$el.addClass('large');
			}else if(this.options.size === 'small'){
				this.$el.addClass('small');
			}
		},
		_setCascaderBd: function(){
			if (this.options.container) {
				this.$cascader_bd = $(this.options.container).find('.' + this.randomClass);
			}else{
				// 为防止要有添加到原节点的需求，先保留
				this.$cascader_bd = this.$cascader_el.find('.oas-cascader-bd');
			}
		},
		// 生成key value形式 ,其中key为value值,value值与节点的映射
		// childList 存放子节点对象；childValueList存放所有子节点的value值
        _generateKv: function(){
            var that = this;
            that.kvNodes = {};
            _.forEach(this.arrayData, function(node, i) {
				if( node.childList === undefined ){
					node.childValueList = [];
				}else{
					node.childValueList = [];
					_.forEach(node.childList, function(childNode, i) {
						node.childValueList.push(childNode.value);
					})
				}
                that.kvNodes['' + node.value] = node;
            })
		},
		// 生成c2parentValue 子value到父value的映射 如：{'gugong':'beijing'}
		_generateChild2Parent: function(){
			var kvNodesBak = $.extend(true, {}, this.kvNodes),
			// 存放value到所有子value组成数组的映射
				p2child = {},
				that = this;
			this.c2parentValue = {};
			// 存放 所有的value值
			var values = [];
			_.forEach(kvNodesBak, function(n, key) {
				p2child[key] = n.childValueList;
			});
			values = _.keys(p2child);
			for(var i = 0; i < values.length; i++){
				var flag = false;
				_.forIn(p2child, function(value, key) {
					if(_.indexOf(value, values[i]) !== -1){
						that.c2parentValue[values[i]] = key;
						flag = true;
					}
				});
				// 没有找到对应的父，则赋值null
				if(!flag){
					this.c2parentValue[values[i]] = null;
				}
			}
		},
		// 生成value值的映射，例如比如{'fuzimiao':['jiangsu','nanjing']}按照级联顺序依次排序 
		_generateValue: function(){
			var values = _.keys(this.kvNodes);
			this.c2parentsValueArray = {};
			for(var i = 0; i < values.length; i++){
				this.c2parentsValueArray[values[i]] = [];
				this._dealC2parentsValueArray(values[i],values[i]);
			}
		},
		// 生成this.value2Text ，为value到text的映射 {'fuzimiao':'江苏/南京/夫子庙'}
		_generateValue2text: function(){
			var c2parentsValueArrayBak =  $.extend(true, {}, this.c2parentsValueArray),
				that= this;
			this.value2Text = {};
			_.forIn(c2parentsValueArrayBak, function(value, key) {
				var text = "";
				if(value !== []){
					for(var i = 0;i < value.length;i++){
						text += that.kvNodes[value[i]].label + '/';
					}
					text += that.kvNodes[key].label;
				}else{
					text = that.kvNodes[key].label;
				}
				that.value2Text[key] = text;
			})
		},
		_dealC2parentsValueArray: function(key,value){
			if(this.c2parentValue[value] !== null){
				this.c2parentsValueArray[key].unshift(this.c2parentValue[value]);
				this._dealC2parentsValueArray(key,this.c2parentValue[value]);
			}
		},
		//树形数据转换成数组
        _tree2Array: function(data){
            for (var i = 0; i < data.length; i++) {
                this.arrayData.push(data[i]);
                if(data[i].childList && data[i].childList .length > 0){
                    this._tree2Array(data[i].childList );
                }
			}
		},
		// 更新value值
		_updateValue: function(value){
			if(value === ''){
				this._renderData.value = [];
				this._renderData.showInput = this.options.renderFunction.apply(this,[this._renderData.value,this.kvNodes]);
			}else{
				this._renderData.value = $.extend(true, [], this.c2parentsValueArray[value]);
				// 更新this._renderData.value
				this._renderData.value.push(value);
				// 同时将showInput需要展示的内容一起更新
				this._renderData.showInput = this.options.renderFunction.apply(this,[this._renderData.value,this.kvNodes]);
			}
		},
		_validateRendar:function(){
			var that = this,
			data = $.extend(true, [], this.value2Text),
			kvNodesBak = $.extend(true, [], this.kvNodes),
			inputValue = this.inputValue,
			tempArray = [];

			// 在changeOnSelect: false; 再不是任意一级都可以选择时，搜索只出现最后一级可以选择的项，此处排除不可选中的项
			if( !this.options.changeOnSelect ){
				_.forIn(data, function(value, key) {
					if(that.kvNodes[key].childList !== undefined && that.kvNodes[key].childList.length !== 0){
						delete data[key];
					}
				})
			}

			_.forIn(data, function(value, key) {
				if(that.matchInput(inputValue,value)){
					if(!that.kvNodes[key].disabled && inputValue !== ''){
						kvNodesBak[key].showInputTextTitle = data[key];
						kvNodesBak[key].showInputText = data[key].replace(inputValue,'<em class="oas-cascader-search-value">'+inputValue+'</em>');
					}
					tempArray.push(kvNodesBak[key]);
				}
			})
			return tempArray;
		},
		//匹配
		matchInput:function(input,data){
			var index = data.toLowerCase().indexOf(input.toLowerCase());
			if(index === -1){
				return false;
			}else{
				return true;	
			}
		},
		_reloadOptions: function(tempArray){
			this.$cascader_bd.find('>div').html(cascaderSearchMenuTpl({tempArray:tempArray,nodataTip:this.options.nodataTip}));
			this._adjustWidth();
		},
		// 点击后执行的操作
		_clickOperator: function(childList){
			var value = this.$selfClick.attr('data-value');
			if(childList !== undefined){
				this.kvNodes[value].childList = childList;
			}

			// 有子元素则打开面板
			if( this.kvNodes[value].childList === undefined || this.kvNodes[value].childList.length === 0){
				// 点击最后一级更新value值,修改input框
				this._updateValue(value);
				this.$el.find('.oas-cascader-hd>span').html(cascaderHeaderTpl(this._renderData));
				this.$el.find('.oas-cascader-hd .oas-cascader-input').attr('value',value);
				if(this.options.isSearch){
					this.$el.find('.oas-cascader-hd .oas-cascader-input-search').attr('value',this.kvNodes[value].label);
				}
				if(this.options.loadData !== null){
					this._preRenderData();
					this._updateValue(value);
					// 动画关闭
					this._loadloadController(this.kvNodes[value],false);
				};

				this._emit('afterSelected',[this.$selfClick,this.kvNodes[value]]);
				this._iCall('close');
			}else{
				this.$selfClick.parents('.oas-cascader-menu').nextAll('.oas-cascader-menu').remove();
				this.$cascader_bd.find('>div').append(cascaderUlTpl(this.kvNodes[value].childList));
				this._adjustWidth();
				if(this.options.loadData !== null){
					this._preRenderData();
					// 动画关闭
					this._loadloadController(this.kvNodes[value],false);
				};
				// 点击中间层是否更新input框
				if(this.options.changeOnSelect){
					// 点击任意层更新更新value值,修改input框
					this._updateValue(value);
					this.$el.find('.oas-cascader-hd>span').html(cascaderHeaderTpl(this._renderData));
					this.$el.find('.oas-cascader-hd .oas-cascader-input').attr('value',value);
					if(this.options.isSearch){
						this.$el.find('.oas-cascader-hd .oas-cascader-input-search').attr('value',this.kvNodes[value].label);
					}

					this._emit('afterSelected',[this.$selfClick,this.kvNodes[value]]);
				}
			}
		},
		// 点击后执行的操作
		_selectOperator: function(childList){
			var value = this.selfSelect.attr('data-value');
			if(childList !== undefined){
				this.kvNodes[value].childList = childList;
			}
			// 有子元素则打开面板
			if( !(this.kvNodes[value].childList === undefined || this.kvNodes[value].childList.length === 0)){
				this.selfSelect.parents('.oas-cascader-menu').nextAll('.oas-cascader-menu').remove();
				this.$cascader_bd.find('>div').append(cascaderUlTpl(this.kvNodes[value].childList));
				this._adjustWidth();
			}
			if(this.options.loadData !== null){
				// 动画关闭
				this._loadloadController(this.kvNodes[value],false);
			}
		},
		_loadloadController: function(node,bool){
			if(bool){
				this.$cascader_bd.find('.oas-cascader-menu-item[data-value="'+node.value+'"] .oasicon').removeClass('oasicon-arrow-right').addClass("oasicon-loading oasis-spin");
			}else{
				this.$cascader_bd.find('.oas-cascader-menu-item[data-value="'+node.value+'"] .oasicon').addClass('oasicon-arrow-right').removeClass("oasicon-loading oasis-spin");
			}
			
		},
		_adjustWidth: function(){
			if( this.$cascader_bd.find('.oas-cascader-nodata').length > 0 || this.$cascader_bd.find('.oas-cascader-searchMenu').length > 0){
				var width = this.$cascader_el.find('.oas-cascader-hd').css('width');
				this.$cascader_bd.css('width',width);
			}else{
				// var width = this.$cascader_bd.find('.oas-cascader-menu').length * 109 + 2;
				this.$cascader_bd.css('width','inherit');
			}
		},
		//调用dropdown初始化select选项面板
		_dropDown: function() {
			var that = this,
				align = this.options.align,
				headerH,
				dropStyle = {};
			if (this._renderData.disabled) {
				this.$cascader_el.addClass('disabled');
				return;
			}
			if(this.options.container && this.randomClass === undefined){
				this.randomClass = oasisl.util.getUID(this.uiName);
				// 为$cascader_el添加对应menu的特定class在data-menucls属性上，用于找到对应menu
				this.$cascader_el.attr('data-menucls',this.randomClass);
			}
			this.$cascader_el.find('.oas-cascader-hd').oasDropdown({
				isClickable : true,
				miss: true,
				container: this.options.container ? $(this.options.container) : null,
				randomClass: this.randomClass ? this.randomClass : '' ,
				offset: [0,6]
			}).on('shown.oasDropdown',function(){
				that._adjustWidth();
			});
			// 设置$cascader_bd,以便于快速获取面板对象
			this._setCascaderBd();
			this.$cascader_el.find('.oas-cascader-hd').on('hide.oasDropdown',function(ev,$el) {
				// 设置动画
				that.$cascader_el.find('.oasicon-desc').removeClass('close-animation');
				// 关闭面板解绑 keydown事件
				$(document).off('keydown.'+that.randomClass);
				// event.stopPropagation;
				that._emit('close',[that.$cascader_el]);
			});		
			this.$cascader_el.find('.oas-cascader-hd').on('show.oasDropdown',function(ev,$el) {
				// that._adjustWidth();
				// 打开面板绑定 keydown事件
				$(document).on('keydown.'+that.randomClass,function(evt){
					var $self = $(this),
					 	$selected = that.$cascader_bd.find('.oas-cascader-menu-item.selected');
					// 设置上下左右键的操作
					if(evt.keyCode === 37){// 左键
						if($selected.parents('.oas-cascader-menu').prev('ul').length !== 0){
							$selected.parents('.oas-cascader-menu').prev('ul').find('li.active').trigger('select');
						}
					}else if(evt.keyCode === 38){// 向上键
						if($selected.prev('li').length !== 0){
							$selected.prev('li').trigger('select');
						}else{
							$selected.parents('.oas-cascader-menu').find('li:last-child').trigger('select');
						}
					}else if(evt.keyCode === 39){// 右键
						if($selected.parents('.oas-cascader-menu').next('ul').length !== 0){
							$selected.parents('.oas-cascader-menu').next('ul').find('li:not(".disabled")').eq(0).trigger('select');
						}
					}else if(evt.keyCode === 40){// 向下键
						// 焦点还在input框中时，将焦点移入到menu第一个
						if( that.$cascader_bd.find('.oas-cascader-menu-item.selected').length === 0 ){
							that.$cascader_el.find('.oas-cascader-input-search').blur();
							that.$cascader_bd.find('.oas-cascader-menu:first-child li:first-child').trigger('select');
						}else{
							if($selected.next('li').length !== 0){
								$selected.next('li').trigger('select');
							}else{
								$selected.parents('.oas-cascader-menu').find('li:first-child').trigger('select');
							}
						}
					}

					// 控制enter事件
					if(evt.keyCode === 13){
						that.$cascader_bd.find('.oas-cascader-menu-item.selected').trigger('click');
					}
				})
				// 设置动画
				that.$cascader_el.find('.oasicon-desc').addClass('close-animation');
				// 触发打开事件
				that._emit('open',[that.$cascader_el]);
			});
			
		}
    })

}
},{"./cascaderHeaderTpl.tpl":27,"./cascaderSearchMenuTpl.tpl":28,"./cascaderTpl.tpl":29,"./cascaderUlTpl.tpl":30}],32:[function(require,module,exports){
/*
 * @desc collapse组件(依赖transition.js)
 * @anthor eszhang
 * @Date 2016-04-06
 */
var transition = require("./transition");

module.exports = function(){
  $.oasUiFactory("oasCollapse", {
    VERSION: '1.0.0',
    options: {
      relative:'', //必填项(关联元素)
      toggle: false,
      parent: '',
      transitionDuration: 350

    },

    _create: function() {
      var  options = this.options,
           relative = options.relative,
           parent = options.parent,
          _self = this;

      if(!relative) return;
      this.$el.attr('data-oasCollapse-relative',relative)
      this.$trigger = $('[data-oasCollapse-name='+relative+']')
      
      if(parent){
         this.$trigger.attr('data-parent',parent);
      }
      this.transitioning = null;

      if (parent) {
        this.$parent = this._getParent()
      } else {
        this._addAriaAndCollapsedClass(this.$el, this.$trigger)
      }

      this.$trigger.on('click'+ '.' + this.uiName,this.$trigger,function(e){
          /*2016-8-5增*/
          var flag = false,
              transitioning;
          _self.brotherList =  _self.$parent &&  _self.$parent.find('.in, .collapsing');
          _self.brotherList&&$.each(_self.brotherList,function(i,data){
            transitioning = $(this).data("oasCollapse").transitioning;
             if(transitioning==1){
               flag = true;
             }
          })
          if(flag) return;
          _self._toggle();
          return false;
      });

      if (this.options.toggle) this._toggle()
      /*2016-8-5增 支持对动画时间的控制*/
      var duration = this.options.transitionDuration/1000;
      if(duration){
           this.$el.css({
            'transition-duration': duration+'s',
            '-webkit-transition-duration': duration+'s'
           })
      }
      // if(this.$parent) this.options.transitionDuration = 350;
    },
    _toggle: function() {

      this[this.$el.hasClass('in') ? '_hide' : '_show']()
    },

    _dimension: function() {
      var hasWidth = this.$el.hasClass('width')
      return hasWidth ? 'width' : 'height'
    },

    _show: function() {
      if (this.transitioning || this.$el.hasClass('in')) return
      
   
      var activesData
      var actives = this.$parent && this.$parent.find('.in, .collapsing')

      if (actives && actives.length) { 
        if (this.transitioning) return
      }

      this._emit('show', [this.$el]);

      if (actives && actives.length) {         
        actives.each(function(){  //这部分思考下看下有没有更好的
          $(this).oasCollapse('hide');
        });
        
      }
      var dimension = this._dimension()

      this.$el
        .removeClass('collapse')
        .addClass('collapsing')[dimension](0)
        .attr('aria-expanded', true)

      this.$trigger
        .removeClass('collapsed')
        .attr('aria-expanded', true)

      this.transitioning = 1
      var complete = function() {
        this.$el
          .removeClass('collapsing')
          .addClass('collapse in')[dimension]('')
        this.transitioning = 0
        this._emit('shown', [this.$el]);
      }

      if (!$.support.transition) return complete.call(this)
      var scrollSize = $.camelCase(['scroll', dimension].join('-'))

      this.$el
        .one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(this.options.transitionDuration)[dimension](this.$el[0][scrollSize])
    },

    _hide: function() {
      if (this.transitioning || !this.$el.hasClass('in')) return

      this._emit('hide', [this.$el]);

      var dimension = this._dimension()

      this.$el[dimension](this.$el[dimension]())[0].offsetHeight

      this.$el
        .addClass('collapsing')
        .removeClass('collapse in')
        .attr('aria-expanded', false)

      this.$trigger
        .addClass('collapsed')
        .attr('aria-expanded', false)

      this.transitioning = 1

      var complete = function() {
        this.transitioning = 0
        this.$el
          .removeClass('collapsing')
          .addClass('collapse');
          
        this._emit('hidden', [this.$el]);
      }

      if (!$.support.transition) return complete.call(this)

      this.$el[dimension](0)
        .one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(this.options.transitionDuration)
    },

    _getParent: function() {
      var _self = this;
      return $(this.options.parent)
        .find('[data-oasCollapse-name][data-parent="' + this.options.parent + '"]')
        .each($.proxy(function(i, element) {
          var $element = $(element)
          this._addAriaAndCollapsedClass(_self._getTargetFromTrigger($element), $element)
        }, this))
        .end()
    },
    _getTargetFromTrigger: function ($trigger) {

      var relative = $trigger.attr('data-oasCollapse-name');
      return $('[data-oasCollapse-relative='+relative+']')

    },
    //设置状态标记
    _addAriaAndCollapsedClass: function($element, $trigger) {
      var isOpen = $element.hasClass('in')

      $element.attr('aria-expanded', isOpen)
      $trigger
        .toggleClass('collapsed', !isOpen)
        .attr('aria-expanded', isOpen)
    },


    // 对外方法
    invoke: {

      toggle: function() {
        this._toggle();
      },

      show: function() {
        this._show();
      },

      hide: function() {
        this._hide();
      }
    }
  });
   $('[oasCollapse]').oasCollapse({});

}
},{"./transition":33}],33:[function(require,module,exports){
/* ========================================================================
 * Bootstrap: transition.js v3.3.5
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

// module.exports = function(){
  +function ($) {
    'use strict';

    // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
    // ============================================================

    function transitionEnd() {
      var el = document.createElement('bootstrap')

      var transEndEventNames = {
        WebkitTransition : 'webkitTransitionEnd',
        MozTransition    : 'transitionend',
        OTransition      : 'oTransitionEnd otransitionend',
        transition       : 'transitionend'
      }

      for (var name in transEndEventNames) {
        if (el.style[name] !== undefined) {
          return { end: transEndEventNames[name] }
        }
      }

      return false // explicit for ie8 (  ._.)
    }

    // http://blog.alexmaccaw.com/css-transitions
    $.fn.emulateTransitionEnd = function (duration) {
      var called = false
      var $el = this
      $(this).one('bsTransitionEnd', function () { called = true })
      var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
      setTimeout(callback, duration)
      return this
    }

    $(function () {
      $.support.transition = transitionEnd()

      if (!$.support.transition) return

      $.event.special.bsTransitionEnd = {
        bindType: $.support.transition.end,
        delegateType: $.support.transition.end,
        handle: function (e) {
          if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
        }
      }
    })

  }(jQuery);
// }



},{}],34:[function(require,module,exports){
module.exports = function(){
    $.oasUiFactory("oasCountDown", {
        VERSION: '1.0.0',
		options: { 
            futureDate: new Date(2050,0,1),
            countDownDomObj: {}
        },
        _create: function(){
            this._preData();
            this._getData();
            this._renderData();
        },
        _preData: function(){
            // 设定的倒计时时间
            this.futureDate = this.options.futureDate;
            // 现在的时间
            this.nowDate = new Date();
            // 现在到将来的秒差值
            this.durSecond = Math.round((this.futureDate.getTime() - this.nowDate.getTime()) / 1000);
            this.countDownEnd = false ;
            this.pms = {
                sec: '00',
                min: '00',
                hour: '00',
                day: '00'
            };
        },
        _getData:function(){
            // 设定的倒计时时间
            this.futureDate = this.options.futureDate;
            // 现在的时间
            this.nowDate = new Date();
            // 现在到将来的秒差值
            this.durSecond = Math.round((this.futureDate.getTime() - this.nowDate.getTime()) / 1000);
            if(this.durSecond > 0){
				this.pms.sec = this._zero(this.durSecond % 60);
				this.pms.min = Math.floor((this.durSecond / 60)) > 0? this._zero(Math.floor((this.durSecond / 60)) % 60) : "00";
				this.pms.hour = Math.floor((this.durSecond / 3600)) > 0? this._zero(Math.floor((this.durSecond / 3600)) % 24) : "00";
				this.pms.day = Math.floor((this.durSecond / 86400)) > 0? this._zero(Math.floor((this.durSecond / 86400))) : "00";
                this._emit('secondEvent',[this.durSecond]);
            }else if(this.countDownEnd === false){
                this._emit('countDownEnd',[this.nowDate]);
                this.countDownEnd = true;
            }
            return this.pms;
        },
        _zero: function(n){
            var n = parseInt(n, 10);
			if(n > 0){
				if(n <= 9){
					n = "0" + n;	
				}
				return String(n);
			}else{
				return "00";	
			}
        },
        _renderData: function(){
            if(this.options.countDownDomObj.sec){
				this.options.countDownDomObj.sec.text(this._getData().sec);
			}
			if(this.options.countDownDomObj.min){
				this.options.countDownDomObj.min.text(this._getData().min);
			}
			if(this.options.countDownDomObj.hour){
				this.options.countDownDomObj.hour.text(this._getData().hour);
			}
			if(this.options.countDownDomObj.day){
				this.options.countDownDomObj.day.text(this._getData().day);
			}
			if(this.options.countDownDomObj.month){
				this.options.countDownDomObj.month.text(this._getData().month);
			}
			if(this.options.countDownDomObj.year){
				this.options.countDownDomObj.year.text(this._getData().year);
			}
			setTimeout(function(that){
                return function(){
                    that._renderData();
                }
            }(this), 1000);
        },
        invoke:{
            setFutureData: function(date){
                if(date.getTime() > (new Date()).getTime()){
                    this.futureDate = this.options.futureDate = date;
                    this.countDownEnd = false;
                }else{
                    console.log('重置倒计时时间不能小于当前时间');
                }
                
            }
        },
        events:{

        }
    })
}
},{}],35:[function(require,module,exports){

/*
 * @desc dialog组件，依赖于开源组件layer
 * @anthor rbai
 * @Date 2016-02-29
 * 
 */

var layer    = require('../../../plugins/layer/layer');

module.exports = function(){

	layer.config({
		skin: 'layer-ext-oasisl'
	});
	
	layer.VERSION = '1.0.0';

	window.dialog = layer;
};

},{"../../../plugins/layer/layer":106}],36:[function(require,module,exports){
/*
 * @desc dropdown组件
 * @anthor pwang
 * @Date 2016-03-07
 */

var Position = require("../../components/position/index");

module.exports = function(){
	var dropdownArr = [];

    $.oasUiFactory("oasDropdown", {
    	VERSION: '1.0.0',
    	options: {
    		trigger: 'hover focus',
            miss : true,
            //选项面板的父节点(需oasdropdown支持)
            container: null,
            //2017-08-14 wf add 增加位置调整以满足位置之间的空隙
            offset: [0,0],
            randomClass: '',
            //设置面板的展示位置:down默认的朝下，up朝上
            panelPos: 'down'
    	},

    	_create: function(){
    		var options = this.options,
                miss = options.miss,
                that = this,
                $menu = this.$el.parent().find(".dropdown-menu"),
    			trigger = options.trigger;

            this.$dropDownPanel = $menu;

            if(this.options.container){
                var cloneMenu = $menu.clone();
                $menu.remove();
                //$(this.options.container).addClass('dropdown-menu');
                $(this.options.container).append(cloneMenu);
                $menu = cloneMenu;
                this.$menu = $menu;
                this.$menu.css('right','initial');
                //this.$menu.width(this.$el.outerWidth());
                this.$menu.addClass(this.options.randomClass);
                //this._setPosition();
                this.$menu.css('min-width',this.$el.outerWidth());
            }

    		this.$el.on('click.' + this.uiName, this.$el, $.proxy(this._toggle, this));
            if(!miss) {
                $menu.on('click.' + this.uiName, $menu, $.proxy(this._close, this));
            }
    		dropdownArr.push(this.$el);
    	},
        _setPosition : function() {
            if(this.options.container){
                var parentPos = $(this.options.container).offset();
                var triggerPos = this.$el.offset();
                var pos = {};
                pos.top = triggerPos.top - parentPos.top + this.$el.outerHeight() + this.options.offset[1];
                pos.left = triggerPos.left - parentPos.left + this.options.offset[0];
                this.$menu.width(this.$el.outerWidth()-2);
                this.$menu.css(pos);
            }else{
                if(this.options.panelPos == 'up'){
                     var pos = {};
                     pos.top = -(this.$dropDownPanel.outerHeight() + this.options.offset[1] + 5) + "px";
                     this.$dropDownPanel.css(pos);
                }
            }
        },
        _setBodyPosition:function(){
            var parentPos = $(this.options.container).offset();
            var triggerPos = this.$el.offset();
            var pos = {};
            pos.top = triggerPos.top - parentPos.top - this.$menu.outerHeight() - this.options.offset[1]-5;
            pos.left = triggerPos.left - parentPos.left + this.options.offset[0];
            this.$menu.width(this.$el.outerWidth()-2);
            this.$menu.css(pos);
        },
        // 为了适应修改过下拉面板的宽度添加
        _setPositionInvok: function() {
            if(this.options.container){
                var parentPos = $(this.options.container).offset();
                var triggerPos = this.$el.offset();
                var pos = {};
                pos.top = triggerPos.top - parentPos.top + this.$el.outerHeight() + this.options.offset[1];
                pos.left = triggerPos.left - parentPos.left + this.options.offset[0];
                // this.$menu.width(this.$el.outerWidth()-2);
                this.$menu.css(pos);
            }else{
                if(this.options.panelPos == 'up'){
                     var pos = {};
                     pos.top = -(this.$dropDownPanel.outerHeight() + this.options.offset[1] + 5) + "px";
                     this.$dropDownPanel.css(pos);
                }
            }
        },
    	_toggle: function(e){
    		var $el = this.$el,
    			$parent = $el.parent();
            //e.stopPropagation();
    		if($parent.hasClass("open")) {
    			this._close();
    		} else {
    			this._open();
    		}
    	},
    	_close : function() {
    		var $el = this.$el,
    			$parent = $el.parent();
    		if($parent.hasClass("open")) {
    			this._emit("hide",[this.$el]);
	    		$parent.removeClass("open");
                if(this.options.container){
                    this.$menu.hide();
                }
	    		this._emit("hidden",[this.$el]);
    		}
    	},
    	_open : function() {
    		var $el = this.$el,
    			$parent = $el.parent(),
                location,
                height;

            if($el.attr("disabled")==="disabled") {
                return;
            }
			if(!$parent.hasClass("open")) {
				this._emit("show",[this.$el]);
	    		$parent.addClass("open");

                //2017-01-04 eszhang add 内部自动判断边界
                location = Position.location($el, 'fixed');

                if(this.options.container){
                    this.$menu.show();
                    height   = this.$menu.outerHeight() + 5 + this.options.offset[1];
                }
               
                if(location.bottom < height){
                    if(this.options.container === 'body'){
                        this._setBodyPosition();
                    }else{
                        $parent.addClass('oas-dropdown-top');
                        this._setPosition();
                    }
                }else{
                    $parent.removeClass('oas-dropdown-top');
                    this._setPosition();
                }
	    		this._emit("shown",[this.$el]);
            }
    	},
    	// 对外方法
    	invoke: {
    		open : function() {
    			this._open();
    		},
    		close : function() {
    			this._close();
    		},
            destroy : function() {
                this.$el.unbind('.' + this.uiName).removeData(this.uiName);
                for(var i=0,len=dropdownArr.length;i<len;i++) {
                    if(dropdownArr[i]===this.$el) {
                        dropdownArr.splice(i,1);
                        if(this.options.container){
                            this.$menu.remove();
                        }
                    }
                }
            },
            setPosition : function() {
    			this._setPositionInvok();
    		}
    	}
    });

    $(document).on("click.oasDropdown",function(e) {
    	var $target = $(e.target),
    		closeArr = [];
        _.map(dropdownArr,function($el) {
            if($target.closest(".dropdown")[0]!==$el.closest(".dropdown")[0] || $target.closest(".btn-group")[0]!==$el.closest(".btn-group")[0]) {
                closeArr.push($el);
            }
        })
    	_.map(closeArr,function($el) {
            if($el.data('oasDropdown')) {
                $el.oasDropdown('close');
            }
        })
    });

    $('[data-toggle="oasDropdown"]').oasDropdown({});

    //为了兼容bootstrap方式
    $(document).on('click.dropdown','[data-toggle="dropdown"]',function(){
        if(!$(this).data("oasDropdown")){
            $(this).oasDropdown({
                miss:false
            }).oasDropdown("open");
        }
    })
    $(window).resize(function(){
        var adjustPosition = function(){
            $(':oasDropdown').each(function(){
                $(this).oasDropdown('setPosition');
            })
        };
        var fn = oasisl.throttle(adjustPosition,150);
       setTimeout(function(){
            fn();
        },200)
    });
}
},{"../../components/position/index":70}],37:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"268683e2dc8e0175c5e43534b7d0245f"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/filter/filter',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$each=$utils.$each,list=$data.list,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,$out='';$each(list,function($value,$index){
$out+=' <div class="seachbox-item"> <div class="oas-connection-item" data-name="';
$out+=$escape($value.name);
$out+='" data-id="';
$out+=$escape($value.id);
$out+='"> <span class="labels">';
$out+=$escape($value.label);
$out+='：</span> ';
$each($value.children,function($value,$index){
$out+=' <!-- <label class="oas-choose-btn " data-id="';
$out+=$escape($value.id);
$out+='" data-name="';
$out+=$escape($value.name);
$out+='"><input type="checkbox">';
$out+=$escape($value.label);
$out+='</label> --> <label class="oas-choose-btn" data-id="';
$out+=$escape($value.id);
$out+='" data-name="';
$out+=$escape($value.name);
$out+='"> <input type="checkbox"> <span>';
$out+=$escape($value.label);
$out+='</span> </label> ';
});
$out+=' <button class="btn btn-default btn-sm mixchoose-btn"><i class="glyphicon glyphicon-plus"></i>多选</button> <a href="javascript:;" class="mixchoose-quit">[退出多选]</a> <button class="btn btn-default btn-sm mixchoose-confirm">确定</button> </div> </div> ';
});
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],38:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"5642b680cd374598112d96762a1b42b5"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/filter/filter_bd',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,isOpen=$data.isOpen,$out='';$out+='<dt class="search-box-hd "> <label>所有筛选</label> <i class="division"></i> <div class="search-term-wrap clearfix"></div> <a href="javascript:;" class="searchbox-toggle ';
if(!isOpen){
$out+='closed';
}
$out+='">';
if(!isOpen){
$out+='展开筛选';
}else{
$out+='收起筛选';
}
$out+='</a> </dt> <dd class="search-box-bd" ';
if(!isOpen){
$out+='style="display:none"';
}
$out+='></dd>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],39:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"3db0215f15cb21f130c60389c7d178f8"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/filter/filter_sub',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$each=$utils.$each,list=$data.list,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,$out='';$out+='<div class="oas-connection-item"> <span class="labels"><i class="oasicon oasicon-swerve"></i></span> ';
$each(list,function($value,$index){
$out+=' <label class="oas-choose-btn" data-id="';
$out+=$escape($value.id);
$out+='" data-name="';
$out+=$escape($value.name);
$out+='"> <input type="checkbox"> <span>';
$out+=$escape($value.label);
$out+='</span> </label> ';
});
$out+=' <button class="btn btn-default btn-sm mixchoose-btn"><i class="glyphicon glyphicon-plus"></i>多选</button> <a href="javascript:;" class="mixchoose-quit">[退出多选]</a> <button class="btn btn-default btn-sm mixchoose-confirm">确定</button> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],40:[function(require,module,exports){

/*
 * @desc dropdown组件
 * @anthor pwang
 * @Date 2016-03-07
 */

var filterBdTpl  = require("./filter_bd.tpl"),
    filterTpl    = require("./filter.tpl"),
    filterSubTpl = require("./filter_sub.tpl");

module.exports = function(){

    var item = '.oas-choose-btn',
        mutiSelectBtn = '.mixchoose-btn',
        cancelMutiSelectBtn = ".mixchoose-quit",
        confirmBtn = '.mixchoose-confirm',
        openAndCloseBtn = '.searchbox-toggle',
        removeItem = ".search-term-close",
        searchBoxPool = ".search-box-bd";

    $.oasUiFactory("oasFilter", {
        VERSION: '1.0.0',
        options: {
            type : "tree", //tree or object
            data : null, //数据
            isOpen : true, //是否主动展开
            onChange : null //在变化的时候触发函数
        },

        events : {
            'click .searchbox-toggle' : function(self,evt) {
                var $self = $(self),
                    $el = this.$el;

                if($self.hasClass("closed")) {
                    $self.removeClass("closed");
                    $self.text("收起筛选");
                    $el.find(searchBoxPool).css("display","block");
                } else {
                    $self.addClass("closed");
                    $self.text("展开筛选");
                    $el.find(searchBoxPool).css("display","none");
                }
            },

            'click .mixchoose-btn' : function(self,evt) {
                var $self = $(self),
                    $connectionItem = $self.parent(".oas-connection-item");

                this._openMutiSelectMode($connectionItem);
            },

            'click .mixchoose-quit' : function(self,evt) {
                var $self = $(self),
                    $connectionItem = $self.parent(".oas-connection-item");

                this._quitMutiSelectMode($connectionItem,false);
            },

            'click .mixchoose-confirm' : function(self,evt) {
                var $self = $(self),
                    $connectionItem = $self.parent(".oas-connection-item");

                this._quitMutiSelectMode($connectionItem,true);
            },

            'click .oas-choose-btn' : function(self,evt) {
                var $self = $(self),
                    $connectionItem = $self.parent(".oas-connection-item");

                if(!$self.hasClass("active")&&!$connectionItem.hasClass("oas-mixchoose")) {
                    this._singleSelectLogic($self,evt);
                }
                if($self.hasClass("active")&&!$connectionItem.hasClass("oas-mixchoose")) {
                    evt.preventDefault();
                }
            },

            'click .search-term-close' : function(self,evt) {
                var $self = $(self),
                    $searchTerm = $self.closest(".search-term"),
                    $searchBoxItem;

                $searchBoxItem = $searchTerm.data("searchBoxItem");
                $searchBoxItem.find(".oas-choose-btn").removeClass("active").find("input").prop("checked",false);
                this._clearSub($searchBoxItem);
                $searchTerm.remove();
            }
        },

        _openMutiSelectMode: function($connectionItem){
            var $el = this.$el,
                $last = $el.find(".oas-mixchoose");
            this._quitMutiSelectMode($last,false);
            $connectionItem.addClass("oas-mixchoose");
            $connectionItem.find('.oas-choose-btn').addClass('beauty-check');
        },

        _quitMutiSelectMode: function($connectionItem,isConfirm) {
            if(isConfirm) {
                $connectionItem.find(item).each(function(index,item){
                    var $item = $(item);
                    $item.removeClass("active").find("input").prop("checked") && $item.addClass("active");
                })
                this._clearSub($connectionItem);
                this._updateTopWrap($connectionItem);
            } else {
                $connectionItem.find(item).each(function(index,item){
                    var $item = $(item);
                    $item.hasClass("active") ? 
                        $item.find("input").prop("checked",true) :
                        $item.find("input").prop("checked",false)
                })
            }
            $connectionItem.removeClass("oas-mixchoose").find('.oas-choose-btn').removeClass('beauty-check');
        },

        _singleSelectLogic : function($self,evt) {
            var data = this.options.data,
                onChange = this.options.onChange,
                $connectionItem = $self.closest(".oas-connection-item"),
                index = $(item).index($self),
                id = $self.attr("data-id"),
                selfObj = _.find(data,"id",id);

            $self.siblings(item).removeClass("active").end().addClass("active");
            $self.siblings(item).find("input").prop("checked",false).end().end().find("input").prop("checked",true);

            this._clearSub($connectionItem,index);
            onChange ? onChange(selfObj,$connectionItem) : this._renderSubData(selfObj,$connectionItem);
            this._updateTopWrap($connectionItem);
        },

        _renderSubData : function(selfObj,$connectionItem,dataFromInvoke) {
            var data = this.options.data,
                children = dataFromInvoke?dataFromInvoke:_.filter(data,"pid",selfObj.id),
                html;

            if(children.length>0) {
                html = filterSubTpl({list : children});
                $connectionItem.after(html);
            }
        },

        _convertObjToTree : function(data) {
            var i=0,len=data.length,id,arr=[];
            var getProp = function(obj,_pid,_id) {
                var name,label,pid,id;
                name = obj.name;
                label = obj.label;
                arr.push({
                    pid : _pid,
                    id : _id,
                    name : name,
                    label : label
                });
                console.log("pid:"+_pid+" "+"id:"+_id+" "+name+":"+label);
                pid = _id;
                if(obj.children) {
                    for(var i=0;i<obj.children.length;i++) {
                        id = pid + "-" +(i+1);
                        getProp(obj.children[i],pid,id);
                    }
                }
            }
            for(;i<len;i++) {
                id = (i+1)+"";
                getProp(data[i],"0",id);
            }
            return arr;
        },

        _createDom : function() {
            var $el = this.$el,
                data = this.options.data,
                data = data && this._adjustData(data),
                html,bd;
            bd = filterBdTpl({
                isOpen: this.options.isOpen
            });
            $el.addClass("oas-search-box").html(bd);
            html = filterTpl(data);
            $el.find(".search-box-bd").html(html);
        },

        _adjustData : function() {
            var data = this.options.data,
                type = this.options.type,
                ret = [];
            if(type==="obj") {
                data = this.options.data = this._convertObjToTree(data);
            }

            _.filter(data,"pid","0").map(function(obj) {
                var children = _.filter(data,"pid",obj.id);
                ret.push({
                    name : obj.name,
                    label : obj.label,
                    id : obj.id,
                    pid : obj.pid,
                    children : children
                })
            })
            return {list:ret};
        },

        _create: function(){
            var options = this.options,
                $el = this.$el,
                isOpen = options.isOpen,
                data = options.data,
                $searchboxToggle = $el.find(openAndCloseBtn);

            if(data) {
                this._createDom();
            }
            $el.find(".seachbox-item").each(function(index,item) {
                var filterName = $(item).find(".labels").text();
                $(item).attr("data-filter-name",filterName);
                $(item).find(".oas-connection-item:gt(0)").addClass("sub").css("display","none");
            })
            // if(!isOpen) {
            //     $searchboxToggle.addClass("closed");
            //     $searchboxToggle.text("展开筛选");
            //     $el.find(searchBoxPool).css("display","none");
            // }
        },
        _clearSub : function($connectionItem) {
            var $nextConnectionItem = $connectionItem.nextAll();
            if($connectionItem.hasClass("seachbox-item")) {
                $connectionItem.find(".oas-connection-item:gt(0)").find(item).find("input").prop("checked",false).end().removeClass("active").end().css("display","none");
            } else {
                $nextConnectionItem.remove();
            }
        },
        _updateTopWrap : function($connectionItem) {
            var $searchBoxItem = $connectionItem.closest(".seachbox-item"),
                labelName = $searchBoxItem.find(".labels").text(),
                searchBoxItem = this._getSearchBox($searchBoxItem),
                $searchTermWrap = this.$el.find(".search-term-wrap"),
                filterName = searchBoxItem.filterName,
                $append,temp,
                text = "";

            $searchTermWrap.find("[data-filter-name='"+filterName+"']").remove();
            searchBoxItem.data.map(function(obj) {
                if(obj.length>0) {
                    text = text + obj.join("，") + "&nbsp;&nbsp;";
                }
            })
            text = searchBoxItem.name+text;
            temp = '<span class="search-term" data-filter-name="'+filterName+'">'
                        +'<span>'+text+'</span>'
                        +'<a href="javascript:;" class="search-term-close oasicon oasicon-fail"></a>'
                    +'</span>';
            $append = $(temp).data("searchBoxItem",$searchBoxItem);
            $searchTermWrap.append($append);
        },
        _getSelectedObj : function() {
            var options = this.options,
                $el = this.$el,
                data = this.options.data,
                retObj = [];
            $el.find(".seachbox-item").each(function() {
                var levelOne = [],
                    $this = $(this),
                    name = $this.find(".labels").text().slice(0,-1);

                $this.find(".oas-connection-item").each(function() {
                    var levelTwo = [],
                        $this = $(this);
                    $this.find(".oas-choose-btn.active").each(function() {
                        var $this = $(this),
                            obj;

                        obj = $this.data();
                        levelTwo.push(obj);
                    });
                    levelTwo.length>0 && levelOne.push(levelTwo);
                })
                retObj.push({
                    name : name,
                    tree : levelOne
                })

            })
            return retObj;
        },
        _getSearchBox : function($searchBoxItem) {
            var labelName = $searchBoxItem.find(".labels").text(),
                filterName = $searchBoxItem.attr("data-filter-name"),
                connectionItemArr = [];
            $searchBoxItem.find(".oas-connection-item").each(function() {
                var arr = [],
                    $this = $(this);
                $(this).find(".oas-choose-btn.active").each(function() {
                    var $this = $(this);
                    arr.push($this.text());
                })
                arr && connectionItemArr.push(arr);
            })
            return {
                name : labelName,
                filterName : filterName,
                data : connectionItemArr
            }
        },
        // 对外方法
        invoke: {
            setSubData : function(selfObj,$connectionItem,dataFromInvoke) {
                this._renderSubData(selfObj,$connectionItem,dataFromInvoke);
            },
            getSelectedObj : function() {
                return this._getSelectedObj();
            }
        }
    }); 

}
},{"./filter.tpl":37,"./filter_bd.tpl":38,"./filter_sub.tpl":39}],41:[function(require,module,exports){
/*
 * @desc formtip组件
 * @anthor jyye
 * @Date 2016-04-06
 */

var validate  = require("../../../plugins/jquery-validate/jquery.validate.js");

module.exports = function(){
	
    $.oasUiFactory("oasFormTip", {
        options: {

        },

         _create : function(_container) {
            var $el = this.$el, options = this.options, self = this;
            this.$remind, this.$error;
            this.upArrow = false;
            //图标
            //提示结构生成
            this.$remind = this._createFormTip();
            this.$error = this._createErrorFormTip();
            
            //判错误通提示
            if($el.attr("oaserrormsg") != null ){
                $el.parent().addClass("has-error");
            }
            this._bindEvent(this.$remind, this.$error, _container);
        },
        /**
         *普通提示
         */
        _createFormTip : function() {
            var $formTip = $('<div class="oas-formtip"><div class="formtip-arrow"></div><div class="formtip-inner"></div></div>');
            return $formTip;
        },
        /**
         *错误提示
         */
        _createErrorFormTip : function() {
            var $formTip = this._createFormTip();
            $formTip.addClass("oas-error");
            return $formTip;
        },
        /**
         *定位
         */
        _setPosition : function($el, $obj) {
            this._setUpArrow($el.offset().top, $obj.height());
            if (this.upArrow) {
                $obj.addClass("bottom").removeClass("top");
                $obj.css({
                    position : "absolute"
                }).offset({
                    top : $el.offset().top + $el.height() + 14,
                    left : $el.offset().left 
                })
            } else {
                $obj.addClass("top").removeClass("bottom");
                $obj.css({
                    position : "absolute"
                }).offset({
                    top : $el.offset().top - $obj.height() -14,
                    left : $el.offset().left 
                });
            }
        },
        /**
         *绑定事件
         */
        _bindEvent : function($remind, $error, _container) {
            var $el = this.$el, options = this.options, self = this;
            $el.off("mouseover");
            $el.on("mouseover", function() {//聚焦和模糊
                if($(this).attr("oaserrormsg") != null){
                    $remind.remove();
                    _container ? _container.append($error) : $("body").append($error);
                    $error.css('max-width',$el.outerWidth());
                    $(".formtip-inner", $error).text($(this).attr("oaserrormsg"));
                    self._setPosition($(this), $error);
                    $error.show();
                }else if ($(this).attr("oasmsg") != null) {
                    _container ? _container.append($remind) : $("body").append($remind);
                    $remind.css('max-width',$el.outerWidth());
                    $(this).unbind("hover");
                    $(".formtip-inner", $remind).text($(this).attr("oasmsg"));
                    self._setPosition($(this), $remind);
                    $remind.show();
                }
            }).on("mouseout", function() {
                $remind.remove();
                $error.remove();
                
            });
        },
         /**
         * 判断箭头方向
         */
        _setUpArrow : function(_top, _height) {
            if (_top -12 < _height) {
                this.upArrow = true;
            } else {
                this.upArrow = false;
            }
        },
        // 组件对外方法集
        invoke: {
             message : function(_msg, _type, _container) {
                var $el = this.$el;
                switch(_type) {
                    case "oasmsg":
                        _msg = _msg ? _msg : "";
                        $el.attr("oasmsg",_msg);
                        break;
                    case "oaserrormsg":
                        _msg = _msg ? _msg : "";
                        $el.attr("oaserrormsg",_msg);
                        break;
                    default: 
                        _msg = _msg ? _msg : "";
                        $el.attr("oasmsg",_msg);
                        break;

                }
                this._create(_container);
            },
            remove : function(_type){
                var $el = this.$el;
                if(_type === "oaserrormsg"){
                    $el.parent().removeClass("has-error");
                    $el.removeAttr("oaserrormsg");
                    this.$error.remove();
                }else if(_type === "oasmsg"){
                    $el.removeAttr("oasmsg");
                    this.$remind.remove();
                }else{
                    $el.parent().removeClass("has-error");
                    $el.removeAttr("oaserrormsg");
                    $el.removeAttr("oasmsg");
                    this.$error.remove();
                    this.$remind.remove();
                }
                this._create();
            }
        }
    });
    //初始化表单
    $('form input[type=text],form input[type=password],form input[type=search],form input[type=url],form input[type=tel],form input[type=email],form input[type=number],form textarea').oasFormTip();
    //构建OasFormTip方法
    var global = window;
    global.OasFormTip = {};
    global.OasFormTip.open =function(element,message,type, container){
        $(element).oasFormTip();
        $(element).oasFormTip('message',message, type, container);
    }
    global.OasFormTip.remove =function(element,type){
        if(element){
            $(element).oasFormTip();
            $(element).oasFormTip('remove', type);
        }else{
            $('body').find(":oasFormTip").oasFormTip('remove');
        }
    }
    // // 兼容validator表单验证。
    if($.validator){
        $.extend( $.validator.messages, {

            dateISO: "请输入正确格式的日期格式 ( ISO ).",
            creditcard: "请输入正确格式的信用卡号",
            isIP: "请输入正确格式的IP",
            isMAC: "请输入正确格式的MAC",
            isIdCard: "请输入正确格式的身份证号",
            isMobile: "请输入正确格式的电话号码",
            isSpecialStr: "请输入正确格式的字符串",
 

        });
        
        $.validator.setDefaults({
        
            showErrors: function(errorMap, errorList){
                var $container = this.settings.container;
                if(!!errorList.length){
                    for(var i = 0, len = errorList.length; i < len; i++){
                        var element = errorList[i].element;
                        OasFormTip.open(element,errorList[i].message,'oaserrormsg', $container);
                    }

                    var first = errorList[0].element;
                    if($(first).parents('.layui-layer').length === 0){
                        // scroll to first error element
                        var scrollable = oasisl.util.getScrollParent(first);
                        $(scrollable).parent().scrollTop($(first).position().top + $(scrollable).parent().scrollTop());
                    }else{
                        // scroll to first error element
                        var scrollable = oasisl.util.getScrollParent(first);
                        $(scrollable).scrollTop($(first).position().top + $(scrollable).parent().scrollTop());
                    }
                    
                }else{
                    OasFormTip.remove(this.lastElement);
                }
            }
        });
    }
}
},{"../../../plugins/jquery-validate/jquery.validate.js":105}],42:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"017c9dad011f67af487eb5e91f107fc9"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTest2/colfilter',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,filters=$data.filters,$escape=$utils.$escape,name=$data.name,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$out='';$out+=' ';
if(filters&&filters.length>0){
$out+=' <div class="oas-grid-dropdown-filter" data-col-name="';
$out+=$escape(name);
$out+='"> <ul class="grid-filter-select-area"> ';
$each(filters,function($value,$index){
$out+=' <li ';
if($value.disabled){
$out+='class="filter-disabled"';
}
$out+='> <label class="beauty-check"> <input type="checkbox" value="';
$out+=$escape($value.value);
$out+='" ';
if((!$value.disabled)&&$value.checked){
$out+='checked';
}
$out+=' ';
if($value.disabled){
$out+='disabled';
}
$out+='> <span>';
$out+=$escape($value.text);
$out+='</span> </label> </li> ';
});
$out+=' </ul> <div class="grid-filter-operator-area chearfix"> <a href="javascript:;" class="grid-filter-btn grid-filter-confirm">确定 </a> <a href="javascript:;" class="grid-filter-btn grid-filter-reset">重置</a> </div> </div> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],43:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"0888f7c0aca7d57103d48068c31d963b"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTest2/filter',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,checkedbox=$data.checkedbox,head=$data.head,hasExpand=$data.hasExpand,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,colOpts=$data.colOpts,$out='';$out+='  ';
if(checkedbox || (head.front.data.length > 0 || hasExpand)){
$out+=' <div class="grid-front-fixed"> <table> <colgroup> ';
if(checkedbox || hasExpand){
$out+=' <col width="40"> ';
}
$out+=' <!--';
$each(head.front.data,function($value,$index){
$out+=' <col width="';
if($value._minWidth_){
$out+='*';
}else{
$out+=$escape($value.width);
}
$out+='"> ';
});
$out+='--> ';
$each(head.front.colgroup,function($value,$index){
$out+=' <col width="';
if($value === true){
$out+='*';
}else{
$out+=$escape($value);
}
$out+='"> ';
});
$out+=' </colgroup> <thead> <tr> ';
if(checkedbox || hasExpand){
$out+=' <th></th> ';
}
$out+=' ';
$each(head.front.data,function($value,$index){
$out+=' <th name="';
$out+=$escape($value.name);
$out+='"> <div class="oas-grid-th"> <div class="form-clear"> <input type="text" class="form-control" placeholder=""> <i class="delete-btn oasicon oasicon-search"></i> </div> </div> </th> ';
});
$out+=' </tr> </thead> </table> </div> ';
}
$out+='  ';
if(head.center.data.length > 0){
$out+=' <div class="grid-main"> <table> <!--';
$each(head.center.data,function($value,$index){
$out+=' <col width="';
if($value._minWidth_){
$out+='*';
}else{
$out+=$escape($value.width);
}
$out+='"> ';
});
$out+='--> <colgroup> ';
$each(head.center.colgroup,function($value,$index){
$out+=' <col width="';
if((!head.multipleHeader)&&(head.hasMinWidth!==false)&&($index==head.hasMinWidth)){
$out+='*';
}else{
$out+=$escape($value);
}
$out+='"> ';
});
$out+=' </colgroup> <thead> <tr> ';
$each(head.center.data,function($value,$index){
$out+=' <th name="';
$out+=$escape($value.name);
$out+='"> <div class="oas-grid-th"> <div class="form-clear"> <input type="text" class="form-control" placeholder=""> <i class="delete-btn oasicon oasicon-search"></i> </div> </div> </th> ';
});
$out+=' </tr> </thead> </table> </div> ';
}
$out+='  ';
if(colOpts.data || (head.finale.data.length > 0)){
$out+=' <div class="grid-finale-fixed"> <table> <colgroup> <!--';
$each(head.finale.data,function($value,$index){
$out+=' <col width="';
if($value._minWidth_){
$out+='*';
}else{
$out+=$escape($value.width);
}
$out+='"> ';
});
$out+='--> ';
$each(head.finale.colgroup,function($value,$index){
$out+=' <col width="';
if($value === true){
$out+='*';
}else{
$out+=$escape($value);
}
$out+='"> ';
});
$out+=' ';
if(colOpts.data){
$out+=' <col width="';
$out+=$escape(colOpts.width);
$out+='"> ';
}
$out+=' </colgroup> <thead> <tr> ';
$each(head.finale.data,function($value,$index){
$out+=' <th name="';
$out+=$escape($value.name);
$out+='"> <div class="oas-grid-th"> <div class="form-clear"> <input type="text" class="form-control" placeholder=""> <i class="delete-btn oasicon oasicon-search"></i> </div> </div> </th> ';
});
$out+=' ';
if(colOpts.data ){
$out+=' <th> </th> ';
}
$out+=' </tr> </thead> </table> </div> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],44:[function(require,module,exports){

/*
 *  oasGrid
 *  @ version 0.0.1
 *  @ create 2017-08-08
 */

var tableTpl 		= require("./table.tpl"),
	theadTpl 		= require("./thead.tpl"),
	tbodyTpl 		= require("./tbody.tpl"),
    filterTpl       = require("./filter.tpl"),
    colfilterTpl    = require("./colfilter.tpl"),
	tbodyNoDataTpl  = require("./tbodyNoData.tpl"),
    simpleTableTpl  = require("./simpleTable.tpl"),
    simpleTbodyTpl  = require("./simpleTbody.tpl"),
    simpleTheadTpl  = require("./simpleThead.tpl");


module.exports = function(){

    $.oasUiFactory("oasGrid", {

    	version: "0.0.2",

    	options: {

    		// 表格类型
    		type: "normal",

    		// 表格头部
    		head: null,

    		// 表格体数据
    		body: null,

            //远程数据源
    		url: null,

            //是否有分页
    		pagin: true,

            //分页信息
    		pagination: {
				current: 1,
				pageItems: 10
			},

    		// 表格顶部的操作数据，包含按钮和搜索
    		optsBar: {
    			buttons: null,
    			filter: {
    				show: false,
    				keyword: "输入您想查询的关键词"
    			}
    		},

            height: "auto",
            // height: 200,

    		// 表格的首尾列固定，checkbox和尾部操作不计算在内
            fixedColumn: null,

    		// 是否默认渲染表格
    		autoRender: true,

    		// 是否支持checkbox
    		checkedbox: false,

    		// 是否有斑马线
    		striped: false,

    		// 是否禁止单元格折行
    		nowrap: true,

    		// 是否支持多字段排序
    		multiSort: false,

    		// 是否支持列筛选
    		colFilter: false,

            // 是否支持列拖拽
            colDrag: false,

            //表格是否有边框
            hasBorder: false,

            //是否单选
    		singleSelect: true,

    		// 头部固定设置（已去掉改功能）
    		headFixed: {
    			show: false,
    			fixedTop: 10
    		},

    		// 表格行操作
    		colOpts: {
    			type: "normal",
    			data: null,
    			width: 150
    		},

    		// 每层缩进的宽度
    		indentSize: 22,

    		// 横向或纵向支持滚动
    		scroll: null,

    		//模板
    		template: {
    			/**
                 * 表格模型的模版
                 * type String or Object
                 * String： create，update，detail都为此模版
                 * Object: 包含create，update，detail三个模版
                 */
                modelTpl: null,

                //无数据样式
                noDataTpl: null
    		},

            //新增表格转图表配置项
            chartConverter: {
                show: false,
                renderAt: null,
                renderDialog: {
                    title: "图表展示",
                    width: "80%",
                    height: "80%"
                },

                autoRender: false,
            }
    	},

        //验证option格式并转换相关参数兼容v0.0.1版本
        _validateOption: function(){

            var options      = this.options,
                opts         = options.opts,
                settings     = options.settings,
                headSettings = options.headSettings,
                modelTpl     = options.modelTpl,
                nodataTpl    = options.nodataTpl,
                fixedColumn;
            
            //开始兼容0.0.1配置项
            (options.checkbox !== undefined) && (options.checkedbox = options.checkbox);
            (opts             !== undefined) && (options.optsBar.buttons = opts);
            (nodataTpl        !== undefined) && (options.template.nodataTpl = nodataTpl);
            
            if(settings){
                (settings.filter      !== undefined) && (options.optsBar.filter.show    = settings.filter);
                (settings.filterWords !== undefined) && (options.optsBar.filter.keyword = settings.filterWords);
            }
            
            if(headSettings){

                (headSettings.fixedColumn !== undefined) && (options.fixedColumn = headSettings.fixedColumn);
                (headSettings.multiSort   !== undefined) && (options.multiSort   = headSettings.multiSort);
                (headSettings.isColDrag   !== undefined) && (options.colDrag     = headSettings.isColDrag);               
            }          
            
            if(modelTpl){
                if(_.isObject(modelTpl)){
                    options.template.modelTpl = {};                   
                    for (var action in modelTpl) {
                        $tplDom = $('#' + modelTpl[action]);
                        options.template.modelTpl[action] = {
                            content: $tplDom.html(),
                            width: $tplDom.attr('width'),
                            height: $tplDom.attr('height')
                        }
                    }
                }else{
                    options.template.modelTpl = {};
                    options.template.modelTpl.create =  options.template.modelTpl.update = options.template.modelTpl.detail = {
                        content: $('#' + modelTpl).html(),
                        width: $('#' + modelTpl).attr('width'),
                        height: $('#' + modelTpl).attr('height')
                    }
                }
            }

            fixedColumn = options.fixedColumn;

            if((!(_.isArray(fixedColumn)&&fixedColumn.length === 2)) || options.type === "simple"){

                options.fixedColumn = [0,0];
            }
            
            if(!options.url){
                options.pagin = false;
            }
        },

        //查找tr具有所属关系的下标 startIndex==endIndex为无子元素
        searchChildIndexs: function($tr){
            var $el          = this.$el,
                $trs         = $tr.closest("table").find("tr"),  
                matchArr     = $tr[0].className.match(/(oas-grid-level-(\d*))/),
                startIndex   = $tr.index(),
                $nextAllTrs  = $tr.nextAll(), 
                endIndex     = $trs.length,
                _matchArr_;
            
             $nextAllTrs.each(function(i, dom){
                _matchArr_ = dom.className.match(/(oas-grid-level-(\d*))/);

                if( _matchArr_[2] <= matchArr[2]){
                     endIndex = $trs.index($(this));
                     return false;
                }                                  
                
             })

             return [startIndex+1,endIndex];
        },

        //查找父元素 -1为无父元素
        searchParentIndex: function($tr){
            var $el          = this.$el,
                $trs         = $tr.closest("table").find("tr"),  
                matchArr     = $tr[0].className.match(/(oas-grid-level-(\d*))/),
                $prevAllTrs  = $tr.prevAll(),
                index        = -1, 
                _matchArr_;
            
              $prevAllTrs.each(function(i, dom){
                _matchArr_ = dom.className.match(/(oas-grid-level-(\d*))/);

                if( _matchArr_[2] < matchArr[2]){
                     index = $trs.index($(this));
                     return false; 
                }                                  
                
             })

             return index;
        },

        /*
         * 事件管理
         */
        events: {

            //checkbox操作
            "click .oas-grid-checkbox [type='checkbox']": function(self, evt){
                var $el     = this.$el,
                    that    = this,
                    $input  = $(self),
                    checked = $input.prop("checked"),
                    $tr     = $input.closest("tr"),
                    index   = $tr.index();
                
                var dataManage   = this.dataManage,
                    tempBody     = dataManage.data.body.tempBody,
                    bodyDataArr  = dataManage.data.body.bodyDataArr,
                    $updateModel =  $el.find('.oas-grid-head [data-role="updateModel"]');

                var selectIndexs = [];

                var $bodyCheckboxs = $el.find(".oas-grid-tbody .grid-front-fixed .oas-grid-checkbox input[type=checkbox]"),
                    $bodyTables    = $el.find(".oas-grid-tbody table");
                
                //全选
                if($(self).closest(".oas-grid-thead").length>0){
                    $bodyCheckboxs.not(":disabled").prop("checked",checked);

                }else{
                    
                    var  $trDom      = $bodyTables.find("tr:eq("+index+")"),
                         matchArr    = $(self).closest("tr")[0].className.match(/(oas-grid-level-(\d*))/),
                         checkboxLen,
                         checkedLen;
                    
                    //这一段的逻辑暂时不需要
                    //子集操作 
                    // var childrenIndexs = this.searchChildIndexs($tr),
                    //     startIndex     = childrenIndexs[0],
                    //     endIndex       = childrenIndexs[1],                     
                    //     $childrenTr    = $el.find(".oas-grid-tbody .grid-front-fixed tr").slice(startIndex,endIndex);
                                          
                    // $childrenTr.find("input[type='checkbox']:not(:disabled)").prop("checked",checked);

                   //父集操作
                    // ergodicParentCheck($tr);
                    
                    checkboxLen = $bodyCheckboxs.filter(":not(:disabled)").length,
                    checkedLen  = $bodyCheckboxs.filter(":not(:disabled):checked").length,
                    

                    $el.find(".oas-grid-thead .grid-front-fixed .oas-grid-checkbox input[type=checkbox]").prop("checked",checkboxLen === checkedLen);

                }

                //更新下状态
                $bodyCheckboxs.filter(":not(:disabled)").each(function(i, dom){

                    var $trDom =  $bodyTables.find("tr.oas-grid-row:eq("+i+")");                    
                    if($(this).is(":checked")){
                         $trDom.addClass("oas-grid-active");
                         selectIndexs.push($el.find(".oas-grid-tbody .grid-front-fixed tr.oas-grid-row").index($(this).closest("tr")));
                    }else{
                        $trDom.removeClass("oas-grid-active");
                    }
                })

                function ergodicParentCheck($tr){
                    var parentIndex = that.searchParentIndex($tr),
                        $parentTr,
                        siblingIndexs;

                    if(parentIndex === -1){
                        siblingsTrs = $(self).closest("table").find("."+matchArr[1])
                    }else{
                        $parentTr     = $el.find(".oas-grid-tbody .grid-front-fixed tr").eq(parentIndex);
                        siblingIndexs = that.searchChildIndexs($parentTr);
                        siblingsTrs   = $el.find(".oas-grid-tbody .grid-front-fixed tr").slice(siblingIndexs[0],siblingIndexs[1]);
                    }

                    var siblingsCheckboxLen = siblingsTrs.find("input[type='checkbox']:not(:disabled)").length,
                        siblingsCheckLen    = siblingsTrs.find("input[type='checkbox']:not(:disabled):checked").length;
                    
                    if(parentIndex !== -1){

                        $parentTr.find("input[type='checkbox']:not(:disabled)").prop("checked",siblingsCheckboxLen === siblingsCheckLen);
                        ergodicParentCheck($parentTr);
                    }
                };

                if(selectIndexs.length>1){
                    $updateModel.addClass("disabled")
                }else{
                    $updateModel.removeClass("disabled")
                }
                
                dataManage.updateCheckboxArray(selectIndexs);
                
                rowIndex = $(self).closest("table").find("tr.oas-grid-row").index($tr);
                
                var changeArguments = [rowIndex];
                if(rowIndex !== -1){
                    changeArguments.push(tempBody[rowIndex].data);
                    changeArguments.push(bodyDataArr[rowIndex]);
                }
                this._emit("checkedChange", changeArguments);
                
                //这里未完待续
            },

            // sort排序操作
            "click .sort-icon": function(self, evt){
                var that      = this,
                    options   = this.options,
                    multiSort = options.multiSort,
                    url       = options.url,
                    $el       = this.$el,
                    $th       = $(self).closest('th'),
                    sortName  = $th.attr("name"),
                    sortType      =  self.className.match(/sort|asc|desc/g)[1],
                    newSortType;

                var sortMap       = {},
                    sortArguments = [];

                $th.addClass('is-sorted');
                switch(sortType){
                    case 'sort':
                        $(self).removeClass('oasicon-sort').addClass('oasicon-desc');
                        newSortType = 'desc';
                        break;
                    case 'desc':
                        $(self).removeClass('oasicon-desc').addClass('oasicon-asc');
                        newSortType = 'asc';
                        break;
                    default:
                        $(self).removeClass('oasicon-asc').addClass('oasicon-sort');
                        newSortType = null;
                        $th.removeClass('is-sorted');
                        break;
                }

                if(!multiSort){
                    //2016-6-14 eszhang改 增所有固定不能同时排序
                    $el.find('th').not($th).removeClass('is-sorted').find('.sort-icon').removeClass('oasicon-desc oasicon-asc').addClass('oasicon-sort');
                    sortArguments = [sortName, newSortType]
                 }else{
                    $el.find(".oas-grid-thead .is-sorted .sort-icon").each(function(i, dom){
                        sortName  = $(this).closest('th').attr("name")
                        sortType      = dom.className.match(/sort|asc|desc/g)[1];

                        if(sortType === "asc" || sortType === "desc"){
                            sortMap[sortName] = sortType;
                        }
                    });
                    sortArguments = [sortMap]
                 }

                if(url) {
                    this.urlManage.reload({
                        sortname: sortName,
                        sortorder: newSortType
                    })
                   
                }              

                 this._emit('sort',sortArguments);
                // evt.preventDefault();
            },

            // filter 过滤操作
            "click .filter-icon": function(self, evt){
                var that      = this,
                    options   = this.options,
                    $el       = this.$el,
                    $th       = $(self).closest('th'),
                    name      = $th.attr("name"),
                    filters,
                    colObj;
                
                var dataManage = this.dataManage;

                colObj = dataManage.getHeadObj(name)

                filters = colObj.filters;

                if(_.isArray(filters)){

                    var filterIconTop  = $(self).offset().top,
                        filterIconLeft = $(self).offset().left,
                        tableTop       = $el.find(".oas-grid").offset().top,
                        tableLeft      =  $el.find(".oas-grid").offset().left;

                    $el.find(".oas-grid")
                       .find(".oas-grid-dropdown-filter").remove().end()
                       .append(colfilterTpl({
                            name: name,
                            filters: filters
                    }));

                    $el.find(".oas-grid-dropdown-filter").css({
                        top:  filterIconTop - tableTop + 10,
                        left: filterIconLeft - tableLeft +10
                    })
                    
                }
                
                
            },

            "click .grid-filter-confirm": function(self, evt){

                var options   = this.options,
                    colFilter = !!this.options.colFilter,
                    url       = options.url,
                    filterMap = {},
                    key,
                    $dfDropdown,
                    $checked,
                    filters,
                    filterCondition; 

                var dataManage  = this.dataManage;

                $dfDropdow = $(self).closest(".oas-grid-dropdown-filter");
                key        = $dfDropdow.data("col-name"),   
                $checked   = $dfDropdow.find("input[type='checkbox']:not(:disabled):checked");

                filters = filterMap[key] = [];

                $checked.each(function(i, dom){
                    filters.push($(this).val())
                });
                
                $dfDropdow.hide();

                dataManage.filterData(filterMap,colFilter);
                filterCondition = dataManage.getFilterCondition();
                
                if(url) {
                    this.urlManage.reload({ 
                        filters:  filterCondition
                    })
                   
                }

                this._emit("colFilter",[filterCondition])
            },

            "click .grid-filter-reset": function(self, evt){

                var options   = this.options,
                    colFilter = !!this.options.colFilter,
                    url       = options.url,
                    filterMap = {},
                    key,
                    $dfDropdown,
                    $checked,
                    filters,
                    filterCondition; 

                var dataManage  = this.dataManage;

                $dfDropdow = $(self).closest(".oas-grid-dropdown-filter");
                key        = $dfDropdow.data("col-name"),   
                $checked   = $dfDropdow.find("input[type='checkbox']:not(:disabled):checked");

                filters = filterMap[key] = [];

                $dfDropdow.find("input[type='checkbox']:not(:disabled):checked").prop("checked",false);

                $dfDropdow.hide();

                dataManage.filterData(filterMap,colFilter);
                filterCondition = dataManage.getFilterCondition();
                
                if(url) {
                    this.urlManage.reload({ 
                        filters:  filterCondition
                    })
                   
                }

                this._emit("colFilter",[filterCondition])
            },

            // 表格操作按钮点击事件
            "click .oas-grid-opt-btn": function(self, evt){
                var index,
                    options = this.options,
                    optsBar = this.options.optsBar;
                if(!$(self).hasClass('oas-disabled')){
                    index = $(self).index();
                    this._emit("optsClick", [index,optsBar.buttons[index],this.dataManage.getSelectedData()]);
                }
            },

            // 行操作事件
            "click .oas-grid-colopt-btn": function(self, evt){
                var index,
                    options = this.options,
                    colOpts = options.colOpts,
                    $el     = this.$el,
                    $trDom  = $(self).closest("tr"),
                    trIndex,
                    colOptIndex;
                
                var dataManage  = this.dataManage,
                    tempBody    = dataManage.data.body.tempBody,
                    bodyDataArr = dataManage.data.body.bodyDataArr;

                if(!$(self).hasClass('oas-disabled')){
                    index       = $(self).index();
                    trIndex     = $el.find(".oas-grid-tbody .grid-finale-fixed tr.oas-grid-row").index($trDom);
                    colOptIndex = colOpts.data.length > 1 ? trIndex : 0;            
                    this._emit('colOptsClick', [trIndex,tempBody[trIndex].data,bodyDataArr[trIndex],colOpts.data[colOptIndex][index]]);
                }
                              
            },

            //tr mouseenter事件
            "mouseenter tr:not('.oas-grid-disabled')": function(self, evt){
                var $tbody = this.$el.find('.oas-grid-tbody'),
                    index  = $(self).index();;
                if(!!$(self).closest('.oas-grid-tbody').length){
                    $tbody.find('table').each(function(i, element){
                        $(this).find('tr').eq(index).addClass('oas-grid-hover');
                    });
                }
            },

            //tr mouseleave事件
            "mouseleave tr:not('.oas-grid-disabled')": function(self, evt){
                (!!$(self).closest('.oas-grid-tbody').size())&&this.$el.find('.oas-grid-tbody tr').removeClass('oas-grid-hover');
            },
            
            //搜索框事件
            "mousedown #grid-search-btn": function(self, evt){

                var url = this.options.url,
                    val = _.trim($(self).prev().val());

                if(url) {
                    this.urlManage.reload({                       
                        pageNo: 1,
                        q: val
                    })
                   
                }  
                this._emit('search', [val]);
            },

            "mouseenter #grid-search-btn": function(self, evt){
                $(self).closest(".oas-grid-search").addClass('focus');
            },

            "mouseleave #grid-search-btn": function(self, evt){
                $(self).closest(".oas-grid-search").removeClass('focus');
            },

            "keypress #grid-search-input": function(self, evt){
                if(evt.which==13){
                    $(self).next().trigger("mousedown");
                }
            },

            "click .oas-grid-row-expand-icon": function(self, evt){
                var $el          = this.$el,
                    eventsManage = this.eventsManage,
                    $trDom       = $(self).closest("tr"),
                    matchArr     = $trDom[0].className.match(/(oas-grid-level-(\d*))/),                    
                    cssObj       = {display: null},
                    index;
                
                var childrenIndexs = this.searchChildIndexs($trDom),
                    startIndex     = childrenIndexs[0],
                    endIndex       = childrenIndexs[1];

                index = $trDom.index();

                if($trDom.hasClass("oas-grid-open-active")){
                   $trDom.removeClass("oas-grid-open-active");
                    $el.find(".oas-grid-tbody table").each(function(){
                        $(this).find("tr").slice(startIndex,endIndex)
                               .css({
                                   display: "none"
                               })
                               .removeClass("oas-grid-open-active");
                    })
                }else{
                    $trDom.addClass("oas-grid-open-active");
                    $el.find(".oas-grid-tbody table").each(function(){
                        $(this).find("tr").slice(startIndex,endIndex)
                               .filter(".oas-grid-level-"+(matchArr[2]-0+1))
                               .css({
                                    display: "table-row"
                                });
                    })
                }               
                
                eventsManage.fire("adjustGrid.oasGrid");
            },

            //列过滤事件(enter)
            "keypress .oas-grid-filter input": function(self,evt){

                var text;

                if(evt.which!=13)
                    return;
                
                text = $(self).val();

                $(self).next().trigger("click");
                $(self).val(text);            
                
            },

            "click .oas-grid-filter .delete-btn": function(self,evt){

                var $el       = this.$el,
                    options   = this.options,
                    colFilter = !!options.colFilter,
                    filterMap = {},
                    $tds,
                    key,
                    value,
                    filterCondition;

                var dataManage = this.dataManage;


                $tds = $(self).closest(".oas-grid-filter").find("th");

                $tds.each(function(){
                    key            = $(this).attr("name");
                    value          = _.trim($(this).find("input").val());
                    key&&value&&(filterMap[key] = [value]); 
                });               

                dataManage.filterData(filterMap,colFilter);
                filterCondition = dataManage.getFilterCondition();
                if(options.url){                   
                    this.urlManage.reload({ 
                        filters:  filterCondition
                    })
                }

                this._emit("colFilter",[filterCondition])
            },

            "click .oas-grid-tbody tr.oas-grid-row": function(self, evt){
                var $el          = this.$el,
                    options      = this.options,
                    singleSelect = options.singleSelect,                    
                    index        = $(self).index(),
                    selectIndexs = [],
                    $rowTrs,
                    rowIndex;

                var dataManage   = this.dataManage;
                    tempBody     = dataManage.data.body.tempBody,
                    bodyDataArr  = dataManage.data.body.bodyDataArr,
                    $updateModel =  $el.find('.oas-grid-head [data-role="updateModel"]');

                if(this.options.checkedbox || $(evt.target).closest(".oas-grid-row-expand-icon").length>0 || $(evt.target).closest(".oas-grid-checkbox").length>0 || $(evt.target).closest(".oas-grid-colopt-btn").length>0)
                    return;
              
    
                $el.find(".oas-grid-tbody table").each(function(){         
                    singleSelect&&$(this).find("tr").not(function(i){
                        if(i === index)
                            return this;
                    }).removeClass("oas-grid-active");

                    $(this).find("tr").eq(index).toggleClass("oas-grid-active");
                                      
                })

                $rowTrs  = $(self).closest("table").find("tr.oas-grid-row");
                rowIndex = $rowTrs.index($(self));

                $rowTrs.each(function(i, dom){
                    $(this).is(".oas-grid-active")&&selectIndexs.push(i);
                });

                if(selectIndexs.length>1){
                    $updateModel.addClass("disabled")
                }else{
                    $updateModel.removeClass("disabled")
                }

                dataManage.updateCheckboxArray(selectIndexs);              

                this._emit("rowSelected", [rowIndex,tempBody[rowIndex].data,bodyDataArr[rowIndex]]);
            },

            "click .oas-grid-head .oas-grid-chart-select>ul>li": function(self, evt){
                
                var chartType = $(self).data("chart-type");

                this.eventsManage.fire("gridChartRender.oasGrid",[chartType,true])
               
            },

            //支持url部分
            'click [data-role="createModel"]:not(".disabled")': function(){
                var that = this;
                setTimeout(function(){
                     that.urlManage.createModel();
                }, 0);
            },

            'click [data-role="updateModel"]:not(".disabled")': function(self, svt){
                var that        = this,
                    $el         = this.$el,
                    $trDom      = $(self).closest("tr"),
                    trIndex     = $el.find(".oas-grid-tbody .grid-finale-fixed tr.oas-grid-row").index($trDom);
                    dataManage  = this.dataManage,
                    bodyDataArr = dataManage.data.body.bodyDataArr;
                     
                setTimeout(function(){
                     that.urlManage.updateModel(bodyDataArr[trIndex] || that._iCall('getSelectedRow'));
                }, 0);
            },
            'click [data-role="deleteModel"]:not(".disabled")': function(self, svt){
                var that        = this,
                    $el         = this.$el,
                    $trDom      = $(self).closest("tr"),
                    trIndex     = $el.find(".oas-grid-tbody .grid-finale-fixed tr.oas-grid-row").index($trDom);
                    dataManage  = this.dataManage,
                    bodyDataArr = dataManage.data.body.bodyDataArr;
                setTimeout(function(){
                     that.urlManage.deleteModel(bodyDataArr[trIndex] || that._iCall('getSelectedRows'));
                }, 0);
            },
            'click [data-role="detailModel"]:not(".disabled")': function(self, svt){
                var that        = this,
                    $el         = this.$el,
                    $trDom      = $(self).closest("tr"),
                    trIndex     = $el.find(".oas-grid-tbody .grid-finale-fixed tr.oas-grid-row").index($trDom);
                    dataManage  = this.dataManage,
                    bodyDataArr = dataManage.data.body.bodyDataArr;
                setTimeout(function(){
                     that.urlManage.detailModel(bodyDataArr[trIndex]);
                }, 0);
            }

        },

        _initURLManage: function(){

            var self       = this,
                $el        = this.$el,
                options    = this.options,
                url        = options.url;
                modelTpl   = options.template.modelTpl,
                pagination = options.pagination,
                pagin      = options.pagin;

            
            
            this.urlManage = {

                url: null,

                modelTpl:  modelTpl,

                condition: pagination,

                model:  oasisl.baseModel.extend({
                    statics: {
                        baseUrl: this.options.url
                    }
                }),
                
                initModel: function(url){
                                       
                    var that = this,
                        _tpls,
                        condition;
                    
                    if(!url)
                         return;
                    
                    options.body = [];
                    this.url     = url;
                    
                    condition = this.condition = {pageNo: pagination.current, pageItems: pagination.pageItems};

                    this.model.list(condition).then(function(res){
                        self.dataManage.setBody(res.data);
                        that.initPagin({
                            pageNo: condition.pageNo,
                            pageItems: condition.pageSize,
                            records: res.page.totalRows
                        });
                    })
                },

                initPagin: function(condition){
                    var that = this;
                    if(!self.options.pagin) return;
                    $el.find('.oas-grid-pagin').oasPagin({
                        current: condition.page,
                        pageItems: condition.pageSize,
                        total: condition.records
                    }).on('pageNoChange.oasPagin', function(ev, page){
                        that.condition.pageNo = page;
                        that.model.list(that.condition).then(function(res){
                            self._iCall('data', [res.data]);
                        });
                    }).on('pageItemsChange.oasPagin', function(ev, pageItems){
                        that.condition.pageItems = pageItems;
                        that.model.list(that.condition).then(function(res){
                            self._iCall('data', [res.data]);
                        });
                    });
                },

                reload: function(condition){
                    var that = this;

                    if(!this.model) return;

                    condition = $.extend(this.condition, condition);
                    
                    this.model.list(condition).then(function(res){
                        self.dataManage.setBody(res.data);
                        $el.find('.oas-grid-pagin').oasPagin('total', res.page.totalRows);
                    });
                },
                
                createModel: function(){
                    var that          = this,
                        createSetting = this.modelTpl.create,
                        content       = createSetting.content;
                    if(_.isString(content)){
                        content =  template.compile(content)({})
                    }else if(_.isFunction(content)){
                        content =  template.compile(content())({});
                    }    
                    dialog.open({
                        title: '新建',
                        btn: ['确定', '取消'],
                        type: 1,
                        content: content,
                        area: [createSetting.width,createSetting.height],
                        yes: function(index){
                            var $form = $('#layui-layer'+ index).find('form');
                            if($form.length>0){
                                if(!$form.valid()) return;
                                var user = oasisl.form.objectify($form);
                                    that.addRowRemote(user, function(res){
                                        if(res.meta.status === 0){
                                            dialog.close(index);
                                        }
                                        self._emit('afterCreateModel', [res]);
                                    });
                            }
                         }
                     });
                },

                updateModel: function(row){
                    var that          = this,
                        updateSetting = this.modelTpl.update,
                        content       = updateSetting.content;

                    if(_.isString(content)){
                        content =  template.compile(content)(row)
                    }else if(_.isFunction(content)){
                        content =  template.compile(content(row))(row);
                    }

                    if(row) {

                        dialog.open({
                            title: '编辑',
                            btn: ['确定', '取消'],
                            type: 1,
                            content: content,
                            area: [updateSetting.width, updateSetting.height],
                            yes: function(index){
                                var $form = $('#layui-layer'+ index).find('form');
                                if($form.length>0){
                                    if(!$form.valid()) return;
                                    var user = oasisl.form.objectify($($form));
                                    user = $.extend({}, {id:row.id}, user);
                                    that.updateRowRemote(user,function(res){
                                        if(res.meta.status === 0){
                                            dialog.close(index);
                                        }
                                        self._emit('afterUpdateModel', [res]);
                                    });
                                }
                            }
                        })                       
                    }else{
                        dialog.msg('请指定需要修改的数据',{icon: 11});
                    }
                    
                },

                deleteModel: function(rows){

                    var that = this,
                        ids  = "";

                    rows&&(!_.isArray(rows))&&(rows=[rows]);

                    if(rows&&rows.length>0) {
                        dialog.confirm('确定要删除该条记录吗？', function(){

                            that.deleteRowRemote(_.pluck(rows, 'id').join(","), function(res){
                                self._emit('afterDeleteModel', [res]);
                            });
                            
                        });                       
                    }else{
                        dialog.msg('请指定需要删除的数据',{icon: 11});
                    }
                },

                detailModel: function(row){
                    var detailSetting = this.modelTpl.detail,
                        content       = detailSetting.content;

                        if(_.isString(content)){
                            content =  template.compile(content)(row)
                        }else if(_.isFunction(content)){
                            content =  template.compile(content(row))(row);
                        }
                    if(row) {
                        dialog.open({
                            title: '详情',
                            type: 1,
                            content: content,
                            area: [detailSetting.width, detailSetting.height],
                            btn: ['关闭']
                        });
                    }else{
                         dialog.msg('请指定需要查看的数据',{icon: 11});
                    }
                },

                addRowRemote: function(row, callback){
                    var that = this;
                    if(this.model) {
                        this.model.save(row).then(function(res){
                            if(res.meta.status === 0) {
                                dialog.msg('添加成功', {icon: 1})
                                that.reload();
                            }else{
                                dialog.msg(res.meta.message, {icon: 11})
                            }
                            callback && callback(res);
                        });
                    }
                },

                updateRowRemote: function(row, callback){
                    var that = this;
                    if(this.model) {
                        this.model.update(row).then(function(res){
                            if(res.meta.status === 0) {
                                dialog.msg('更新成功', {icon: 1})
                                that.reload();
                            }else{
                                dialog.msg(res.meta.message, {icon: 11})
                            }
                            callback && callback(res);
                        });
                    }
                },

                // 远程删除一行, 默认为选中的
                deleteRowRemote: function(row, callback){
                    var that = this;
                    if(arguments.length === 1){
                        callback = row;
                        row = null;
                    }
                    if(!this.model) return;
                    if(!row) {
                        row = this._iCall('getSelectedRow');
                    }
                    if(!row) {
                        dialog.msg('请选择一条数据',{icon: 11});
                        return;
                    }
                    this.model.destory(row).then(function(res){
                        if(res.meta.status === 0) {
                            dialog.msg('删除成功', {icon: 1})
                            that.reload();
                        }else{
                            dialog.msg(res.meta.message, {icon: 11})
                        }
                        callback && callback(res);
                    });
                },

                
                
            }

            this.urlManage.initModel(url);
            
        },

    	 /*
         *负责管理表格的重要数据
         */
        _initDataManage: function(data){

        	var self       = this,
        		options    = this.options,
                colOpts    = options.colOpts,
                checkedbox = options.checkedbox,
                colDrag    = options.colDrag;

            var eventsManage = this.eventsManage;

        	this.dataManage = {

        		data: {
                    head: null,
                    body: null,
                    hasExpand: false
                },

                _filterData_: {
                    condition: {},
                    head: null,
                    body: null,
                    hasExpand: false
                },

                headSettings: {
                   colgroup: [],
                   minColgroup: [],
                   maxLevel: -1
                },

                checked: {
                   selectIndexs: [],
                   selectRows: [],
                   selectObjRows: [] 
                },

                colDrag: colDrag,

                // colOpts: null,


        		init: function(data){

                    this.setData(data);
                    
        		},

        		setData: function(data){
                    
                    if(!data)
                        return;
        			this.data          = {head: null,body: null,hasExpand: false};                  
                    this._filterData   = {condition: {},head: null,body: null,hasExpand: false};
                    this.headSettings  = {colgroup: [],minColgroup: [],maxLevel: -1};
                    this.checked       = {selectIndexs: [],selectRows: [],selectObjRows: []};

                    //(多表头待考虑）
                    this._convertHeadData(data.head,data.body);
                    this._convertBodyData(this.data.head.headDataArr,data.body);                   

                    eventsManage.fire("gridInit.oasGrid",[this.data]);
        		},

                setBody: function(data){
                    var _data = this.data;

                    if(!data)
                        return;
                        
                     _data.body        = null;
                     _data.hasExpand   = false;
                     this._filterData  = {condition: {},head: null,body: null,hasExpand: false};
                     this.checked      = {selectIndexs: [],selectRows: [],selectObjRows: []};
                    
                    this._convertBodyData(_data.head.headDataArr,data);
                    eventsManage.fire("gridBodyRender.oasGrid",[_data.head,_data.body,_data.hasExpand]);                  
                },

                filterData: function(filterMap,flag){

                    //两种不同过滤

                    var that              = this,
                        fixedColumn       = options.fixedColumn,
                        frontFixedNum     = fixedColumn[0],
                        finaleFixedNum    = fixedColumn[1],
                        headDataLen       = this.data.head._head.length,
                        headDataArr       = this.data.head.headDataArr,
                        bodyDataArr       = this.data.body.bodyDataArr,
                        tempBody          = _.clone(this.data.body.tempBody,true),
                        filterTempBody    = [],
                        filterBodyDataArr = [],
                        condition         = this._filterData_.condition;
                    
                    //合并过滤条件
                    if(flag){
                        this._filterData_.condition = filterMap
                    }else{
                        
                        _.forEach(filterMap,function(value,key){

                            if(value.length === 0){
                                
                                 _(_.find(headDataArr, "name", key).filters||[]).forEach(function(m, mIndex){
                                    if(m.disabled!==true)
                                        delete m.checked;
                                 }).value();                            

                                delete that._filterData_.condition[key]
                            }else{

                                 _(_.find(headDataArr, "name", key).filters||[]).forEach(function(m, mIndex){
                                    
                                    if(m.disabled)
                                        return;
                                     m.checked = _.indexOf(value,m.value) !== -1;
                                        
                                 }).value();   
                                that._filterData_.condition[key] = value;
                            }
                        });
                    }

                },

        		getData: function(){
        			return this.data;
        		},

                getSelectedData: function(){
                    return this.checked;
                },

                getFilterCondition: function(){
                    return this._filterData_.condition;
                },

                getHeadObj: function(name){

                    var headDataArr = this.data.head.headDataArr;
                    
                    return _.find(headDataArr, "name", name);
                },

                updateCheckboxArray: function(indexs){
                    
                    var that = this;
                    
                    this.checked = {selectIndexs: [],selectRows: [],selectObjRows: []};

                    _(this.data.body.tempBody).forEach(function(m,mIndex){
                         if( _.indexOf(indexs,mIndex) !== -1){
                            m.checked = true;
                            that.checked.selectIndexs.push(mIndex);
                            that.checked.selectRows.push(m.data);
                            that.checked.selectObjRows.push(that.data.body.bodyDataArr[mIndex]);
                         }else{
                            m.checked = false;
                         }                        
                    }).value();

                    _(this.data.body.front.data).forEach(function(m,mIndex){
                         m.checked = _.indexOf(indexs,mIndex) !== -1                        
                    }).value();

                    _(this.data.body.center.data).forEach(function(m,mIndex){
                         m.checked = _.indexOf(indexs,mIndex) !== -1                        
                    }).value();

                    _(this.data.body.finale.data).forEach(function(m,mIndex){
                         m.checked = _.indexOf(indexs,mIndex) !== -1                        
                    }).value();                    

                },

                setColDrag: function(type){
                    options.colDrag = this.colDrag = !!type;
                    eventsManage.fire("setColDrag.oasGrid",[options.colDrag,this.head]);
                },

        		//调整表头数据
        		_convertHeadData: function(headData,body){

                    var fixedColumn    = options.fixedColumn,
                        frontFixedNum  = fixedColumn[0],
                        finaleFixedNum = fixedColumn[1],
                        headDataLen    = headData.length,
                        that           = this;
                        
                    var headDataArr = [],
                        maxLevel    = -1,
                        headDataArr,
                        headDataArrLen;

                    ergodiHead(headData);

                    //修正固定列数
                    if(maxLevel>0){
                        fixedColumn    = options.fixedColumn = [0,0];
                        frontFixedNum  = fixedColumn[0];
                        finaleFixedNum = fixedColumn[1];

                    }

                   //构造可以供模板遍历的list

                    var tempHead = [];
                    
          
                    _((headDataArr.reverse())).forEach(function(col,colIndex){

                        var _level_ = col._level_;
                        
                        col._diff_    = col._diff_ ? col._diff_ : 0;
                        col._rowspan_ = maxLevel - col._level_ - col._diff_ + 1;

                        if(_.isNumber(col._parentIndex_)){

                            var _index = headDataArr.length - col._parentIndex_ - 1;
                            if(!(headDataArr[_index]&&headDataArr[_index]._diff_&&headDataArr[_index]._diff_>col._diff_+col._rowspan_)){
                                headDataArr[_index]._diff_ =  (col._diff_ + col._rowspan_);
                            }                           
                        }
                        if(!_.isArray(tempHead[_level_]))
                           tempHead[_level_] = [];
                        tempHead[_level_].push(col);     
                    }).value();

                    _(tempHead).forEach(function(m,mindex){
                        m.reverse();
                    }).value();
                    headDataArr.reverse();
                    
                    //修正宽度
                    headDataArr    = _.filter(headDataArr, '_parent_', false);

                    //需在head的时候就要知道是否有子元素
                    _(body).forEach(function(m, mIndex){
                        if((m.children&&m.children.length>0) || (!!m.content)){
                             that.data.hasExpand = true;
                             return false;
                        }
                           
                    }).value();

                    this._calculateColumWidth(headDataArr);
                    
                    headDataArrLen = headDataArr.length;

                    var colgroup    = this.headSettings.colgroup,
                        minColgroup = this.headSettings.minColgroup;

                    this.headSettings.maxLevel = maxLevel;

                    var headObj = this.data.head = $.extend(true,this.data.head,{

                        _head: headData,

                        multipleHeader: maxLevel > 0,
                        
                        headDataArr: headDataArr,

                        tempHead: tempHead,

                        // maxLevel: maxLevel,

                        colgroup: colgroup,

                        minColgroup: minColgroup,

                        front:  {
                            data: headDataArr.slice(0, frontFixedNum),
                            width: 0,
                            colgroup: colgroup.slice(0, frontFixedNum)
                        },
                        center: {
                            data: headDataArr.slice(frontFixedNum, headDataArrLen - finaleFixedNum),
                            width: 0,
                            colgroup: colgroup.slice(frontFixedNum, headDataArrLen - finaleFixedNum)
                        },
                        finale: {
                            data: headDataArr.slice(headDataArrLen - finaleFixedNum, headDataArrLen),
                            width: 0,
                            colgroup: colgroup.slice(headDataArrLen - finaleFixedNum, headDataArrLen)
                        }
                    });                    

                    //计算宽度
                    headObj.front.width += ((options.checkedbox || this.data.hasExpand) ? 40 : 0);
                    (options.colOpts&&options.colOpts.type==='panel') && (options.colOpts.width = 100);

                    // _.forEach(headObj, function(n, key){

                    //     _(n.data || []).forEach(function(colData, colIndex) {

                    //         n.width += colData.width   

                    //     }).value();

                    // });

                    _.forEach(headObj, function(n, key){

                        _(n.colgroup || []).forEach(function(colWidth, colIndex) {

                            n.width += colWidth;  

                        }).value();

                    });

                    headObj.finale.width += (options.colOpts.data ? (options.colOpts.type === "panel" ? 100 : options.colOpts.width) : 0);

                    function ergodiHead(data){

                        var colClone,
                            childrenClone,
                            childrenCloneLen = 0;
                        
                        var cloneData = [];

                        _(data).forEach(function(col,colIndex){

                            colClone         =  _.clone(col, true)
                            childrenClone    =  _.clone(colClone.children,true);

                            childrenCloneLen = childrenClone&&childrenClone.length;

                            if(_.isNumber(colClone._level_)){
                                colClone._level_++;  
                            }else{
                                colClone._level_ = 0;
                            }

                            (maxLevel<colClone._level_)&&(maxLevel=colClone._level_);                            

                            delete colClone.children;
                             
                            headDataArr.push(colClone);

                            if(childrenCloneLen>0){
                                colClone.sort     = null;
                                colClone._parent_ = true;
                                _(childrenClone).forEach(function(m,mIndex){
                                    m._level_       = colClone._level_;
                                    m._parentIndex_ = headDataArr.length - 1;
                                }).value();
                                
                                var childrenDataClone = ergodiHead(childrenClone);

                                colClone._colspan_      = _.sum(childrenDataClone, "_childrenNum_") + childrenCloneLen;
                                colClone._childrenNum_  = childrenCloneLen;

                            }else{
                                colClone._parent_       = false;
                                colClone._colspan_      = 1;
                                colClone._childrenNum_  = 0;
                            }

                            cloneData.push(colClone);

                        }).value();

                        return cloneData;

                    }; 
        		},

                _convertBodyData: function(headData,bodyData){

                    var that           = this,
                        fixedColumn    = options.fixedColumn,
                        frontFixedNum  = fixedColumn[0],
                        finaleFixedNum = fixedColumn[1],
                        headDataLen    = headData.length;

                    var tempBody = [];
                    
                    var bodyDataArr = [];
                    
                    this.checked = {selectIndexs: [],selectRows: [],selectObjRows: []};                    

                    ergodicBody(bodyData);

                    _(bodyDataArr || []).forEach(function(rowData, rowIndex) {

                        var oneRow = {
                            _level_: rowData._level_,
                            _parent_: rowData._parent_,
                            // content: rowData.content,
                            checked: rowData.checked,
                            checkedabled: rowData.checkedabled,
                            data: [],
                        };                   
                        
                        // (rowData._parent_)&&(that.data.hasExpand = true);

                        var content = rowData.content;

                        if(_.isString(content)){
                            oneRow.content =  template.compile(content)(rowData)
                        }else if(_.isFunction(rowData.content)){
                            oneRow.content =  template.compile(content(rowData))(rowData);
                        }

                        checkedbox&&oneRow.checked&&(oneRow.checkedabled !== false)&&(that.checked.selectIndexs.push(rowIndex),that.checked.selectRows.push(oneRow.data),that.checked.selectObjRows.push(rowData));
                        //遍历col
                        _(headData || []).forEach(function(colData, colIndex) {

                            var value      = rowData[colData.name],
                                dataRender = colData.dataRender;

                            if(_.isString(dataRender)){

                                value = template.compile(dataRender)(rowData);
                            }else if(_.isFunction(dataRender)){
                                value = template.compile(dataRender(rowData))(rowData);
                            }

                            oneRow.data.push(value)

                        }).value();

                        tempBody.push(oneRow) 

                    }).value();

                    var bodyObj = this.data.body = {

                        _body: bodyData,

                        tempBody: tempBody,

                        bodyDataArr: bodyDataArr,

                        front:  {
                            data: []
                        },
                        center: {
                            data: []
                        },
                        finale: {
                            data: []
                        }
                    };                    

                    _(tempBody || []).forEach(function(rowData, rowIndex) {

                        var frontCeil,
                            centerCeil,
                            finaleCeil;

                        frontCeil = $.extend({},rowData);
                        frontCeil.data = rowData.data.slice(0, frontFixedNum);
                        bodyObj.front.data.push(frontCeil);

                        centerCeil = $.extend({},rowData);
                        centerCeil.data = rowData.data.slice(frontFixedNum, headDataLen - finaleFixedNum);
                        bodyObj.center.data.push(centerCeil);

                        finaleCeil = $.extend({},rowData);
                        finaleCeil.data = rowData.data.slice(headDataLen - finaleFixedNum, headDataLen);
                        bodyObj.finale.data.push(finaleCeil);

                    }).value(); 
                   
                    function ergodicBody(data){

                        var rowClone,
                            childrenClone,
                            childrenCloneLen = 0;

                        _(data).forEach(function(row,rowIndex){

                            rowClone         =  _.clone(row, true)
                            childrenClone    =  _.clone(rowClone.children,true);

                            childrenCloneLen = childrenClone&&childrenClone.length;

                            if(_.isNumber(rowClone._level_)){
                                rowClone._level_++;  
                            }else{
                                rowClone._level_ = 0;
                            }                            

                            delete rowClone.children;
                             
                            bodyDataArr.push(rowClone);

                            if(childrenCloneLen>0){
                                rowClone._parent_ = true;
                                _(childrenClone).forEach(function(m,mIndex){
                                    m._level_ = rowClone._level_;
                                    m.pid     = rowClone.id;
                                    (rowClone.checked)&&(m.checked=rowClone.checked);
                                }).value();
                                
                                ergodicBody(childrenClone);
                            }

                        }).value();

                    };              

                },

        		/*
                 * 计算表格每一列的宽度，如果未设定宽度则宽度默认为10,
                 * 通过文字字符长度匹配宽度，确保每个文字都可以显示出来。
                 */
                _calculateColumWidth: function(data){

                	var that              =  this,
                	    $tempDiv          = $("<div class='outWindow' style='font-weight:bold;'></div>").appendTo($("body")),
                        tempdiv           = $('<span style="float:left;white-space:nowrap;"></span>'),
                        hasMinWidth       = false,
                        _minWidth_        = false,
                        horizontalPadding = 10,
                        tempWidth;

                    var fixedColumn    = options.fixedColumn,
                        frontFixedNum  = fixedColumn[0],
                        finaleFixedNum = fixedColumn[1],
                        len            = data.length;
                   
                    _(data).forEach(function(colData,colIndex){
                        
                        _minWidth_ = false;


                        if(colData.width === "minWidth"){
                            hasMinWidth = _minWidth_ = colIndex;
                        }

                        if(!_.isNumber(colData.width)){
                            colData.width = 10
                        }else{
                            colData.width = parseInt(colData.width, 10)
                        }

                        $tempDiv.append(tempdiv);

                        tempWidth = tempdiv.html(colData.label).outerWidth() + horizontalPadding*2;

                        tempWidth += (colData.sort ? 40 : 0);

                        tempWidth += (colData.filters ? 40 : 0);

                        (colData.width < tempWidth)&&(colData.width = tempWidth);

                        // _minWidth_ !== false && (colData._minWidth_ = true);
                        that.headSettings.minColgroup.push(tempWidth);
                        that.headSettings.colgroup.push(colData.width);

                    }).value();

                    $tempDiv.remove();

                    hasMinWidth !== false && (data[hasMinWidth]._minWidth_ = true,this.data.head = {}, (_.isNumber(hasMinWidth)&&(frontFixedNum<hasMinWidth<len-finaleFixedNum)) && (this.data.head.hasMinWidth = (hasMinWidth-frontFixedNum))); 

                    
                }

        	}

            this.dataManage.init(data);
        },

        /*
         *负责渲染数据的
         */
        _initRenderManage: function(){

            var self            = this,
                $el             = this.$el,
                options         = this.options,
                type            = options.type,
                optsBar         = options.optsBar,
                pagin           = options.pagin,
                colOpts         = options.colOpts,
                maxHeight       = options.maxHeight,
                checkedbox      = options.checkedbox,
                colFilter       = options.colFilter,
                indentSize      = options.indentSize,
                chartConverter  = options.chartConverter,
                noDataTpl       = options.template.nodataTpl;

            this.renderManage = {

               renderDelayFlag: false,
                
                //渲染表格
                render: function(data,headSettings){
                   
                   var head,
                       body,
                       hasExpand;

                    
                    data      = this.data      = data || this.data;
                    head      = this.head      = data&&data.head || this.head;
                    body      = this.body      = data&&data.body || this.body;
                    hasExpand = this.hasExpand = data&&data.hasExpand || this.hasExpand;
                    
                    if(!data)
                        return;

                    if(!options.autoRender && !this.renderdy && !this.renderDelayFlag)
                        return;

                    (!this.renderdy)&&this.renderGrid();
                    this.renderHead(head,hasExpand);
                    this.renderFilter(head,hasExpand);
                    this.renderBody(head,body,hasExpand);

                    self._bindEvents();
                    this.setColDrag(options.colDrag,head);
                    this.renderdy = true;
                    
                },

                renderDelay: function(flag){
                   (!!flag)&&(this.renderDelayFlag = !!flag,this.render());
                },

                //渲染表格公共区域
                renderGrid: function(){

                    if(!options.autoRender && !this.renderdy && !this.renderDelayFlag)
                        return;

                    if(type === "simple"){
                        $el.html(simpleTableTpl())
                    }else{
                        $el.html(tableTpl({
                            optsBar: optsBar,
                            pagin: pagin,
                            colFilter: colFilter,
                            chartConverter: chartConverter
                        }))
                    }
                },

                //渲染表格头数据
                renderHead: function(head,hasExpand){                                    

                    head      = this.head = head || this.head;
                    hasExpand = this.hasExpand = hasExpand || this.hasExpand;

                    if(!head)
                        return;

                    if(!options.autoRender && !this.renderdy && !this.renderDelayFlag)
                        return;

                    if(type === "simple"){
                        $el.find('.oas-grid table').html(simpleTheadTpl({
                            head: head
                        }))           
                    }else{
                        $el.find('.oas-grid-thead').html(theadTpl({
                            head: head,
                            checkedbox: checkedbox,
                            hasExpand: hasExpand,
                            colOpts:  colOpts,
                            colFilter: colFilter
                        }));

                        // this.adjustGrid();
                    }
                                       
                },

                //渲染表格过滤
                renderFilter: function(head,hasExpand){

                    head = this.head = head || this.head;
                    
                    if(!head || (!colFilter))
                        return;
                    if(!options.autoRender && !this.renderdy && !this.renderDelayFlag)
                        return;

                    if(type === "normal"){
                        $el.find(".oas-grid-filter").html(filterTpl({
                            head: head,
                            checkedbox: checkedbox,
                            hasExpand: hasExpand,
                            colOpts: colOpts
                        }))
                    }
                },

                //渲染表格体数据                 
                renderBody: function(head,body,hasExpand){

                    var tempBody,
                        noDataTpl,
                        isStriped,
                        $girdTbody,
                        that = this;
                    
                    head = this.head = head || this.head;
                    body = this.body = body || this.body;
                    hasExpand = this.hasExpand = hasExpand || this.hasExpand;

                    if(!body)
                        return;
                    tempBody   = body.tempBody,
                    isStriped  = options.isStriped,
                    $girdTbody = $el.find('.oas-grid-tbody');                   

                    if(!options.autoRender && !this.renderdy && !this.renderDelayFlag)
                        return;

                    if(type === "simple"){

                        if(tempBody.length > 0){

                            if($el.find(".oas-grid").hasClass("oas-grid-no-data")) {
                                $el.find(".oas-grid").removeClass("oas-grid-no-data")
                                   .html(simpleTheadTpl({
                                       head: head
                                   }))
                            }

                            $el.find(".oas-grid")
                               .find("table").find("tbody").remove().end()
                               .append(simpleTbodyTpl({
                                   head: head,
                                   body: body
                               }));
                            
                        }else{
            
                            $el.find(".oas-grid").addClass("oas-grid-no-data").html(noDataTpl || tbodyNoDataTpl());
                        }
                         this.setGridProp()
                    }else{     

                        if(tempBody.length > 0){
                            $el.find(".oas-grid").removeClass("oas-grid-no-data").find('.oas-grid-tbody').html(tbodyTpl({
                                head: head,
                                body: body,
                                checkedbox: checkedbox,
                                hasExpand: hasExpand,
                                colOpts:  colOpts
                            }));

                            if(checkedbox&&$el.find(".oas-grid-row-expand-icon").length>0){
                                $el.find(".oas-grid-row-expand-icon").closest("table")
                                       .find("tr").each(function(){

                                    var matchArr = $(this)[0].className.match(/(-expand)?\s*oas-grid-level-(\d*)/),
                                        level    = parseInt(matchArr[2]),
                                        $tdDiv      = $(this).find(".oas-grid-row-expand-icon").closest(".oas-grid-td");

                                    $tdDiv.css({
                                        "padding-left": parseInt($tdDiv.css("padding-left")) + indentSize* level
                                    })
                                })
                            }                             
                        }else{
                            $el.find('.oas-grid').addClass("oas-grid-no-data")
                                                 .find(".oas-grid-tbody")
                                                 .html(noDataTpl || tbodyNoDataTpl());
                        }
                        this.setGridProp();
                        this.adjustGrid();
                        this.updateCheckbox();
                        setTimeout(function(){
                            that.renderChart();
                        },0)
                        
                    }                                
                },

                //渲染图表
                renderChart: function(chartType,autoRender){

                    var show       = chartConverter.show,
                        chartType  = chartType  || chartConverter.chartType,
                        autoRender = _.isBoolean(autoRender) ? autoRender : chartConverter.autoRender,
                        renderAt   = $(chartConverter),
                        dialogOpts =  chartConverter.renderDialog;

                    var converterOpt = $.extend(true,{},chartConverter,{
                        chartType: chartType
                    });

                    delete converterOpt.renderDialog;
                    delete converterOpt.autoRender;

                    if(show){
                        $el.find(".oas-grid-chart-select >a").oasDropdown({
                            isClickable : true,
                            miss:false
                        }) 

                        if(!autoRender)
                            return;

                        if(chartConverter.renderAt){
                            oasisl.chartConverter($el,converterOpt); 
                        }else{
                            dialog.open({
                                title: dialogOpts.title,
                                btn: ['关闭'],
                                type: 1,
                                content: '<div class="chart-area" style="height:100%;"></div>',
                                area: [dialogOpts.width,dialogOpts.height],
                                success: function(dom){
                                    converterOpt.renderAt = $(dom).find(".chart-area");
                                    oasisl.chartConverter($el,converterOpt);
                                }
                            })
                        }

                    }
                    
                    
                    
                },

                //适应表格
                adjustGrid: function(flag){
                    
                    this.adjustWidth();
                    this.adjustHeight();
                    this.updateFixedStyle();
                    this.scrollResize();
                                        
                },

                // 适应表格宽度                   
                adjustWidth: function(){
                    
                    var head           = this.head,
                        mainLeft       = head.front.width,
                        mainCenter     = head.center.width,
                        mainRight      = head.finale.width,
                        hasMinWidth    = head.hasMinWidth,
                        multipleHeader = this.head.multipleHeader,
                        $scrollH;
                    //2017-09-04解决不同版本浏览器对于小数点解析不一致的处理
                    $el.find(".oas-grid").outerWidth($el.outerWidth());
                    $el.find(".grid-front-fixed").outerWidth(mainLeft);
                    $el.find(".grid-finale-fixed").outerWidth(mainRight);
                    // 表格体主表格左右适应
                    $el.find(".grid-main").css({
                        "left": mainLeft,
                        "right": mainRight
                    });

                    //表格水平滚动条
                    $scrollH =  $el.find(".oas-grid-scroll-h");
                    $scrollH.scrollLeft(0).find("div").width(mainCenter+mainLeft+mainRight+2);                  
                    
                    //暂时不需要
                    // if($scrollH.outerWidth()>=$scrollH.find(">div").outerWidth()&&$scrollH.parent().find(".oas-grid-pagin").length<1){
                    //    $el.find(".oas-grid-footer").addClass("no-border");
                    // }
                    // 2016-6-17 add
                    if(hasMinWidth&&(!multipleHeader)){
                         $el.find(".grid-front-fixed table").css("min-width",mainLeft);
                         $el.find(".grid-main table").css("min-width",mainCenter);
                         $el.find(".grid-finale-fixed table").css("min-width",mainRight);
                    }

                },

                // 适应表格高度
                 
                adjustHeight: function(){

                    var $theads         = $el.find(".oas-grid-thead"),
                        $theadMainTrs   = $theads.find(".grid-main tr"),
                        $theadFrontTrs  = $theads.find('.grid-front-fixed tr'),
                        $theadFinaleTrs = $theads.find('.grid-finale-fixed tr')
                        $tbodys         = $el.find(".oas-grid-tbody"),
                        $tbodyMainTrs   = $tbodys.find(".grid-main tr"),
                        $tbodyFrontTrs  = $tbodys.find('.grid-front-fixed tr'),
                        $tbodyFinaleTrs = $tbodys.find('.grid-finale-fixed tr');

                     // 遍历所有的行
                     $.each($theadMainTrs, function(i, element){

                        var $theadFrontTh  = $theadFrontTrs.eq(i),
                            $theadMainTh   = $(this),
                            $theadFinaleTh = $theadFinaleTrs.eq(i),
                            trHeightArr    = [$theadFrontTh.outerHeight(),$theadMainTh.outerHeight(), $theadFinaleTh.outerHeight()],
                            trHeihgtMax    = Math.max.apply(null,trHeightArr);

                        $theadFrontTh.css("height",trHeihgtMax);
                        $theadMainTh.css("height",trHeihgtMax);
                        $theadFinaleTh.css("height",trHeihgtMax);

                    });
                    
                    var tableHeadHeight = $el.find('.oas-grid-thead .grid-main').outerHeight();

                    $el.find(".oas-grid-thead").css("height",tableHeadHeight+2);

                    $.each($tbodyMainTrs, function(i, element){

                        var $tbodyFrontTd  = $tbodyFrontTrs.eq(i),
                            $tbodyMainTd   = $(this),
                            $tbodyFinaleTd = $tbodyFinaleTrs.eq(i),
                            trHeightArr    = [$tbodyFrontTd.outerHeight(),$tbodyMainTd.outerHeight(), $tbodyFinaleTd.outerHeight()],
                            trHeihgtMax    = Math.max.apply(null,trHeightArr);

                        $tbodyFrontTd.css("height",trHeihgtMax);
                        $tbodyMainTd.css("height",trHeihgtMax);
                        $tbodyFinaleTd.css("height",trHeihgtMax);

                    });

                    
                    if(colFilter){
                        $el.find(".oas-grid-filter").css("height",$el.find(".oas-grid-filter .grid-main").outerHeight()+1);
                    }
                    
                    //无数据是也会有高度的
                    if(options.type!=="simple"){
                        var tableBodyHeight = $el.find(".oas-grid").hasClass("oas-grid-no-data") ? $el.find('.oas-no-data').outerHeight(): $el.find('.oas-grid-tbody .grid-main').outerHeight();
                        $el.find(".oas-grid-tbody").css("height",tableBodyHeight+1);
                    }
                    if(_.isNumber(maxHeight)){
                        $el.find(".oas-grid").addClass("oas-grid-has-scroll-v")
                           .find(".oas-grid-tbody").css("max-height",maxHeight);

                        //垂直
                        $el.find('.oas-grid-scroll-v')
                        .scrollTop(0)
                        .css({
                            top: $el.find(".oas-grid-head").outerHeight()+$el.find(".oas-grid-thead").outerHeight()+$el.find(".oas-grid-filter").outerHeight()
                        })
                        .find('div').height($el.find(".oas-grid-tbody").outerHeight()+1);
                    }

                },

                //设置表格属性
                setGridProp: function(){

                    var $grid          = $el.find(".oas-grid"),
                        nowrap         = options.nowrap,
                        striped        = options.striped,
                        hasBorder      = options.hasBorder,
                        multipleHeader = this.head.multipleHeader,
                        $Table         = $el.find(".oas-grid-tbody table");

                    nowrap ? $grid.addClass("oas-grid-nowrap") : $grid.removeClass("oas-grid-nowrap") ;
                    hasBorder ? $grid.addClass("oas-grid-has-border") : $grid.removeClass("oas-grid-has-border");
                    multipleHeader ? $grid.addClass("oas-grid-multiple-header") : $grid.removeClass("oas-grid-multiple-header")

                    if(striped){
                        $grid.addClass('oas-grid-striped');                        
                        $Table.find("tr.oas-grid-level-0:odd").addClass("oas-grid-odd");
                    }else{
                        $grid.removeClass('oas-grid-striped');
                        $Table.find("tr.oas-grid-level-0").removeClass("oas-grid-odd");
                    }
                },

                //用于重新更新位置
                scrollResize: function(){

                    var $scroll_temp = $("<div class='outWindow-scroll' style='overflow-x: scroll;display:none;'></div>").appendTo($("body")),
                        $scrollH    = $el.find(".oas-grid-scroll-h"),
                        scrollSize  = $scroll_temp.outerHeight();

                    $scroll_temp.remove();

                    if($el.find(".oas-grid").hasClass("oas-grid-has-scroll-v")){
                        $el.find(".oas-grid-thead .grid-finale-fixed,.oas-grid-filter .grid-finale-fixed").css({
                            "right": scrollSize
                        });
                        $el.find(".oas-grid-thead .grid-main,.oas-grid-filter .grid-main").css({
                            "right": $el.find(".grid-finale-fixed").outerWidth() + scrollSize
                        });
                        $el.find(".oas-grid-scroll-h").css({
                            "margin-right": scrollSize
                        })
                    }
                    // if($scrollH.outerWidth()>=$scrollH.find(">div").outerWidth()&&$scrollH.parent().find(".oas-grid-pagin").length<1){
                    //     $el.find(".oas-grid-footer").addClass("no-border");
                    // }else{
                    //     $el.find(".oas-grid-footer").removeClass("no-border");
                    // }

                },

                updateFixedStyle: function(){
                
                    var $srollH  = $el.find(".oas-grid-scroll-h"),
                        srollHSL = $srollH.scrollLeft(),
                        srollHWrapWidth,
                        scrollHContentWidth;

                    srollHWrapWidth     = $srollH.width();
                    scrollHContentWidth = $srollH.find('>div').outerWidth();

                    $el.find(".grid-front-fixed").removeClass("grid-front-fixed-shadow");
                    $el.find(".grid-finale-fixed").removeClass("grid-finale-fixed-shadow");


                    if(srollHWrapWidth<scrollHContentWidth){

                        if(srollHSL== 0){
                            $el.find(".grid-finale-fixed").addClass("grid-finale-fixed-shadow")
                        }else if(srollHSL == scrollHContentWidth-srollHWrapWidth ){                   
                            $el.find(".grid-front-fixed").addClass("grid-front-fixed-shadow")  
                        }else{
                            $el.find(".grid-front-fixed").addClass("grid-front-fixed-shadow");
                            $el.find(".grid-finale-fixed").addClass("grid-finale-fixed-shadow"); 
                        }
                    }
                },

                updateCheckbox: function(){
                    var $bodyCheckboxs = $el.find(".oas-grid-tbody .grid-front-fixed .oas-grid-checkbox input[type=checkbox]")
                        checkboxLen    = $bodyCheckboxs.filter(":not(:disabled)").length,
                        checkedLen     = $bodyCheckboxs.filter(":not(:disabled):checked").length;

                    $el.find(".oas-grid-thead .grid-front-fixed .oas-grid-checkbox input[type=checkbox]").prop("checked",checkboxLen === checkedLen);
                },

                dpFilterResize: function(){
                    var $dpFilter     = $el.find(".oas-grid-dropdown-filter");

                    if($dpFilter.length>0){
                        var colName        = $dpFilter.data("col-name"),
                            $filterIcon    = $el.find(".oas-grid-thead th[name='"+colName+"'] .filter-icon"),
                            filterIconTop  = $filterIcon.offset().top,
                            filterIconLeft = $filterIcon.offset().left,
                            tableTop       = $el.find(".oas-grid").offset().top,
                            tableLeft      = $el.find(".oas-grid").offset().left;

                        $el.find(".oas-grid-dropdown-filter").css({
                            top:  filterIconTop - tableTop + 10,
                            left: filterIconLeft - tableLeft +10
                        })
                    }
                },

                setColDrag: function(type,head){
                    var that           = this,
                        fixedColumn    = options.fixedColumn,
                        head           = head || this.head,
                        hasMinWidth    = head.hasMinWidth,
                        minColgroup    = this.minColgroup = head.minColgroup.slice(fixedColumn[0],head.minColgroup.length-fixedColumn[1]),
                        multipleHeader = this.multipleHeader = head.multipleHeader,
                        colDragOpt     = {};
                    
                    if(multipleHeader || hasMinWidth)
                        return;

                    if(type){ 
                        $el.find(".col-line").css("cursor", "col-resize");

                        $el.on("mousedown.colDrag.oasGrid", ".col-line", function(evt){
                            
                            var $colTh              = $(this).closest("th"),
                                dragLeft            = $(this).offset().left,
                                mainThs             = $el.find(".oas-grid-thead .grid-main th"),
                                currentMainColGroup = that.currentMainColGroup = [],
                                index;
                            
                            $(this).closest("th").addClass("colDragging");
                            
                            colDragOpt.index    = index = $colTh.index(),
                            colDragOpt.dragLeft = $(this).offset().left,
                            colDragOpt.maxLeft  = $colTh.offset().left+$colTh.outerWidth()-minColgroup[index];
                            colDragOpt.minLeft  = $colTh.prev().offset().left+minColgroup[index-1];

                            $.each(mainThs,function(i,data){
                                currentMainColGroup.push($(this).width());
                            });
                            
                            that._updateColgroup(currentMainColGroup);

                            var sumCol = currentMainColGroup[index-1] + currentMainColGroup[index];

                            $(document).on("mousemove.colDrag.oasGrid",function(evt){
                                
                                var diffWidth = evt.clientX - colDragOpt.dragLeft,
                                    index     = colDragOpt.index;

                                if(evt.clientX>colDragOpt.maxLeft || evt.clientX<colDragOpt.minLeft)
                                    return;
                                if(diffWidth){
                                    if(currentMainColGroup[index]-diffWidth>minColgroup[index]){
                                        currentMainColGroup[index] = "*";
                                        
                                    }
                                    currentMainColGroup[index-1] += diffWidth;
                                    currentMainColGroup[index] = sumCol - currentMainColGroup[index-1];

                                    that._updateColgroup(currentMainColGroup);

                                    
                                    
                                }else{
                                    if(currentMainColGroup[index-1]+diffWidth>minColgroup[index-1]){
                                        currentMainColGroup[index-1] = "*";
                                    }
                                    currentMainColGroup[index] -= diffWidth;
                                    currentMainColGroup[index-1] = sumCol - currentMainColGroup[index];

                                    that._updateColgroup(currentMainColGroup);
                                }
                                colDragOpt.dragLeft = evt.clientX;
                            }).one("mouseup.colDrag.oasGrid",function(e){
                                $(this).unbind("mousemove.colDrag.oasGrid");
                                that.dpFilterResize();
                            })
                            
                        });
                    }else{
                        $el.find(".col-line").css("cursor","auto");
                        $el.off(".colDrag.oasGrid");
                        $(document).off(".colDrag.oasGrid");
                    }

                    this.colDragResize();                         

                },

                //重置col数组
                colDragResize: function(){
                    var minColgroup         = this.minColgroup,
                        currentMainColGroup = this.currentMainColGroup,
                        multipleHeader      = this.multipleHeader,
                        colWidthTotal       = 0,
                        colMultiple         = [];

                    var head           = this.head,
                        mainLeft       = head.front.width,
                        mainCenter     = head.center.width,
                        mainRight      = head.finale.width,
                        hasMinWidth    = head.hasMinWidth;

                    if((!options.colDrag) || multipleHeader || hasMinWidth || (!currentMainColGroup))
                        return;
                    
                    _(currentMainColGroup).forEach(function(m,mIndex){
                        colMultiple.push(m/minColgroup[mIndex])
                    }).value();

                     minMuliple = Math.min.apply(null,colMultiple);

                     _(currentMainColGroup).forEach(function(m,mIndex){
                        currentMainColGroup[mIndex] = Math.round(currentMainColGroup[mIndex]/minMuliple);
                        colWidthTotal += currentMainColGroup[mIndex];
                    }).value();

                    this._updateColgroup(currentMainColGroup);

                    //resize
                    $el.find('.oas-grid-scroll-h').find('div').outerWidth(mainLeft+colWidthTotal+mainRight+2);
                },

                _updateColgroup: function(colgroup){
                    var theadMainCols  = $el.find(".oas-grid-thead .grid-main col"),
                        filterMainCols = $el.find(".oas-grid-filter .grid-main col"),
                        tbodyMainCols  = $el.find(".oas-grid-tbody .grid-main col");

                    $.each(colgroup,function(i,data){
                        theadMainCols.eq(i).attr("width",data);
                        filterMainCols.length>0&&filterMainCols.eq(i).attr("width",data);              
                        tbodyMainCols.length>0&&tbodyMainCols.eq(i).attr("width",data);
                    })
                }

            }

        },

        /*
         * 事件驱动
         */
        _initEventDriveManage: function(){

            var _events = {}

            this.eventsManage = {

                on: function(name, callback){
                    name = (name || '').toLowerCase();
                    if(_events[name]) {
                        _events[name].push(callback)
                    }else {
                        _events[name] = [callback]
                    }
                    return this;
                },

                off: function(name, callback){
                    var index,
                        list;
                    name = (name || '').toLowerCase();
                    index = _indexFn(name, callback);
                    if(index > -1) {
                        list = _events[name];
                        list.splice(index, 1);
                    }
                    return this;
                },

                fire: function(name, params){
                    var that = this,
                        list;
                    name = (name || '').toLowerCase();
                    list = _events[name];
                    if(list) {
                        $.each(list, function(index, dict){
                            
                            _.isFunction(dict)&&dict.apply(that, params);
                            
                        })
                    }
                },

                _indexFn: function(name, fn) {
                    var list;
                    name = (name || '').toLowerCase();
                    list = __events[name];

                    if(list){
                        fn = fn || '';
                        for (var i = 0; i < list.length; i++) {
                            if (fn.toString() === list[i].toString()) {
                                return i;
                            }
                        }
                    }                    
                    return -1;
                }
            }

        },

        /*
         * 订阅事件(桥梁)
         */        
        _subscripteEvent: function(){

            var renderManage = this.renderManage,
                eventsManage = this.eventsManage;

            //订阅 渲染表格公共区域数据
            eventsManage.on("gridInit.oasGrid",function(){
                renderManage.render.apply(renderManage,arguments);
            });
            //订阅 后渲染表格
            eventsManage.on("gridRender.oasGrid",function(){
                renderManage.renderDelay.apply(renderManage,arguments);
            });

            eventsManage.on("gridHeadRender.oasGrid",function(){
                renderManage.renderHead.apply(renderManage,arguments);
            });

            eventsManage.on("gridBodyRender.oasGrid",function(){
                renderManage.renderBody.apply(renderManage,arguments);
            });

            eventsManage.on("gridChartRender.oasGrid",function(){
                renderManage.renderChart.apply(renderManage,arguments);
            });

            eventsManage.on("setColDrag.oasGrid",function(){
                renderManage.setColDrag.apply(renderManage,arguments);
            });

            //订阅 表格调整
            eventsManage.on("adjustGrid.oasGrid",function(){
                renderManage.adjustGrid.apply(renderManage,arguments);
            });       

            //订阅 表格调整
            // eventsManage.on("colFilter.oasGrid",function(){
            //     renderManage.adjustGrid.apply(renderManage,arguments);
            // });

            //订阅 更新fixed样式
            eventsManage.on("updateFixedStyle.oasGrid",function(){
                renderManage.updateFixedStyle.apply(renderManage,arguments);
            });

            //订阅 更新dpFilterResize
            eventsManage.on("dpFilterResize.oasGrid",function(){
                renderManage.dpFilterResize.apply(renderManage,arguments);
            });

            //订阅 更新scrollResize
            eventsManage.on("scrollResize.oasGrid",function(){
                renderManage.scrollResize.apply(renderManage,arguments);
            });

            //订阅 更新colDragResize
            eventsManage.on("colDragResize.oasGrid",function(){
                renderManage.colDragResize.apply(renderManage,arguments);
            });

        },

        /*
         * 事件绑定
         */
        _bindEvents: function(){

            var self      = this,
                $el       = this.$el,
                options   = this.options,
                winWidth  = $(window).width(),
                winHeight = $(window).height(),
                timeout;

            var eventsManage = this.eventsManage;

            //滚动条事件
            $el.find(".oas-grid-scroll-h").on("scroll.oasGrid",function(){

                var scrollLeft = $(this).scrollLeft();
                eventsManage.fire("updateFixedStyle.oasGrid",[]);
                $el.find('.grid-main table').css('margin-left', 0 - scrollLeft);
                eventsManage.fire("dpFilterResize.oasGrid")
                self._emit('scroll-h',[scrollLeft]);
            });
            
            $el.find(".oas-grid-tbody").on("scroll.oasGrid",function(){
                var scrollTop = $(this).scrollTop();
                self._emit('scroll-v',[scrollTop]);
            })

            $el.find(".oas-grid-simple").on("scroll.oasGrid",function(){
                var scrollLeft = $(this).scrollLeft();
                self._emit('scroll-h',[scrollLeft]);
            });

            //窗口resize
            $(window).resize(function(){
                eventsManage.fire("scrollResize.oasGrid")  
                timeout && clearTimeout(timeout);
                timeout = setTimeout(function() {
                    var winNewWidth = $(window).width(),
                        winNewHeight = $(window).height(); 
                                 
                    if (winWidth !== winNewWidth || winHeight !== winNewHeight) {
                        if(options.type !== "simple"){
                            eventsManage.fire("adjustGrid.oasGrid");
                            eventsManage.fire("dpFilterResize.oasGrid");
                            eventsManage.fire("colDragResize.oasGrid");
                        }
                            
                                                                         
                    }
                }, 80);
            });

            $(document).on("click",function(evt){

                var $target = $(evt.target);
                
                if(($target.closest(".oas-grid-dropdown-filter").size()>0) || ($target.closest(".filter-icon").size()>0))
                    return;
                
                $el.find(".oas-grid-dropdown-filter").hide();
            })

   
        },

    	/*
    	 * 组件入口
    	 */
    	_create: function(){

            var options = this.options,
                url     = options.url,
                head    = options.head,
                body    = options.body;

            this._validateOption();
            this._initRenderManage();
            this._initEventDriveManage();
            this._subscripteEvent(); 
            this._initDataManage(url ? {
                head: head
            } : {
                head: head,
                body: body
            });
            this._initURLManage(url);
            

            // this._bindEvents();
        },

        /*
         * 组件对外方法
         */
        invoke: {

            // 重新刷新表格 或 表体
            data: function(head, body){

                var options = this.options;

                (arguments.length === 1)&&(body = head, head = null);
                
                if(body){

                    if(head){
                        options.body = body;
                        options.head = head;

                        this.dataManage.setData({
                            head: head,
                            body: body
                        });

                    }else{
                        options.body = body;
                        
                        this.dataManage.setBody(body);
                    }
                }
            },

            //渲染表格
            render: function(){

                var eventsManage = this.eventsManage;

                eventsManage.fire("gridRender.oasGrid",[true]);
            },

            //重新设置行操作按钮
            colOpts: function(data){

                var options    = this.options,
                    hasColOpst = options.colOpts.data,
                    body       = options.body;   
                
                var eventsManage = this.eventsManage;

                options.colOpts.data = data;

                if(!data || !body)
                    return;
                
                (!hasColOpst)&&eventsManage.fire("gridHeadRender.oasGrid");
                eventsManage.fire("gridBodyRender.oasGrid");

                    
            },

            //获取表格search关键词
            getSearchKeyword: function(){
                return this.$el.find("#grid-search-input").val();
            },

            setColDrag: function(type){
                var dataManage = this.dataManage;

                dataManage.setColDrag(!!type)
               
            },

            //获取checkbox选中的索引
            getSelectedData: function(){

                var dataManage = this.dataManage;

                return dataManage.getSelectedData();

            },

            resize: function(){
                var eventsManage = this.eventsManage;
                
                if(this.options.type !== "simple"){
                    eventsManage.fire("scrollResize.oasGrid")  
                    eventsManage.fire("adjustGrid.oasGrid");
                    eventsManage.fire("dpFilterResize.oasGrid");
                    eventsManage.fire("colDragResize.oasGrid");
                }
            },

            //url部分对外接口
            reload: function(condition){
                var urlManage = this.urlManage;
                urlManage.reload(condition);
            },

            createModel: function(){
                var urlManage = this.urlManage;
                urlManage.createModel();
            },

            updateModel: function(row){
                var urlManage = this.urlManage;
                urlManage.updateModel(row);
            },

            deleteModel: function(row){
                var urlManage = this.urlManage;
                urlManage.deleteModel(row);
            },

            detailModel: function(){
                var urlManage = this.urlManage;
                urlManage.detailModel(row);
            },

            addRowRemote: function(row, callback){
                var urlManage = this.urlManage;
                urlManage.addRowRemote(row, callback);
            },
            deleteRowRemote: function(row, callback){
                var urlManage = this.urlManage;
                urlManage.deleteRowRemote(row, callback);
            },
            updateRowRemote: function(row, callback){
                var urlManage = this.urlManage;
                urlManage.updateRowRemote(row, callback);
            },       
            
            setRowSelected: function(rows){

                var that            = this,
                    $el             = this.$el,
                    options         = this.options,
                    checkedbox      = options.checkedbox,
                    tempBody        = this.dataManage.data.body.bodyDataArr,
                    matchIndex      = -1,
                    trIndex         = -1,
                    $bodyCheckboxs,
                    $trCheckbox,
                    $rowTrs,
                    $updateModel
                    selectIndexs    = [];

                var $table_doms    = $el.find('.oas-grid-tbody').find("table"),
                    
                    checkboxLen,
                    checkedLen;
                
                if(!rows)
                    return;

                (!_.isArray(rows)) && (rows = [rows]);  

                _(rows).forEach(function(n) {

                    trIndex    = -1;
                    matchIndex = -1;

                    if(_.isNumber(n)){

                       trIndex = n;

                    }else if(n&&_.isNumber(n.id)){

                        _(tempBody).forEach(function(m,mIndex) {
                            if(m.id == n.id){
                               matchIndex = mIndex
                            }
                        }).value();

                        (matchIndex !== -1)&&(trIndex = matchIndex)
                    }

                    if(trIndex !== -1){

                        

                        if(checkedbox){
                            $bodyCheckboxs = $el.find(".oas-grid-tbody .grid-front-fixed .oas-grid-checkbox input[type=checkbox]");
                            $trCheckbox = $bodyCheckboxs.eq(trIndex);
                            tempBody[trIndex].checked = true;
                            
                            if(!$trCheckbox.attr("disabled")){
                                $trCheckbox.prop("checked",true);
                                $table_doms.find('tr.oas-grid-row:eq('+trIndex+')').addClass('oas-grid-active')
                            }
                        }else{
                            if(options.singleSelect){
                                $table_doms.find('tr.oas-grid-row').removeClass('oas-grid-active');
                                $table_doms.find('tr.oas-grid-row:eq('+trIndex+')').addClass('oas-grid-active')
                            }else{
                                $table_doms.find('tr.oas-grid-row:eq('+trIndex+')').addClass('oas-grid-active')
                            }
                        }
                    }

                }).value();           

                if(checkedbox){
                    checkboxLen = $bodyCheckboxs.filter(":not(:disabled)").length;
                    checkedLen  = $bodyCheckboxs.filter(":not(:disabled):checked").length;
                        
                    $el.find(".oas-grid-thead .oas-grid-checkbox input[type=checkbox]").prop("checked",checkboxLen === checkedLen);

                }

                $updateModel = $el.find('.oas-grid-head [data-role="updateModel"]');
                $rowTrs      = $el.find(".oas-grid-tbody tr.oas-grid-row");
                
                $rowTrs.each(function(i, dom){
                    $(this).is(".oas-grid-active")&&selectIndexs.push(i);
                });

                if(selectIndexs.length>1){
                    $updateModel.addClass("disabled")
                }else{
                    $updateModel.removeClass("disabled")
                }

                this.dataManage.updateCheckboxArray(selectIndexs);

            },

            //2017-10-27 add 根据单个下标获取表格行数据
            getDataByIndex: function(index){

                var dataManage   = this.dataManage,
                    tempBody     = dataManage.data.body.tempBody,
                    bodyDataArr  = dataManage.data.body.bodyDataArr,
                    temp;
                
                temp = bodyDataArr[index];
                
                return temp ? [index,tempBody[index].data,temp] : undefined;
            },

            //为了兼容以前的
            getCheckedIndex: function(){
                return this._iCall("getSelectedData");
            },

            getSelectedRow: function(){
                 return this._iCall("getSelectedData").selectObjRows[0];
            },

            getSelectedRows: function(){
                 return this._iCall("getSelectedData").selectObjRows;
            },

            toggleRowSelected: function(rows){
                return this._iCall("setRowSelected",[rows]);
            }
        }
    })
};
},{"./colfilter.tpl":42,"./filter.tpl":43,"./simpleTable.tpl":45,"./simpleTbody.tpl":46,"./simpleThead.tpl":47,"./table.tpl":48,"./tbody.tpl":49,"./tbodyNoData.tpl":50,"./thead.tpl":51}],45:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"4793e9d616a1807c35009d137b669b7b"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTest2/simpleTable','<div class="oas-grid oas-grid-simple"> <table class="oas-grid-table"> </table> </div>');
},{"../../../lib/runtime/runtime":7}],46:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"0150ef521e48d5fed124caccf380ca88"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTest2/simpleTbody',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,body=$data.body,$each=$utils.$each,$value=$data.$value,$index=$data.$index,head=$data.head,$string=$utils.$string,$escape=$utils.$escape,$out='';if(body.center.data.length > 0){
$out+=' <tbody> ';
$each(body.center.data,function($value,$index){
$out+=' <tr> ';
$each($value.data,function($value,$index){
$out+=' <td';
if(head.center.data[$index].tbodyTitle){
$out+=' title="';
$out+=$string($value);
$out+='"';
}
$out+=' name="';
$out+=$escape(head.center.data[$index].name);
$out+='"> <div class="oas-grid-td" style="';
if(head.center.data[$index]._minWidth_ !== true){
$out+='width:';
$out+=$escape(head.center.data[$index].width);
$out+='px';
}
$out+='">';
$out+=$string($value);
$out+='</div> </td> ';
});
$out+=' </tr> ';
});
$out+=' </tbody> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],47:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"604d7cd12e4ab3458168c80b860ec2ae"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTest2/simpleThead',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,head=$data.head,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,$string=$utils.$string,$out='';if(head.center.data.length > 0){
$out+=' <colgroup> ';
$each(head.center.data,function($value,$index){
$out+=' <col width="';
if($value._minWidth_){
$out+='*';
}else{
$out+=$escape($value.width);
}
$out+='"> ';
});
$out+=' <!--';
$each(head.center.colgroup,function($value,$index){
$out+=' <col width="';
$out+=$escape($value);
$out+='"> ';
});
$out+='--> </colgroup> <thead> <tr> ';
$each(head.center.data,function($value,$index){
$out+=' <th ';
if($value.sort=='asc'||$value.sort=='desc'){
$out+='class="is-sorted" ';
}
if($value.title){
$out+=' title="';
$out+=$escape($value.title);
$out+='"';
}
if(  
				$value.name){
$out+=' name="';
$out+=$escape($value.name);
$out+='"';
}
$out+='> <div class="oas-grid-th" style="min-width:';
$out+=$escape($value.width);
$out+='px">';
$out+=$string($value.label);
if($value.sort){
$out+='<a class="sort-icon oasicon oasicon-';
$out+=$escape($value.sort);
$out+='" href="javascript:;"></a>';
}
$out+='</div> </th> ';
});
$out+=' </tr> </thead> ';
}
$out+=' ';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],48:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"8e829d393fbcbae056ee76a8e2678994"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTest2/table',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,optsBar=$data.optsBar,chartConverter=$data.chartConverter,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,colFilter=$data.colFilter,pagin=$data.pagin,$out='';$out+='<div class="oas-grid">   ';
if(optsBar.buttons || (optsBar.filter&&optsBar.filter.show) || chartConverter.show){
$out+=' <div class="oas-grid-head"> <div class="oas-grid-optBar clearfix"> ';
if(optsBar.buttons){
$out+=' <div class="oas-grid-option clearfix"> ';
$each(optsBar.buttons,function($value,$index){
$out+=' <a class="btn btn-sm btn-default';
if($value.className){
$out+=' ';
$out+=$escape($value.className);
}
$out+=' oas-grid-opt-btn';
if($value.disable){
$out+=' disabled';
}
$out+='"';
if($value.dataAction){
$out+=' data-action="';
$out+=$escape($value.dataAction);
$out+='"';
}
if($value.role){
$out+=' data-role="';
$out+=$escape($value.role);
$out+='"';
}
if($value.id){
$out+=' id="';
$out+=$escape($value.id);
$out+='"';
}
if($value.title){
$out+=' title="';
$out+=$escape($value.title);
$out+='"';
}
$out+=' href="';
if($value.href){
$out+=$escape($value.href);
}else{
$out+='javascript:;';
}
$out+='"> <i class="';
$out+=$escape($value.icon);
$out+='"></i> <span class="btn-text">';
$out+=$escape($value.label);
$out+='</span> </a> ';
});
$out+=' </div> ';
}
$out+=' ';
if(optsBar.filter&&optsBar.filter.show){
$out+=' <div class="oas-grid-setting clearfix"> <div class="form-inline"> <div class="oas-grid-search"> <div class="form-group"> <div class="input-group"> <input type="text" id="grid-search-input" class="form-control" placeholder="';
if(optsBar.filter.keyword){
$out+=$escape(optsBar.filter.keyword);
}
$out+='"> <a id="grid-search-btn" class="btn btn-sm btn-default input-group-addon" href="javascript:;">查询</a> </div> </div> </div> </div> </div> ';
}
$out+=' ';
if(chartConverter.show){
$out+=' <div class="dropdown oas-grid-chart-select"> <a class="btn btn-default" role="button" data-toggle="oasDropdown" data-target="#" href="javascript:;"> 图表展示 <span class="caret"></span> </a> <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel"> <li data-chart-type="bar"> <a href="javascript:;">柱状图</a> </li> <li data-chart-type="line"> <a href="javascript:;">折线图</a> </li> <li data-chart-type="pie"> <a href="javascript:;">饼图</a> </li>  </ul> </div> ';
}
$out+=' </div> </div> ';
}
$out+=' <div class="oas-grid-body">  <div class="oas-grid-thead"> </div>  ';
if(colFilter){
$out+=' <div class="oas-grid-filter"> </div> ';
}
$out+='  <div class="oas-grid-tbody"> </div> <div class="oas-grid-footer"> <div class="oas-grid-scroll-h"> <div></div> </div>  ';
if(pagin){
$out+=' <div class="oas-grid-pagin" data-oaspagin-size="sm"></div> ';
}
$out+=' </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],49:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"cf2039a7b765f0343036f07a9763969c"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTest2/tbody',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,checkedbox=$data.checkedbox,body=$data.body,hasExpand=$data.hasExpand,$each=$utils.$each,head=$data.head,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,row=$data.row,$string=$utils.$string,colOpts=$data.colOpts,i=$data.i,$out='';if(checkedbox || (body.front.data&&body.front.data[0].data.length>0) || hasExpand){
$out+=' <div class="grid-front-fixed"> <table> <colgroup> ';
if(checkedbox || hasExpand){
$out+=' <col width="40"> ';
}
$out+=' <!--';
$each(head.front.data,function($value,$index){
$out+=' <col width="';
if($value._minWidth_){
$out+='*';
}else{
$out+=$escape($value.width);
}
$out+='"> ';
});
$out+=' --> ';
$each(head.front.colgroup,function($value,$index){
$out+=' <col width="';
if($value === true){
$out+='*';
}else{
$out+=$escape($value);
}
$out+='"> ';
});
$out+=' </colgroup> <tbody> ';
$each(body.front.data,function(row,$index){
$out+=' <tr class="oas-grid-row oas-grid-level-';
$out+=$escape(row._level_);
$out+=' ';
if(row._parent_){
$out+='oas-grid-has-child';
}
$out+=' ';
if(row.content){
$out+='oas-grid-has-content';
}
$out+=' ';
if(checkedbox&&row.checked&&(row.checkedabled!==false)){
$out+='oas-grid-active';
}
$out+=' ';
if(row.checkedabled===false){
$out+='oas-grid-disabled';
}
$out+='"> ';
if(checkedbox){
$out+=' <td class="oas-grid-checkbox"> <div class="oas-grid-td"> <label class="beauty-check"> <input type="checkbox" ';
if(row.checkedabled===false){
$out+='disabled';
}
$out+=' ';
if(row.checked&&(row.checkedabled!==false)){
$out+='checked';
}
$out+=' /> <span></span> </label> </div> </td> ';
}else if(hasExpand){
$out+=' <td class="oas-grid-expand"> <div class="oas-grid-td"> <span class="oas-grid-row-expand-icon"></span> </div> </td> ';
}
$out+=' ';
$each(row.data,function($value,$index){
$out+=' <td';
if(head.front.data[$index].tbodyTitle){
$out+=' title="';
$out+=$string($value);
$out+='"';
}
$out+=' name="';
$out+=$escape(head.front.data[$index].name);
$out+='"> <div class="oas-grid-td">';
if(checkedbox&&hasExpand&&$index===0){
$out+='<span class="oas-grid-row-expand-icon"></span>';
}
$out+=$string($value);
$out+='</div> </td> ';
});
$out+=' </tr> ';
if(row.content&&(row.data.length>0 || checkedbox || (!checkedbox&&hasExpand))){
$out+=' <tr class="oas-grid-row-expand oas-grid-level-';
$out+=$escape(row._level_+1);
$out+='"> <td ';
if(row.data.length>0){
$out+='colspan="';
if(checkedbox || hasExpand){
$out+=$escape(row.data.length+1);
}else{
$out+=$escape(row.data.length);
}
$out+='"';
}
$out+='></td> </tr> ';
}
$out+=' ';
});
$out+=' </tbody> </table> </div> ';
}
$out+=' ';
if(body.center.data.length > 0){
$out+=' <div class="grid-main"> <table class="oas-grid-table"> <colgroup> <!--';
$each(head.center.data,function($value,$index){
$out+=' <col width="';
if($value._minWidth_){
$out+='*';
}else{
$out+=$escape($value.width);
}
$out+='"> ';
});
$out+='--> ';
$each(head.center.colgroup,function($value,$index){
$out+=' <col width="';
if((!head.multipleHeader)&&(head.hasMinWidth!==false)&&($index==head.hasMinWidth)){
$out+='*';
}else{
$out+=$escape($value);
}
$out+='"> ';
});
$out+=' </colgroup> <tbody> ';
$each(body.center.data,function(row,$index){
$out+=' <tr class="oas-grid-row oas-grid-level-';
$out+=$escape(row._level_);
$out+=' ';
if(row._parent_){
$out+='oas-grid-has-child';
}
$out+=' ';
if(row.content){
$out+='oas-grid-has-content';
}
$out+=' ';
if(checkedbox&&row.checked && (row.checkedabled!==false)){
$out+='oas-grid-active';
}
$out+=' ';
if(row.checkedabled===false){
$out+='oas-grid-disabled';
}
$out+='"> ';
$each(row.data,function($value,$index){
$out+=' <td';
if(head.center.data[$index].tbodyTitle){
$out+=' title="';
$out+=$string($value);
$out+='"';
}
$out+=' name="';
$out+=$escape(head.center.data[$index].name);
$out+='"> <div class="oas-grid-td">';
if( checkedbox&&hasExpand&&$index===0&&(body.front.data[0]&&body.front.data[0].data.length===0)){
$out+='<span class="oas-grid-row-expand-icon"></span>';
}
$out+=$string($value);
$out+='</div> </td> ';
});
$out+=' </tr> ';
if(row.content&&row.data.length>0){
$out+=' <tr class="oas-grid-row-expand oas-grid-level-';
$out+=$escape(row._level_+1);
$out+='"> <td ';
if(row.data.length>1){
$out+='colspan="';
$out+=$escape(row.data.length);
$out+='"';
}
$out+='> <div class="oas-grid-td">';
$out+=$string(row.content);
$out+='</div> </td> </tr> ';
}
$out+=' ';
});
$out+=' </tbody> </table> </div> ';
}
$out+=' ';
if(colOpts.data || (head.finale.data.length>0)){
$out+=' <div class="grid-finale-fixed"> <table> <colgroup> <!--';
$each(head.finale.data,function($value,$index){
$out+=' <col width="';
if($value._minWidth_){
$out+='*';
}else{
$out+=$escape($value.width);
}
$out+='"> ';
});
$out+='--> ';
$each(head.finale.colgroup,function($value,$index){
$out+=' <col width="';
if($value === true){
$out+='*';
}else{
$out+=$escape($value);
}
$out+='"> ';
});
$out+=' ';
if(colOpts.data){
$out+=' <col width="';
$out+=$escape(colOpts.width);
$out+='"> ';
}
$out+=' </colgroup> <tbody> ';
$each(body.finale.data,function(row,$index){
$out+=' <tr class="oas-grid-row oas-grid-level-';
$out+=$escape(row._level_);
$out+=' ';
if(row._parent_){
$out+='oas-grid-has-child';
}
$out+=' ';
if(row.content){
$out+='oas-grid-has-content';
}
$out+=' ';
if(checkedbox&&row.checked && (row.checkedabled!==false)){
$out+='oas-grid-active';
}
$out+=' ';
if(row.checkedabled===false){
$out+='oas-grid-disabled';
}
$out+='"> ';
$each(row.data,function($value,$index){
$out+=' <td';
if(head.finale.data[$index].tbodyTitle){
$out+=' title="';
$out+=$string($value);
$out+='"';
}
$out+=' name="';
$out+=$escape(head.finale.data[$index].name);
$out+='"> <div class="oas-grid-td">';
if( checkedbox&&hasExpand&&$index===0&&(body.front.data[0]&&body.front.data[0].data.length===0&&body.center.data[0]&&body.center.data[0].data.length===0)){
$out+='<span class="oas-grid-row-expand-icon"></span>';
}
$out+=$string($value);
$out+='</div> </td> ';
});
$out+=' ';
if( colOpts.data){
$out+=' <td class="oas-grid-operator oas-grid-operator-';
$out+=$escape(colOpts.type);
$out+='"> <div class="oas-grid-td clearfix"> ';
if(colOpts.type === "panel"){
$out+=' <a href="javascript:;" class="btn btn-sm btn-default"> <i class="oasicon oasicon-search"></i> <span class="btn-text">操作</span> </a> ';
}else{
$out+=' ';
if((colOpts.data.length === 1)&&colOpts.ergodic){
$out+=' ';
$each(colOpts.data[0],function($value,i){
$out+=' <a href="javascript:;" class="btn btn-sm btn-default oas-grid-colopt-btn';
if($value.disable){
$out+=' disabled';
}
$out+='" ';
if(body.bodyDataArr[$index] && (typeof body.bodyDataArr[$index].id !== "undefined")){
$out+='row-id="';
$out+=$escape(body.bodyDataArr[$index].id);
$out+='"';
}
$out+=' name="';
$out+=$escape($value.name);
$out+='" ';
if($value.dataAction){
$out+=' data-action="';
$out+=$escape($value.dataAction);
$out+='"';
}
if($value.role){
$out+=' data-role="';
$out+=$escape($value.role);
$out+='"';
}
$out+='>';
if($value.icon){
$out+='<i class="';
$out+=$escape($value.icon);
$out+='"></i>';
}
if($value.label){
$out+='<span class="btn-text">';
$out+=$escape($value.label);
$out+='</span>';
}
$out+='</a> ';
});
$out+=' ';
}else{
$out+=' ';
$each(colOpts.data[$index],function($value,i){
$out+=' <a href="javascript:;" class="btn btn-sm btn-default oas-grid-colopt-btn';
if($value.disable){
$out+=' disabled';
}
$out+='" ';
if(body.bodyDataArr[$index] && (typeof body.bodyDataArr[$index].id !== "undefined")){
$out+='row-id="';
$out+=$escape(body.bodyDataArr[$index].id);
$out+='"';
}
$out+=' name="';
$out+=$escape($value.name);
$out+='" ';
if($value.dataAction){
$out+=' data-action="';
$out+=$escape($value.dataAction);
$out+='"';
}
if($value.role){
$out+=' data-role="';
$out+=$escape($value.role);
$out+='"';
}
$out+='>';
if($value.icon){
$out+='<i class="';
$out+=$escape($value.icon);
$out+='"></i>';
}
if($value.label){
$out+='<span class="btn-text">';
$out+=$escape($value.label);
$out+='</span>';
}
$out+='</a> ';
});
$out+=' ';
}
$out+=' ';
}
$out+=' </div> </td> ';
}
$out+=' </tr> ';
if(row.content&&(row.data.length>0 || colOpts.data)){
$out+=' <tr class="oas-grid-row-expand oas-grid-level-';
$out+=$escape(row._level_+1);
$out+='"> <td ';
if(row.data.length>0){
$out+='colspan="';
if(colOpts.data){
$out+=$escape(row.data.length+1);
}else{
$out+=$escape(row.data.length);
}
$out+='"';
}
$out+='></td> </tr> ';
}
$out+=' ';
});
$out+=' </tbody> </table> </div> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],50:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"44feafc829736303a2b0db49855546e1"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTest2/tbodyNoData','<div class="oas-no-data"> <span class="oas-no-dataImg"></span> <span class="oas-no-dataTip">对不起，暂无数据</span> </div> ');
},{"../../../lib/runtime/runtime":7}],51:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"a25edf48cc705b668ba4a395b39cb7ab"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTest2/thead',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,checkedbox=$data.checkedbox,head=$data.head,hasExpand=$data.hasExpand,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,$string=$utils.$string,colFilter=$data.colFilter,colOpts=$data.colOpts,$out='';$out+='  ';
if(checkedbox || (head.front.data.length > 0) || hasExpand){
$out+=' <div class="grid-front-fixed"> <table> <colgroup> ';
if(checkedbox || hasExpand){
$out+=' <col width="40"> ';
}
$out+=' <!--';
$each(head.front.data,function($value,$index){
$out+=' <col width="';
if($value._minWidth_){
$out+='*';
}else{
$out+=$escape($value.width);
}
$out+='"> ';
});
$out+=' --> ';
$each(head.front.colgroup,function($value,$index){
$out+=' <col width="';
if($value === true){
$out+='*';
}else{
$out+=$escape($value);
}
$out+='"> ';
});
$out+=' </colgroup> <thead> <tr> ';
if(checkedbox){
$out+=' <th class="oas-grid-checkbox" ';
if(head.tempHead&&head.tempHead.length>1){
$out+='rowspan=';
$out+=$escape(head.tempHead.length);
}
$out+='> <div class="oas-grid-th"> <label class="beauty-check"> <input type="checkbox"> <span></span> </label> </div> </th> ';
}else if( hasExpand){
$out+=' <th class="oas-grid-expand" ';
if(head.tempHead&&head.tempHead.length>1){
$out+='rowspan=';
$out+=$escape(head.tempHead.length);
}
$out+='> <div class="oas-grid-th"> </div> </th> ';
}
$out+=' ';
$each(head.front.data,function($value,$index){
$out+=' <th ';
if($value.sort=='asc'||$value.sort=='desc'){
$out+='class="is-sorted" ';
}
if($value.title){
$out+=' title="';
$out+=$escape($value.title);
$out+='"';
}
$out+=' name="';
$out+=$escape($value.name);
$out+='" ';
if(head.tempHead&&head.tempHead.length>1){
$out+='rowspan=';
$out+=$escape(head.tempHead.length);
}
$out+='> <div class="oas-grid-th"> ';
$out+=$string($value.label);
$out+=' ';
if($value.sort){
$out+=' <a class="sort-icon oasicon oasicon-';
$out+=$escape($value.sort);
$out+='" href="javascript:;"></a> ';
}
$out+=' ';
if(!colFilter&&$value.filters){
$out+=' <a class="filter-icon oasicon oasicon-filter" href="javascript:;"></a> ';
}
$out+=' </div> </th> ';
});
$out+=' </tr> ';
if(head.tempHead&&head.tempHead.length>1){
$out+=' ';
$each(head.tempHead,function($value,$index){
$out+=' ';
if($index !==0){
$out+=' <tr></tr> ';
}
$out+=' ';
});
$out+=' ';
}
$out+=' </thead> </table> </div> ';
}
$out+='  ';
if(head.center.data.length > 0 || head.tempHead){
$out+=' <div class="grid-main"> <table> <colgroup> <!--';
$each(head.center.data,function($value,$index){
$out+=' <col width="';
if($value._minWidth_){
$out+='*';
}else{
$out+=$escape($value.width);
}
$out+='"> ';
});
$out+=' --> ';
$each(head.center.colgroup,function($value,$index){
$out+=' <col width="';
if((!head.multipleHeader)&&(head.hasMinWidth!==false)&&($index==head.hasMinWidth)){
$out+='*';
}else{
$out+=$escape($value);
}
$out+='"> ';
});
$out+=' </colgroup> <thead> ';
if(head.multipleHeader && head.tempHead){
$out+=' ';
$each(head.tempHead,function($value,$index){
$out+=' <tr> ';
$each($value,function($value,$index){
$out+=' <th ';
if($value.sort=='asc'||$value.sort=='desc'){
$out+='class="is-sorted" ';
}
if($value.title){
$out+=' title="';
$out+=$escape($value.title);
$out+='"';
}
$out+=' name="';
$out+=$escape($value.name);
$out+='" ';
if($value._rowspan_>1){
$out+='rowspan =';
$out+=$escape($value._rowspan_);
}
$out+=' ';
if($value._colspan_>1){
$out+='colspan =';
$out+=$escape($value._colspan_);
}
$out+='> <div class="oas-grid-th"> ';
$out+=$string($value.label);
$out+=' ';
if($value.sort){
$out+=' <a class="sort-icon oasicon oasicon-';
$out+=$escape($value.sort);
$out+='" href="javascript:;"></a> ';
}
$out+=' ';
if(!colFilter&&$value.filters){
$out+=' <a class="filter-icon oasicon oasicon-filter" href="javascript:;"></a> ';
}
$out+=' </div> </th> ';
});
$out+=' </tr> ';
});
$out+=' ';
}else{
$out+=' <tr> ';
$each(head.center.data,function($value,$index){
$out+=' <th ';
if($value.sort=='asc'||$value.sort=='desc'){
$out+='class="is-sorted" ';
}
if($value.title){
$out+=' title="';
$out+=$escape($value.title);
$out+='"';
}
$out+=' name="';
$out+=$escape($value.name);
$out+='"> <div class="oas-grid-th"> ';
if($index !== 0){
$out+='<span class="col-line"></span>';
}
$out+=' ';
$out+=$string($value.label);
$out+=' ';
if($value.sort){
$out+=' <a class="sort-icon oasicon oasicon-';
$out+=$escape($value.sort);
$out+='" href="javascript:;"></a> ';
}
$out+=' ';
if(!colFilter&&$value.filters){
$out+=' <a class="filter-icon oasicon oasicon-filter" href="javascript:;"></a> ';
}
$out+=' </div> </th> ';
});
$out+=' </tr> ';
}
$out+=' </thead> </table> </div> ';
}
$out+='  ';
if(colOpts.data || (head.finale.data.length > 0)){
$out+=' <div class="grid-finale-fixed"> <table> <colgroup> <!--';
$each(head.finale.data,function($value,$index){
$out+=' <col width="';
if($value._minWidth_){
$out+='*';
}else{
$out+=$escape($value.width);
}
$out+='"> ';
});
$out+=' --> ';
$each(head.finale.colgroup,function($value,$index){
$out+=' <col width="';
if($value === true){
$out+='*';
}else{
$out+=$escape($value);
}
$out+='"> ';
});
$out+=' ';
if(colOpts.data){
$out+=' <col width="';
$out+=$escape(colOpts.width);
$out+='"> ';
}
$out+=' </colgroup> <thead> <tr> ';
$each(head.finale.data,function($value,$index){
$out+=' <th ';
if($value.sort=='asc'||$value.sort=='desc'){
$out+='class="is-sorted" ';
}
if($value.title){
$out+=' title="';
$out+=$escape($value.title);
$out+='"';
}
$out+=' name="';
$out+=$escape($value.name);
$out+='" ';
if(head.tempHead&&head.tempHead.length>1){
$out+='rowspan=';
$out+=$escape(head.tempHead.length);
}
$out+='> <div class="oas-grid-th">';
$out+=$string($value.label);
$out+=' ';
if($value.sort){
$out+=' <a class="sort-icon oasicon oasicon-';
$out+=$escape($value.sort);
$out+='" href="javascript:;"></a> ';
}
$out+=' ';
if(!colFilter&&$value.filters){
$out+=' <a class="filter-icon oasicon oasicon-filter" href="javascript:;"></a> ';
}
$out+=' </div> </th> ';
});
$out+=' ';
if(colOpts.data ){
$out+=' <th class="oas-grid-operator oas-grid-operator-';
$out+=$escape(colOpts.type);
$out+='" ';
if(head.tempHead&&head.tempHead.length>1){
$out+='rowspan=';
$out+=$escape(head.tempHead.length);
}
$out+='> <div class="oas-grid-th">操作</div> </th> ';
}
$out+=' </tr> ';
if(head.tempHead&&head.tempHead.length>1){
$out+=' ';
$each(head.tempHead,function($value,$index){
$out+=' ';
if($index !==0){
$out+=' <tr></tr> ';
}
$out+=' ';
});
$out+=' ';
}
$out+=' </thead> </table> </div> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],52:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"85043d360f4daea3d1ba21036d70b5bd"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTree/gridTree',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$string=$utils.$string,$out='';$out+='<tr tid="';
$out+=$escape($data.node.id);
$out+='" tlevel="';
$out+=$escape($data.node.level);
$out+='" pid="';
$out+=$escape($data.node.pid);
$out+='" isparent="';
$out+=$escape(""+$data.node.isParent);
$out+='" class="';
if($data.node.isOpen){
$out+='open';
}
if($data.node.isHide){
$out+=' tr-hide';
}
$out+='"> ';
$each($data.data,function($value,$index){
$out+=' ';
if($index == 0){
$out+=' <td style="padding-left:';
$out+=$escape(($value.level + 1) * 15 + 10);
$out+='px" class="td-first"> <a href="javascript:;"> <i class="toggle-icon';
if(!$value.isParent){
$out+=' hide';
}
$out+='"></i> <i class="';
$out+=$escape($value.icon);
$out+='" use="icon"></i> <span class="';
if($value.isParent == true){
$out+='deep';
}
$out+='">';
if($value.showLabel === undefined){
$out+=$escape($value.label);
}else{
$out+=$string($value.showLabel);
}
$out+='</span> </a> </td> ';
}else{
$out+=' <td>';
$out+=$string($value);
$out+='</td> ';
}
$out+=' ';
});
$out+=' </tr>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],53:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"522e709b7cd59550536e5b7d11d68d65"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/gridTree/gridTree_root',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,opts=$data.opts,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,$string=$utils.$string,$out='';if(opts !== null){
$out+=' <div class="oas-gridTree-head"> <div class="oas-grid-optBar clearfix"> <div class="oas-grid-option"> ';
$each(opts,function($value,$index){
$out+=' <a class="btn btn-sm btn-default';
if($value.className){
$out+=' ';
$out+=$escape($value.className);
}
$out+=' oas-grid-opt-btn';
if($value.disable){
$out+=' disabled';
}
$out+='"';
if($value.dataAction){
$out+=' data-action="';
$out+=$escape($value.dataAction);
$out+='"';
}
if($value.role){
$out+=' data-role="';
$out+=$escape($value.role);
$out+='"';
}
if($value.id){
$out+=' id="';
$out+=$escape($value.id);
$out+='"';
}
if($value.title){
$out+=' title="';
$out+=$escape($value.title);
$out+='"';
}
$out+=' href="';
if($value.href){
$out+=$escape($value.href);
}else{
$out+='javascript:;';
}
$out+='"> <i class="';
$out+=$escape($value.icon);
$out+='"></i> <span class="btn-text">';
$out+=$escape($value.label);
$out+='</span> </a> ';
});
$out+=' </div> </div> </div> ';
}
$out+=' <table class="oasGridTree"> <thead> <tr> ';
$each($data.head,function($value,$index){
$out+=' <th>';
$out+=$string($value.label);
$out+='</th> ';
});
$out+=' </tr> </thead> <tbody class="oas-gridTree-tbody"> ';
if($data.hasRoot && !$data.nodata){
$out+=' <tr class="gridTree-root open" tid="';
$out+=$escape($data.root.id);
$out+='"> ';
$each($data.head,function($value,$index){
$out+=' ';
if($index == 0){
$out+=' <td class="td-root"> <a href="javascript:;"> <i class="toggle-icon toggle"></i> <i class="';
$out+=$escape($data.root.icon);
$out+='" use="icon"></i> <span>';
$out+=$escape($data.root.label);
$out+='</span> </a> </td> ';
}else{
$out+=' <td>';
$out+=$string($data.root[$value.name]);
$out+='</td> ';
}
$out+=' ';
});
$out+=' </tr> ';
}
$out+=' ';
if($data.nodata){
$out+=' <tr> <td colspan="';
$out+=$escape($data.head.length);
$out+='"><div class="oas-no-data';
if($data.noDataStyle == 0){
$out+=' oas-min-style';
}
$out+='"><span class="oas-no-dataImg"></span><span class="oas-no-dataTip">对不起，暂无数据</span></div></td> </tr> ';
}
$out+=' </tbody> </table>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],54:[function(require,module,exports){
var treeTpl  	= require("./gridTree.tpl"),
	treeRootTpl = require("./gridTree_root.tpl");

module.exports = function(){
	$.oasUiFactory("oasGridTree", {
		VERSION: '1.0.0',
		options: {
			//根节点数据:{icon:"",label:"",selected:false}
			root:null,
			//表头部分数据
			head: null,
			//树的数据集合:[{icon:"",label:"",id:"",pid:"",disabled:false}]
			data: [],
			url: null,
			modelTpl: null,
			//树数据的数据形式，“array”为一维数组形式，“tree”树形形式
			dataType:"array",
			isInitOpen: false,
			//树有大小两种无数据样式0:小样式，1：大样式
			noDataStyle:0,
			// 表格的操作数据。
			opts: null
		},
		_create: function(){           
		    this._renderTree();
		    if(!!this.options.url){
		        this._initModel();
		    }
		},
		// 实际初始化和渲染树的方法
		_renderTree:function(){
		    this.bakData  =  $.extend(true,[],this.options.data);
			this.nodesString = [];
			this.arrayTypeData = [];
			this.tempBody = [];
			this._tidyData();
			this._generateKv();
			this._preRenderData();
			this._createDom(this._renderData);
			this._emit('afterRender',[this.options.data]);
			this._generateKv();
		},
		// 初始化数据渲染（当通过url传递数据时）
		_initModel: function(){
		    var that = this,
		    	modelTpl = this.options.modelTpl,
		    	_tpls;
		    if(!that.options.url) return;

		    that._model = oasisl.baseModel.extend({
		        statics: {
		            baseUrl: that.options.url
		        }
		    });

		    _tpls = this._model.tpl = {};
		    /**
		     * this.model.tpl 缓存改模型的模版
		     * 包含：create，update，detail
		     */
			if(this.options.modelTpl !== null){
				if(_.isObject(modelTpl)){
					for (var action in modelTpl) {
						$tplDom = $('#' + modelTpl[action]);
						_tpls[action] = {
							tpl: template.compile($tplDom.html()),
							width: $tplDom.attr('width'),
							height: $tplDom.attr('height')
						}
					}
				}else{
					/** String时 */
					_tpls.create = _tpls.detail = _tpls.update = {
						tpl: template.compile($('#' + modelTpl).html()),
						width: $('#' + modelTpl).attr('width'),
						height: $('#' + modelTpl).attr('height')
					}
				}
			}

		    that._model.list().then(function(res){
		        if(res.meta.status === 0){
		            that._iCall('data', [res.data]);
		            that._emit('afterRender',[res.data]);
		        }
		    });
		},
		//判断传过来的数据是树形结构还是数组结构
		_tidyData:function(){
			var data = this.bakData;
			var that = this;
			if(this.options.dataType === "tree"){
				this._tree2Array(data);
				this.bakData = this.arrayTypeData;
			}
			_.forEach(this.bakData,function(node,i){
				//为了减少循环次数把这块逻辑加进来
				if(that.options.dataType === "tree" && node.childList){
					delete node.childList;
				}
			})
		},
		//树形数据转换成数组
		_tree2Array:function(data){
			for (var i = 0; i < data.length; i++) {
				this.arrayTypeData.push(data[i]);
				if(data[i].childList && data[i].childList.length > 0){
					this._tree2Array(data[i].childList);
				}
			};
		},
		events: {
			//指定绑定事件的元素
			'target': function() {
				return this.$el;
			},
			'click td.td-first>a': function(self, evt) {
				var isParent = $(self).closest("tr").attr("isparent");
				var nexts = null;
				if(isParent === "true"){
					nexts = $(self).closest("tr").nextAll("[pid=" + $(self).closest("tr").attr("tid") + "]");
					$(self).closest("tr").toggleClass("open");
					if($(self).closest("tr").hasClass("open")){
						nexts.removeClass("tr-hide");
						this._findNexts(nexts);
					}else{
						nexts.addClass("tr-hide");
						this._findNexts(nexts,1);
					}
				}
			},
			'click td.td-root>a': function(self, evt) {
				var nexts = $(self).closest("tr").nextAll("[tlevel=0]");
				$(self).closest("tr").toggleClass("open");
				if($(self).closest("tr").hasClass("open")){
					nexts.removeClass("tr-hide");
					this._findNexts(nexts);
				}else{
					nexts.addClass("tr-hide");
					this._findNexts(nexts,1);
				}
				
			},
			'click [data-role="createModel"]': function(self, evt){
			    var that = this;
			    setTimeout(function(){
			         that._iCall('createModel');
			    }, 0);
			},

			'click [data-role="updateModel"]': function(self, evt){
			    var that = this;
			    setTimeout(function(){
			         that._iCall('updateModel');
			    }, 0);
			},
			'click [data-role="deleteModel"]': function(self, evt){
			    var that = this;
			    setTimeout(function(){
			         that._iCall('deleteModel');
			    }, 0);
			},
			'click [data-role="detailModel"]': function(){
			    var that = this;
			    setTimeout(function(){
			         that._iCall('detailModel');
			    }, 0);
			},
			// 表格操作按钮点击事件
			'click .oas-grid-opt-btn': function(self, evt){
			    if(!$(self).hasClass('oas-disabled')){
			        var index = $(self).index();
			        this._emit('optsClick', [this.options.opts[index]]);
			    }
			},
			// 行hover事件
			'mouseover tr': function(self, evt){
			    var $tbody = this.$el.find('.oas-gridTree-tbody');
			    if(!!$(self).closest('.oas-gridTree-tbody').size()){
			        $tbody.find('tr').removeClass('oas-gridTree-hover');
			        var index = $(self).index();
			        $tbody.find('tr').eq(index).addClass('oas-gridTree-hover');
			    }
			},
			// 行hover操作
			'mouseout tr': function(self, evt){
			    (!!$(self).closest('.oas-gridTree-tbody').size())&&this.$el.find('.oas-gridTree-tbody tr').removeClass('oas-gridTree-hover');
			},
			'click tr': function(self, evt){
			    var index = $(self).index();
			    this._selectOneRow(index);
			    this._emit('rowSelected', [$(self), index]);
			}
			
		},
		_selectOneRow: function(index){
		    this.$el.find('.oasGridTree tbody tr').removeClass('oas-gridTree-active');
		    this.$el.find('.oasGridTree tbody tr').eq(index).addClass('oas-gridTree-active');
		},
		_findNexts:function(nodes,status){
			var tempNexts = $.extend(true,[],nodes);
			var that = this;
			_.forEach(tempNexts,function(node,i){
				var isParent = $(node).attr("isparent");
				var isOpen = $(node).hasClass("open");
				if(isParent === "true"){
					var subs = $(node).nextAll("[pid=" + $(node).attr("tid") + "]");
					if(status){
						subs.addClass("tr-hide");
					}else{
						isOpen ? subs.removeClass("tr-hide") : subs.addClass("tr-hide");
					}
					if(status){
						that._findNexts(subs,1);
					}else{
						that._findNexts(subs);
					}
				}
			});
		},
		//创建数据
		_convert: function() {
			var data = this.bakData,
				result = [];
			for (var i = 0; i < data.length; i++) {
				var ri = data[i];
				data[i].checkType = this.options.checkType;
				for (var j = 0; j < data.length; j++) {
					data[j].isParent = false;
					for (var k = 0; k < data.length; k++) {
						if (data[k].pid == data[j].id) {
							data[j].isParent = true;
							break;
						}
					}
				}
				if (ri.pid != null && ri.pid != 'null' && ri.pid != -1) {
					for (var j = 0; j < data.length; j++) {
						var rj = data[j];
						if (rj.id == ri.pid) {
							rj.childList = !rj.childList ? [] : rj.childList;
							rj.childList.push(ri);
							break;
						}
					}
				}
				if (ri.pid == undefined || ri.pid == null || ri.pid == 'null' || ri.pid == -1 || this.kvNodes['' + ri.pid] === undefined) {
					result.push(ri);
				}
			}
			return result;
		},
		_transformTozTreeFormat: function() {
			var sNodes = this.bakData;
			var i,l;
			var r = [];
			var tmpMap = [];
			for (i=0, l=sNodes.length; i<l; i++) {
				sNodes[i].checkType = this.options.checkType;
				sNodes[i].isParent = false;
				tmpMap[sNodes[i]["id"]] = sNodes[i];
			}
			for (i=0, l=sNodes.length; i<l; i++) {
				if (tmpMap[sNodes[i]["pid"]] && sNodes[i]["id"] != sNodes[i]["pid"]) {
					tmpMap[sNodes[i]["pid"]].isParent = true;
					if (!tmpMap[sNodes[i]["pid"]]["childList"])
						tmpMap[sNodes[i]["pid"]]["childList"] = [];
						tmpMap[sNodes[i]["pid"]]["childList"].push(sNodes[i]);
				} else {
					r.push(sNodes[i]);
				}
			}
			return r;
		},
		//整合成kv数据，方便查找
		_generateKv:function(){
			var data =  this.bakData;
			var that = this;
			this.kvNodes = {};
			_.forEach(data, function(node, i) {
			 that.kvNodes['' + node.id] = node;
			});
		},
		_getParentNode:function(id){
			return this.kvNodes[''+this.kvNodes[''+id].pid];
		},
		//创建树子节点
		_createDom: function(data) {
			var $el = this.$el;
			var temp = {};
			// 用于存放 root 节点的row形式数据
			var tempArr = [];
			temp.hasRoot = false;
			temp.nodata = false;
			temp.head = this.options.head;
			if(this.options.root != null){
				temp.hasRoot = true;
				temp.root = this.options.root;
			}

			if(this.options.opts !== null){
				temp.opts = this.options.opts;
			}
			if(this.options.root != null){
				var head = this.options.head;
				//根节点row加入 根节点数据 
				tempArr.push(temp.root);
				for (var i = 1; i < head.length; i++) {
					var convertor = head[i]["dataRender"];
					if(convertor&& (typeof convertor === 'string')){  
	                    var value = template.compile(convertor)(temp.root);
	                    temp.root[head[i]["name"]] = value;
	                    //根节点row加入模板形式 
	                    tempArr.push(value);
	                }else{
	                	temp.root[head[i]["name"]] = temp.root[head[i]["name"]];
	                	//根节点row加入
	                	tempArr.push(temp.root[head[i]["name"]]);
	                }
				};
				// 将根节点row加入tempBody
				this.tempBody.push(temp.root);
			}
			if(data.length === 0){
				temp.nodata = true;
				temp.noDataStyle = this.options.noDataStyle;
				$el.empty().append(treeRootTpl(temp));
				return;
			}else{
				$el.empty().append(treeRootTpl(temp));
			}
			this.nodeLevel = 0;
			for (var i = 0; i < data.length; i++) {
				data[i].isFirstNode = (i == 0) ? true : false;
				data[i].isLastNode = (i == data.length - 1) ? true : false;
				this._loopNodes(data[i],0);
			}
			if($el.find(".gridTree-root") && $el.find(".gridTree-root").size() > 0){
				$el.find(".gridTree-root").after(this.nodesString.join(''));
			}else{
				$el.find("tbody").append(this.nodesString.join(''));
			}
		},
		//递归树节点
		_loopNodes: function(node,isSelf){
			if(!isSelf){
				this.nodeLevel = 0;
				node.level = this.nodeLevel;
			}
			node.isOpen = this.options.isInitOpen;	
			this.nodesString.push(treeTpl(this._tidyTreeData(node)));
			if(node.childList && node.childList.length > 0){
				this.nodeLevel = node.level;
				this.nodeLevel ++;
				for (var i = 0; i < node.childList.length; i++) {
					node.childList[i].level = this.nodeLevel;
					node.childList[i].isHide = (!node.isOpen) ? true : false;
					node.childList[i].isFirstNode = (i == 0) ? true : false;
					node.childList[i].isLastNode = (i == node.childList.length - 1) ? true : false;
				}
				for (var j = 0; j < node.childList.length; j++) {
					this._loopNodes(node.childList[j],1);
				}
			}
		},
		_tidyTreeData: function(node){
			var tempObj = {};
			var tempArr = [];
			tempObj.node = node;
			var head = this.options.head;
			// 2017-11-02 处理第一列模板情况
			var convertorFirst = head[0]["dataRender"];
			if(convertorFirst&& (typeof convertorFirst === 'string')){
				var value = template.compile(convertorFirst)(node);
                    node['showLabel'] = template.compile(convertorFirst)(node);
				    tempArr.push(node);
			}else if(head[0]["name"]!==undefined && head[0]["name"]!==''){
				node['showLabel'] = node[head[0]["name"]];
				tempArr.push(node);
			}else{
				tempArr.push(node);
			}

			// tempArr.push(node);
			for (var i = 1; i < head.length; i++) {
				var convertor = head[i]["dataRender"];
				if(convertor&& (typeof convertor === 'string')){  
                    var value = template.compile(convertor)(node);
                    tempArr.push(value);
                }else{
                	tempArr.push(node[head[i]["name"]]);
                }
			};
			tempObj.data = tempArr;
			this.tempBody.push(node);
			return tempObj;
		},
		_preRenderData: function() {
			this._renderData = this._transformTozTreeFormat();
		},
		_nodeData2nodeObj: function(v){
		    var nodeObj = {};
		    nodeObj.checkType = this.options.checkType;
		    nodeObj.disable = this.options.disable;
		    v.id !== undefined ? (nodeObj.id = v.id) : undefined;
		    v.label !== undefined ? (nodeObj.label = v.label) : undefined;
		    v.pid !== undefined ? (nodeObj.pid = v.pid) : undefined;
		    v.isParent !== undefined ? (nodeObj.isParent = v.isParent) : (nodeObj.isParent = false);
		    return nodeObj;
		},
		invoke: {
			//重置树节点数据
			data: function(data) {
				this.options.data = data;
				this._renderTree();
			},
			createModel: function(){//传入触发元素的jquery对象
				if(this.options.url === null){
					console.error("增、删、改、详情功能，只有在传递url的情况下生效");
					return false;
				}
			    var that = this,
			        createTpl = this._model.tpl.create;

			    var a = dialog.open({
			        title: '新建',
			        btn: ['确定', '取消'],
			        type: 1,
			        content: createTpl.tpl({}),
			        area: [createTpl.width, createTpl.height],
			        yes: function(index){

			        	var $form = $('#layui-layer'+ index).find('form');
			        	if(!$form.valid()) return;

			        	var obj = oasisl.form.objectify($($form));
			        	obj = $.extend(true, {}, obj);
			            that._iCall('addRowRemote', [obj, function(res){
			                if(res.meta.status === 0){
			                    dialog.close(index);
			                }
			                that._emit('afterCreateModel', [res]);
			            }]);
			        }
			    });
			},
			updateModel: function(){
				if(this.options.url === null){
					console.error("增、删、改、详情功能，只有在传递url的情况下生效");
					return false;
				}
				var row = this._iCall('getSelectedRow'),
			    	updateTpl = this._model.tpl.update,
			        that = this;
		        if(!row) {
		            dialog.msg('请指定需要修改的数据',{icon: 11});
		            return;
		        }

			    dialog.open({
			        title: '编辑',
			        btn: ['确定', '取消'],
			        type: 1,
			        content: updateTpl.tpl(row),
			        area: [updateTpl.width, updateTpl.height],
			        yes: function(index){

			        	var $form = $('#layui-layer'+ index).find('form');
    			        if(!$form.valid()) return;
    			        var obj = oasisl.form.objectify($($form));
			        	obj = $.extend({}, {id:row.id}, obj);		        

			            that._iCall('updateRowRemote', [obj,function(res){
			                if(res.meta.status === 0){
			                    dialog.close(index);
			                }
			                that._emit('afterUpdateModel', [res]);
			            }]);
			        }
			    })
			},
			deleteModel: function(){
				if(this.options.url === null){
					console.error("增、删、改、详情功能，只有在传递url的情况下生效");
					return false;
				}
				var row = this._iCall('getSelectedRow'),
			        that = this;
		        if(!row) {
		            dialog.msg('请指定需要删除的数据',{icon: 11});
		            return;
		        }

		        dialog.confirm('确定要删除该条记录吗？', function(){
		            that._iCall('deleteRowRemote', [row.id, function(res){
		                that._emit('afterDeleteModel', [res]);
		            }]);
		        });
			},
			detailModel: function(){
				if(this.options.url === null){
					console.error("增、删、改、详情功能，只有在传递url的情况下生效");
					return false;
				}
			    var row = this._iCall('getSelectedRow'),
					detailTpl = this._model.tpl.detail;
				if(!row) {
		            dialog.msg('请指定需要展示详情的数据',{icon: 11});
		            return;
		        }
			    dialog.open({
			        title: '详情',
			        type: 1,
			        content: detailTpl.tpl(row),
			        area: [detailTpl.width, detailTpl.height],
			        btn: ['关闭']
			    });
			},
			addRowRemote: function(obj, callback){
			    var that = this;
			    if(this._model) {
			        this._model.save(obj).then(function(res){
			            if(res.meta.status === 0) {
			            	that.options.data.push(res.data);
			                dialog.msg(res.meta.message, {icon: 1});

			                var maxIndex = that.$el.find('.oasGridTree tbody tr[pid="'+res.data.pid+'"]').length - 1;

			                //没有父节点
			                if(res.data.pid === '-1'){
			                	res.data.level = 0;
			                	res.data.isParent = false;
			                	$(treeTpl(that._tidyTreeData(res.data))).appendTo(that.$el.find('.oasGridTree tbody'));
			                //有父节点没有同级子节点
			                }else if(maxIndex === -1){
			                	res.data.level = (+that.$el.find('.oasGridTree tbody tr[id="'+res.data.pid+'"]').attr('tlevel'))+1;
			                	res.data.isParent = false;
			                	$(treeTpl(that._tidyTreeData(res.data))).insertAfter(that.$el.find('.oasGridTree tbody tr[id="'+res.data.pid+'"]'));
			                }else{
			                	//有同级子节点
			                	res.data.level = (+that.$el.find('.oasGridTree tbody tr[pid="'+res.data.pid+'"]').attr('tlevel'));
			                	res.data.isParent = false;
			                	$(treeTpl(that._tidyTreeData(res.data))).insertAfter(that.$el.find('.oasGridTree tbody tr[pid="'+res.data.pid+'"]:eq('+maxIndex+')'));
			                }
			                
			                // that._iCall('data', [that.options.data]);
			            }else{
			                dialog.msg(res.meta.message, {icon: 11})
			            }
			            callback && callback(res);
			        });
			    }
			},
			updateRowRemote: function(obj, callback){
			    var that = this;
			    if(this._model) {
			        this._model.update(obj).then(function(res){
			        	
			            if(res.meta.status === 0) {
			            	for(var i = 0 ; i<that.options.data.length;i++){
			            		if(that.options.data[i].id === res.data.id){
			            			that.options.data[i] = res.data
			            		}
			            	}
			                dialog.msg(res.meta.message, {icon: 1});
			                res.data.level = +that.$el.find('.oasGridTree tbody tr[tid="'+res.data.id+'"]').attr('tlevel');
			                res.data.isParent = that.$el.find('.oasGridTree tbody tr[tid="'+res.data.id+'"]').attr('isParent')==='true' ? true : false;
			                that.$el.find('.oasGridTree tbody tr[tid="'+res.data.id+'"]').replaceWith(treeTpl(that._tidyTreeData(res.data)));
			                // that._iCall('data', [that.options.data]);
			            }else{
			                dialog.msg(res.meta.message, {icon: 11})
			            }
			            callback && callback(res);
			        });
			    }
			},
			deleteRowRemote: function(nodeid, callback){
			    var that = this,
			        node = {};
			    node.id = nodeid;
			    if(!this._model) return;
			    this._model.destory(node).then(function(res){
			         if(res.meta.status === 0) {
			         	var newData=that.options.data;
			         	newData.forEach(function(v,i){
			         	    if (v.id==node.id) {
			         	        _.remove(newData, v);
			         	    }

			         	});
			         	!function getNeedDeleteNodes(id){
			         	    var currentId, delArr = [];
			         	  newData.forEach(function(v,i){
			         	     if(v.pid==id){                     
			         	        delArr.push(v)
			         	     }
			         	  });
			         	  delArr.forEach(function(v) {
			         	    _.remove(newData, v);
			         	    getNeedDeleteNodes(v.id);
			         	  });

			         	}(node.id);

			         	// 删除元素
			         	that.$el.find('.oasGridTree tbody tr[tid="'+node.id+'"]').remove();
			         	that.$el.find('.oasGridTree tbody tr[pid="'+node.id+'"]').remove();

			         	// that._iCall('data', [newData]);
			            dialog.msg(res.meta.message, {icon: 1});
			         }else{
			             dialog.msg(res.meta.message, {icon: 11})
			         }
			        callback && callback(res);
			    });
			},
			disable: function(nodeid){
			    var that = this;
		        	var newData=$.extend(true,[],that.options.data);
		         	newData.forEach(function(v,i){
		         	    if (v.id==nodeid) {
		         	        _.remove(newData, v);
		         	    }

		         	});
		         	!function getNeedNotDisableNodes(id){
		         	    var currentId, delArr = [];
		         	  newData.forEach(function(v,i){
		         	     if(v.pid==id){                     
		         	        delArr.push(v)
		         	     }
		         	  });
		         	  delArr.forEach(function(v) {
		         	    _.remove(newData, v);
		         	    getNeedNotDisableNodes(v.id);
		         	  });

		         	}(nodeid);
		         	for(var i=0;i<that.options.data.length;i++){
		         		for(var j=0 ; j<newData.length ;j++){
		         			if(newData[j].id === that.options.data[i].id){
		         				continue;
		         			}else if(newData[j].id !== that.options.data[i].id && j==(newData.length-1)){
		         				that.options.data[i].disabled = true;
		         			}

		         		}

		         	}
		            that._iCall('data', [that.options.data]);

			},
			/**
			 * [getSelectedRow description]
			 * @DateTime  2017-07-08
			 * @copyright [copyright]
			 * @license   [license]
			 * @version   [version]
			 * @return    {[type]}    [返回数组，依次为每列的数据，其中第一列为节点数据]
			 */
			getSelectedRow: function(){//获取单行
			    var $tr = this.$el.find('.oas-gridTree-active').eq(0);
			    var row;
			    if(this.tempBody && $tr){
			    	_.filter(this.tempBody,function(o) {
			    		if(o.id === $tr.attr('tid')){
			    			row = o;
			    		}
			    	});
			    }
			    return row;
			}
		}
		
	});
}

},{"./gridTree.tpl":52,"./gridTree_root.tpl":53}],55:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"34532f77f4b5ebc95949d2c338625d8a"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/guide/guide',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$each=$utils.$each,data=$data.data,$value=$data.$value,$index=$data.$index,current=$data.current,$escape=$utils.$escape,$out='';$out+='<ul class="clearfix"> ';
$each(data,function($value,$index){
$out+=' <li class="';
if($index == current-1){
$out+='oas-guide-active ';
}
if($index == current -2){
$out+='guide-active-prev ';
}
$out+=' ';
if($index < current -1){
$out+='oas-guide-complete ';
}
if($index == data.length-1){
$out+='last';
}
$out+='" title="';
$out+=$escape($value.title);
$out+='"> <span class="guide-number"> <span>';
$out+=$escape($index+1);
$out+='</span> <i class="oasicon oasicon-succeed"></i> </span> <span class="guide-text">';
$out+=$escape($value.label);
$out+='</span> </li> ';
});
$out+=' </ul>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],56:[function(require,module,exports){

/*
 * @desc formtip组件
 * @anthor jyye
 * @Date 2016-04-06
 */

var guideTpl  = require("./guide.tpl");

module.exports = function(){
	
    $.oasUiFactory("oasGuide", {
        options: {
            //分布引导样式，目前分为styleA，styleB两级
            style:'styleA',
            //分步的标题
            data: null,
            //当前的位置
            current: 1  
        },

         _create : function() {
           this._preRenderData();
        },

        // 准备所有需要渲染的数据
        _preRenderData: function() {
            var options = this.options,
                _renderData = {},
                data = this.data || (this.data = options.data),
                current = options.current;

            this._renderData = _renderData = {
                data: data,
                current: current
            };

            this._createDom();

        },

        /**创建dom节点**/
        _createDom: function() {
            var html = guideTpl(this._renderData),
                $el = this.$el,
                options = this.options;

            $el.addClass('oas-guide').addClass(options.style);
            $el.empty().append(html);
            
        },

        invoke: {
            //设置current
            current:function(_current){
                var options = this.options;
                options.current = _current;
                this._preRenderData();
            }
        }
        
    });
    
}
},{"./guide.tpl":55}],57:[function(require,module,exports){

/*
 * @desc nprogress组件，依赖于开源组件nprogress
 * 
 */

var nprogress    = require('../../../plugins/nprogress/nprogress'),
    nprogressCss = require('../../../plugins/nprogress/nprogress.css');

},{"../../../plugins/nprogress/nprogress":110,"../../../plugins/nprogress/nprogress.css":109}],58:[function(require,module,exports){

/*
 * @desc numberRoll组件
 * @anthor pwang
 * @Date 2016-04-29
 */

var digitTpl  = require("./numroll_digit.tpl"),
    numberTpl = require("./numroll_number.tpl"),
    pointTpl  = require("./numroll_point.tpl"),
    valueTpl  = require("./numroll_value.tpl");
module.exports = function(){
    $.oasUiFactory("oasNumberRoll", {
        options: {
            initNum : 0,
            comma : true,
            digit : false
        },

        _create: function(){
            var toNum = this.options.initNum - 0;
            this.currentNum = toNum;
            this._createDom();
            if(toNum!==0) {
                this._moveTo(0,toNum);
            }
        },

        _createDom: function() {
            var $el = this.$el,
                domTpl = valueTpl(),
                numberHtml = numberTpl({type:"integer"});

            $el.addClass("oas-number-roll");
            $el.append(domTpl);
            $el.find(".oas-number-roll-val").before(numberHtml);
            //获取高度
            this.numHeight = parseInt($el.find(".oas-number-content").css("font-size")) || $el.find(".oas-number-content").height();
        },

        _moveTo : function(start,end) {
            var digit = this.options.digit;
                /*
                 * 暂时解决unitNum为0时的bug，后续更改待定
                 * add by lqBai 2017.9.12 
                 */ 
                digit.unitNum =  (digit.unitNum <= 0) ? 1 : digit.unitNum;
            var end = digit?end/(digit.unitNum):end,
                end = digit.formatter?digit.formatter(end):end,
                $itgArr = [].reverse.call(this.$el.find(".oas-integer-number")),
                $flArr = this.$el.find(".oas-float-number"),
                compareObj = this._compare(start,end),
                itgChangeObj = compareObj.itgChangeObj,
                flChangeObj = compareObj.flChangeObj,
                len1 = Math.max($itgArr.length,itgChangeObj.length),
                len2 = Math.max($flArr.length,flChangeObj.length),
                i = 0,j = 0;

                //整数
                for(;i<len1;i++) {
                    (function(index,that) {
                        var $itg = $itgArr.eq(index),
                            changeObj = itgChangeObj[index];

                        if(changeObj.index==undefined){

                        } else if($itg.length==0) {
                            that._mvUnToNum.call(that,undefined,changeObj.to);   
                        } else if(!changeObj.to) {
                            that._mvNumToUn.call(that,changeObj.from,undefined,$itgArr.eq(i));   
                        } else {
                            that._mvNumToNum.call(that,changeObj.from,changeObj.to,$itgArr.eq(i));
                        }

                    })(i,this);
                }
                //小数部分
                if(flChangeObj.length!==0&&flChangeObj[0].to===undefined) {
                    this._deleteAllFl();
                } else if(flChangeObj.length!==0&&$flArr.length===0){
                    this._addFloatPoint();
                }
                for(;j<len2;j++) {
                    (function(index,that) {
                        var $fl = $flArr.eq(index),
                            changeObj = flChangeObj[index],
                            boolA = changeObj.to==undefined?"0":"1",
                            boolB = $fl.length===0?"0":"1",
                            bool = boolA+boolB;

                        switch(bool) {
                            case "00" : {
                                break;
                            };
                            case "01" : {
                                that._mvNumToUn.call(that,changeObj.from,undefined,$fl);
                                break;
                            };
                            case "10" : {
                                that._mvUnToNum.call(that,undefined,changeObj.to,"float");   
                                break;
                            };
                            case "11" : {
                                that._mvNumToNum.call(that,changeObj.from,changeObj.to,$fl);
                                break;
                            };
                        }
                    })(j,this);
                }
                if(digit&&this.$el.find(".oas-digit-number").length===0) {
                    this.$el.find(".oas-number-roll-val").after(digitTpl({
                        type:'digit',
                        name:digit.unit
                    }))
                }
                this._setCurrentNum(end);
        },

        //删除
        _deleteAllFl : function() {
            this.$el.find(".oas-float-number").remove();
            this.$el.find(".oas-fl-point-number").remove();
        },

        //增加小数点
        _addFloatPoint:function() {
            var flPointTpl = pointTpl({type:"fl-point"});
            this.$el.find(".oas-number-roll-val").before(flPointTpl);
        },

        _mvNumToNum : function(from,to,$dom) {
            var fromNum = from - 0,
                toNum = 0-to,
                numHeight = this.numHeight;
            if(from===to) {
                $dom.find(".oas-number-content").removeClass("hide");
                return;
            }
            $dom.find(".oas-other").removeClass("hide");
            $dom.find(".oas-number-content").addClass("hide");
            $dom.find(".oas-other").animate({
                top : this.numHeight*toNum
            },function() {
                $dom.find(".oas-number-content").text(-toNum);
                $dom.find(".oas-number-content").removeClass("hide");
                $dom.find(".oas-other").addClass("hide");
            });
        },

        _mvUnToNum : function(from,to,type) {
            var $el = this.$el,
                type =  type || "integer",
                $numberTpl = $(numberTpl({type:type}));
            
            if(type==="integer") {
                $el.find(".oas-number").eq(0).before($numberTpl);
            } else {
                $el.find(".oas-number-roll-val").before($numberTpl);
            }
            $el.find(".oas-other").removeClass("hide");
            if(to!==",") {
                var toNum = 0-to;
                $numberTpl.find(".oas-other").animate({
                    top : this.numHeight*toNum
                },function() {
                    $numberTpl.find(".oas-number-content").text(-toNum||to);
                    $numberTpl.find(".oas-number-content").removeClass("hide");
                    $el.find(".oas-other").addClass("hide");
                })
            } else {
                $numberTpl.addClass("oas-number-comma");
                $numberTpl.find(".oas-other").css("top",-this.numHeight*10);
                $numberTpl.find(".oas-number-content").text(-toNum||to);
                $numberTpl.find(".oas-number-content").removeClass("hide");
                $el.find(".oas-other").addClass("hide");
            }
        },

        _mvNumToUn : function(from,to,$dom) {
            $dom.remove();
        },

        _compare : function(start,end) {
            var startObj = this._numberToObj(start),
                startObjFlArr = startObj.flArr,
                startObjItgArr = startObj.itgArr,
                endObj = this._numberToObj(end),
                endObjFlArr = endObj.flArr,
                endObjItgArr = endObj.itgArr,
                i = 0,j = 0,intChangeArr = [],flChangeArr = [];

            //比较整数部分和小数部分
            var len1 = Math.max(startObjItgArr.length,endObjItgArr.length);
            var len2 = Math.max(startObjFlArr.length,endObjFlArr.length);
            var itgChangeObj = this._getCompareObj(startObjItgArr,endObjItgArr,len1);
            var flChangeObj = this._getCompareObj(startObjFlArr,endObjFlArr,len2);
            return {
                itgChangeObj : itgChangeObj,
                flChangeObj : flChangeObj
            }
        },

        _getCompareObj : function(startObjArr,endObjArr,length) {
            var i = 0,
                changeArr = [];
            for(;i<length;i++) {
                if(i===startObjArr) {
                    for(;i<endObjArr.lenth;i++) {
                        changeArr.push({
                            index:i,
                            from:undefined,
                            to:endObjItgArr[i]
                        });
                    }
                    break;
                }
                if(i===endObjArr) {
                    for(;i<startObjArr.lenth;i++) {
                        changeArr.push({
                            index:i,
                            from:startObjArr[i],
                            to:undefined
                        });
                    }
                    break;
                }
                changeArr.push(this._computeChange(startObjArr[i],endObjArr[i],i));
            }
            return changeArr;
        },

        _numberToObj : function(num) {
            var numStr = String(num),
                numObj = numStr.split("."),
                flStr = numObj.length===2?numObj[1]:"",
                itgStr = this._isNeedComma() ? this._addComma(numObj[0]) : this._reverseString(numObj[0]);
            return {
                flArr : this._stringToArr(flStr),
                itgArr : this._stringToArr(itgStr)
            }
        },

        _reverseString : function(str) {
            return str.split("").reverse().join("");
        },

        _isNeedComma : function() {
            return this.options.comma;
        },

        _addComma : function(intStr) {
            var intArrRev = this._stringToArr(intStr).reverse(),
                newIntStr = "";
            for(var i=0,len=intArrRev.length;i<len;i++) {
                if(i!==0&&i%3==0) {
                    newIntStr += ",";
                }
                newIntStr += intArrRev[i];
            }
            return newIntStr;
        },

        _computeChange : function(start,end,i) {
            return {
                index:i,
                from:start,
                to:end
            }
        },

        _stringToArr : function(str) {
            return str.split("");
        },

        _getCurrentNum : function() {
            return this.currentNum || 0;
        },

        _setCurrentNum : function(currentNum) {
            this.currentNum = currentNum;
            this.$el.find(".oas-number-roll-val").val(currentNum);
        },
        // 对外方法集
        invoke: {
            setNumber : function(target) {
                this._moveTo(this.currentNum,target);
            },
            getNumber : function() {
                return this._getCurrentNum();
            }
        }
    });
}
},{"./numroll_digit.tpl":59,"./numroll_number.tpl":60,"./numroll_point.tpl":61,"./numroll_value.tpl":62}],59:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"02889cbd3150fb5d2ef5786ec255c96c"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/numberRoll/numroll_digit',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,type=$data.type,name=$data.name,$out='';$out+='<div class="oas-number oas-';
$out+=$escape(type);
$out+='-number"> <div class="oas-';
$out+=$escape(type);
$out+='-number-wrap"> <div class="oas-number-text oas-number-content">';
$out+=$escape(name);
$out+='</div> </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],60:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"cd999edb69c3b1519e1da5dcc46ccafd"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/numberRoll/numroll_number',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,type=$data.type,$out='';$out+='<div class="oas-number oas-';
$out+=$escape(type);
$out+='-number"> <div class="oas-';
$out+=$escape(type);
$out+='-number-wrap"> <div class="oas-number-text oas-number-content hide">0</div> <ul class="oas-other"> <li class="oas-number-text">0</li> <li class="oas-number-text">1</li> <li class="oas-number-text">2</li> <li class="oas-number-text">3</li> <li class="oas-number-text">4</li> <li class="oas-number-text">5</li> <li class="oas-number-text">6</li> <li class="oas-number-text">7</li> <li class="oas-number-text">8</li> <li class="oas-number-text">9</li> <li class="oas-number-text">,</li> </ul> </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],61:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"d71549c7e6843d256fcd4b6890405beb"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/numberRoll/numroll_point',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,type=$data.type,$out='';$out+='<div class="oas-number oas-';
$out+=$escape(type);
$out+='-number"> <div class="oas-';
$out+=$escape(type);
$out+='-number-wrap"> <div class="oas-number-text oas-number-content">.</div> </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],62:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"36acc29d02e4b7ae8227265a4fca80b8"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/numberRoll/numroll_value','<input class="oas-number-roll-val" type="hidden" value="0">');
},{"../../../lib/runtime/runtime":7}],63:[function(require,module,exports){
var Position = require("../position/index");
	panelTpl = require("./panel.tpl"),	

module.exports = function(){
	$.oasUiFactory("oasOperate", {
		options: {

			// 操作板子集打开方式，可以选择click|hover，默认为click
			trigger: 'click',

			// 延时打开操作板子集(ms),当trigger为hover时生效
			delay: 150,

			/**操作面板数据集合,如果操作项中有复制剪切板功能的多传一个字段copyContent,目前只支持一级剪切板:[{iconClass:"",text:"",id:"",pid:"",copyContent:"",disable:false},{iconClass:"",text:"",id:"",pid:""}]**/
			data: [],

			//打开操作板的目标元素
			target: '',

			// 操作面板位置偏移量，用于微调,默认值为[0,0]
			offset: [0, 0],

			//放在触发元素的哪一侧
			placement:'auto',

			//位置，绝对位置
			position: null,

			//放置面板的父元素
			content: null

			//打开回调函数
			// onOpen: function() {},

			//关闭回调函数
			// onClose: function() {},

			//点击后的回调
			// onSelected: function(option,target){},

			//增加打开之前的回调
			// beforeOpen: function(){}
		},

		// 事件
		events: {
			'mouseover .expand-menu>li': function(self, evt) {
				if (this.options.trigger == "hover") {
					var index = $(self).attr("index"),
						id = this.mainList[index].id;
					$(self).siblings(".open").children(".second-menu").remove();
					if($(self).hasClass("oas-disable")){
						return;
					}
					$(self).addClass("open");
					this.subOneList = this._createList(id);
					this.layoutRule.vertical = 'bottom';
					this._createSubDom(this._preRenderData(this.subOneList, 1, self), self);
				}
				//return false;
			},
			'mouseleave .oas-operate': function(self, evt) {
				//return false;
			},
			'mouseover .first-menu>li': function(self, evt) {
				if (this.options.trigger == "hover") {
					$(self).parent().next().find("li.open").children(".second-menu").remove();
				}
				//return false;
			},
			'mouseover .second-menu>li': function(self, evt) {
				if (this.options.trigger == "hover") {
					var index = $(self).attr("index"),
						id = this.subOneList[index].id;
					$(self).siblings(".open").children(".third-menu").remove();
					if($(self).hasClass("oas-disable")){
						return;
					}
					if (this.subOneList[index].hasChild) {
						$(self).addClass("open");
						this.subTwoList = this._createList(id);
						this.layoutRule.vertical = 'bottom';
						this._createSubDom(this._preRenderData(this.subTwoList, 2, self), self);
					}
				}
				//return false;
			},
			'click .expand-menu>li': function(self, evt) {
				if (this.options.trigger == "click") {
					var index = $(self).attr("index"),
						id = this.mainList[index].id;
					$(self).siblings(".open").children(".second-menu").remove();
					if($(self).hasClass("oas-disable")){
						return;
					}
					$(self).addClass("open");
					this.subOneList = this._createList(id);
					this.layoutRule.vertical = 'bottom';
					this._createSubDom(this._preRenderData(this.subOneList, 1, self), self);
				}
				return false;
			},
			'click .first-menu>li': function(self, evt) {
				var index = $(self).attr("index");
				$(self).parent().next().find("li.open").children(".second-menu").remove();
				if($(self).hasClass("oas-disable")){
					return;
				}
				this._emit('selected',[this.mainList[index],this.$target]);
				this._iCall('close');
				return false;
			},
			'click .second-menu>li': function(self, evt) {
				var index = $(self).attr("index"),
					id = this.subOneList[index].id;
				if (this.options.trigger == "click") {
					$(self).siblings(".open").children(".third-menu").remove();
					if($(self).hasClass("oas-disable")){
						return;
					}
					if (this.subOneList[index].hasChild) {
						$(self).addClass("open");
						this.subTwoList = this._createList(id);
						this.layoutRule.vertical = 'bottom';
						this._createSubDom(this._preRenderData(this.subTwoList, 2, self), self);
					}else{
						this._emit('selected',[this.subOneList[index],this.$target]);
						this._iCall('close');
					}
				}else if(this.options.trigger == "hover"){
					if($(self).hasClass("oas-disable")){
						return;
					}
					if (!this.subOneList[index].hasChild) {
						this._emit('selected',[this.subOneList[index],this.$target]);
						this._iCall('close');
					}
				}
				return false;
			},
			'click .third-menu>li': function(self, evt) {
				if($(self).hasClass("oas-disable")){
					return;
				}
				var index = $(self).attr("index");
				this._emit('selected',[this.subTwoList[index],this.$target]);
				this._iCall('close');
				return false;
			}
		},
		//创建组件入口
		_create: function() {
			this.$target = null;
			if(this.options.data != null && this.options.data.length > 0){
				if(this.options.position){
					this.openType = 0;
					this._initData();
					this._openByPosition();
					this._bindOuterClick();
				}else{
					this.openType = 1;
					this._initData();
					this._openOverLay();
					this.$target = $(this.options.target);
				}
			}
		},
		//如果是坐标初始化需绑定该事件
		_bindOuterClick:function(){
			var self = this;
			$(document).on('click.oasOperate', function(e){
				if($(e.target).parents('.oas-operate').size()<1 && !$(e.target).is('.oas-operate') && $(e.target).parents('.oas-operate').size()<1 && !$(e.target).is('.oas-operate')){
					self._iCall('close');
					$(document).off('click.oasOperate');
				}
			});
		},
		//初始化数据
		_initData:function(){
			//初始化全局变量
			this._initParam();
			//整合数据
			this._tidyData();
		},
		//初始化全局变量
		_initParam: function() {
			this.layoutRule = {
				horizontal: 'right',
				vertical: 'bottom'
			};
			this.mainList = [];
			this.subOneList = [];
			this.subTwoList = [];
		},
		//整合数据
		_tidyData: function() {
			this.mainList = this._createList("0");
			this._createDom(this._preRenderData(this.mainList, 0));
		},
		//创建数据
		_createList: function(id) {
			var list = this.options.data,
				tempList = [],
				returnlist = [],
				num = 0,
				tempObj = null;
			for (var i = 0, len = list.length; i < len; i++) {
				if (list[i].pid == id) {
					tempList.push(list[i]);
				}
			}
			for (var i = 0, len = tempList.length; i < len; i++) {
				for (var j = 0, lens = list.length; j < lens; j++) {
					if (tempList[i].id == list[j].pid) {
						tempList[i].hasChild = true;
						break;
					}
				}
				if (tempList[i].hasChild) {
					returnlist.push(tempList[i]);
				} else {
					returnlist.unshift(tempList[i]);
				}
			}
			tempList = [];
			for (var i = 0; i < returnlist.length; i++) {
				if(!returnlist[i].hasChild){
					tempList.push(returnlist[i]);
					num ++;
				}
			};
			tempList.reverse();
			returnlist.splice(0,num);
			return tempList.concat(returnlist);
		},
		//准备渲染的数据
		_preRenderData: function(list, level, parentNode) {
			var options = this.options,
				hasChild = false,
				_renderData = {};
			for (var i = 0, len = list.length; i < len; i++) {
				if (list[i].hasChild) {
					hasChild = true;
					break;
				};
			};
			if (parentNode) {
				this._judgeLayOut(parentNode,list);
			}
			return _renderData = {
				hasChild: hasChild,
				list: list,
				level: level,
				layout:this.layoutRule
			};
		},
		//创建dom节点
		_createDom: function(_renderData) {
			var html = panelTpl(_renderData),
			outerContent = this.options.content;
			if(this.openType){
				var $el = this.$el;
				$el.addClass('oas-operate').addClass("opt-panel");
				$el.empty().append(html);
				if(outerContent){
					outerContent.append($el);
				}else{
					$('body').append($el);
				}
			}else{
				this.$el.addClass('oas-operate').addClass("opt-panel").empty().append(html);
				if(outerContent){
					outerContent.append($el);
				}else{
					$('body').append(this.$el);
				}
			}
		},
		//创建子dom节点
		_createSubDom: function(_renderData, parentNode) {
			var html = panelTpl(_renderData),
				$el = this.$el;
			if ($(parentNode).has("ul").length == 0) {
				$(html).appendTo($(parentNode));
			}
		},
		//按照position方式打开
		_openByPosition:function(){
			var position = this.options.position,
				$el = this.$el,
				thisLeft = position.left, //left值
				thisTop = position.top,
				thisHeight = $el.outerHeight(), 
				thisWidth = $el.outerWidth(), 
				left = position.left, //left值
				top = position.top,
				win = {
					height: $(window).height(),
					width: $(window).width(),
					scrollTop: $(window).scrollTop(),
					scrollLeft: $(window).scrollLeft()
				};
			$el.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite").addClass("left-arrow");
			if (win.width + win.scrollLeft - thisLeft - thisWidth< 0) {
				$el.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite").addClass("right-arrow");
				left = thisLeft - thisWidth;
			}
			if (win.height + win.scrollTop - thisTop - thisHeight < 0) {
				$el.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite").addClass("left-arrow");
				top = thisTop - thisHeight;
				$el.find(".operate-arrow").addClass("opposite");
			}
			if (win.height + win.scrollTop - thisTop - thisHeight < 0 && win.width + win.scrollLeft - thisLeft - thisWidth < 0) {
				$el.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite").addClass("right-arrow");
				left = thisLeft - thisWidth;
				top = thisTop - thisHeight;
				$el.find(".operate-arrow").addClass("opposite");
			}
			$el.css("left",left);
			$el.css("top",top);
			
		},
		//判断错位展示
		_judgeLayOut: function(target,list) {
			var position = Position.location(target,"fixed"),
				result = {},
				layoutRule = this.layoutRule;
			if(position.right-191 >= 0){
				result.right = true;
			}else {
				result.right = false;
			}
			if(position.left-191 >= 0){
				result.left = true;
			}else {
				result.left = false;
			}
			if(position.top-((list.length-1)*30 + 6) >= 0){
				result.top = true;
			}else {
				result.top = false;
			}
			if(position.bottom-((list.length-1)*30 + 6) >= 0){
				result.bottom = true;
			}else {
				result.bottom = false;
			}
			if(layoutRule.horizontal == "right"){
				if(result.right){
					layoutRule.horizontal = "right";
				}else{
					if(result.left){
						layoutRule.horizontal = "left";
					}else{
						layoutRule.horizontal = "right";
					}
				}
			}
			if(layoutRule.horizontal == "left"){
				if(result.left){
					layoutRule.horizontal = "left";
				}else{
					if(result.right){
						layoutRule.horizontal = "right";
					}else{
						layoutRule.horizontal = "left";
					}
				}
			}
			if(layoutRule.vertical == "bottom"){
				if(result.bottom){
					layoutRule.vertical = "bottom";
				}else{
					if(result.top){
						layoutRule.vertical = "top";
					}else{
						layoutRule.vertical = "bottom";
					}
				}
			}
			if(layoutRule.vertical == "top"){
				if(result.top){
					layoutRule.vertical = "top";
				}else{
					if(result.bottom){
						layoutRule.vertical = "bottom";
					}else{
						layoutRule.vertical = "top";
					}
				}
			}
		},
		//用overlay打开
		_openOverLay: function() {
			var options = this.options,
				thisEl = this.$el,
				self = this,
				elem = options.target,
				trig = options.trigger,
				delay = options.delay,
				placement = this.options.placement,
				thisHeight = this.$el.outerHeight(), //气泡高度
				thisWidth = this.$el.outerWidth(), //气泡宽度
				x = options.offset[0], //x轴偏移量
				y = options.offset[1], //y轴偏移量
				outerContent = options.content,
				win = {
					height: $(window).height(),
					width: $(window).width(),
					scrollTop: $(window).scrollTop(),
					scrollLeft: $(window).scrollLeft()
				};
			thisEl.oasOverlay({
				target: $(elem),
				triggerType: trig,
				delay: delay,
				parentNode:outerContent,
				align: {
					// 基准定位元素，默认为当前的可视区域
					baseElement: elem,
					// 基准定位元素的定位点，默认为左上角
					baseXY: [0, 0],
					direction: 'v',
		            alignType: -1,
		            centerDist: 10,
		            isSuitable: true
				}
			}).on('close.oasOverlay',function(){
				self._iCall('close');
			}).on('afterSetPosition.oasOverlay',function(ev,$dom,afterAlign) {

				var direction,alignType;
				var directionType = {
					'right': 'left',
					'left': 'right',
					'top': 'bottom',
					'bottom': 'top'
				}

				if(afterAlign&&afterAlign.direction&&afterAlign.alignType) {

					direction = afterAlign.direction.toLowerCase();
					alignType = afterAlign.alignType;
					thisEl.find(".operate-arrow").removeClass("left-arrow bottom-arrow opposite").addClass(directionType[direction]+"-arrow");
					if(afterAlign.alignType===-1) {
						thisEl.find(".operate-arrow").addClass('opposite');
					}

				}

			}).on('beforeOpen.oasOverlay',function(ev,$dom,$el){

				return;
				win = {
						height: $(window).height(),
						width: $(window).width(),
						scrollTop: $(window).scrollTop(),
						scrollLeft: $(window).scrollLeft()
					};
					$('body').find(".oas-operate").hide();
					//self._initData();
					self._emit('beforeOpen', [this.$el]);
					var baseXY,
						left = 0,
						top = 0,
						splitNum = 10, 
						thisTop = $($el.target).offset().top, //top值
						thisLeft = $($el.target).offset().left, //left值
						tgtWidth = $($el.target).outerWidth(),
						tgtHeight = $($el.target).outerHeight();
					switch (placement) {
						case 'left':
							left = -thisWidth - 10 + x;
							top = -15 + y;
							thisEl.find(".operate-arrow").removeClass("left-arrow bottom-arrow opposite").addClass("right-arrow");
							baseXY = [left, top];
							if (win.height + win.scrollTop - thisTop - thisHeight - y < 0) {
								left = -thisWidth - 10 + x;
								top = -thisHeight + y + 35;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").addClass("opposite");
							}
							break;
						case 'right':
							left = +$($el.target).outerWidth() + 10 + x;
							top = -13 + y;
							thisEl.find(".operate-arrow").removeClass("left-arrow bottom-arrow opposite").addClass("left-arrow");
							baseXY = [left, top];
							if (win.height + win.scrollTop - thisTop - thisHeight - y < 0) {
								left = $($el.target).outerWidth() + 10 + x;
								top = -thisHeight + y + 35;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").addClass("opposite");
							}
							break;
						case 'top':
							left = +x;
							top = -thisHeight - 5 + y;
							thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow opposite").addClass("bottom-arrow");
							baseXY = [left, top];
							if (win.width + win.scrollLeft - thisLeft - thisWidth - x < 0) {
								left = -thisWidth + 40 + x;
								top = -thisHeight - 5 + y;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").addClass("opposite");
							}
							break;
						case 'bottom':
							left = +x;
							top = 25 + y;
							thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
							baseXY = [left, top];
							if (win.width + win.scrollLeft - thisLeft - thisWidth - x < 0) {
								left = -thisWidth + 40 + x;
								top = 25 + y;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").addClass("opposite");
							}
							break;
						default:
							left = +x;
							top = 25 + y;
							thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
							baseXY = [left, top];
							if(win.width + win.scrollLeft - thisLeft - tgtWidth - splitNum - thisWidth - x < 0 && win.height + win.scrollTop - thisTop - tgtHeight - splitNum - thisHeight - y >= 0) {
								//在左侧展示
								left = -thisWidth + 40 + x;
								top = 25 + y;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
								thisEl.find(".operate-arrow").addClass("opposite");
							}
							if(win.width + win.scrollLeft - thisLeft - tgtWidth - splitNum - thisWidth - x < 0 && win.height + win.scrollTop - thisTop - tgtHeight - splitNum - thisHeight - y < 0){
								left = -thisWidth + 40 + x;
								top = -thisHeight + y ;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
								thisEl.find(".operate-arrow").addClass("bottom-arrow opposite");
							}
							if(win.width + win.scrollLeft - thisLeft - tgtWidth - splitNum - thisWidth - x >= 0 && win.height + win.scrollTop - thisTop - tgtHeight - splitNum - thisHeight - y < 0){
								left = + x;
								top = -thisHeight + y;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
								thisEl.find(".operate-arrow").addClass("bottom-arrow");
							}
							if(win.width + win.scrollLeft - thisLeft - tgtWidth - splitNum - thisWidth - x >= 0 && win.height + win.scrollTop - thisTop - tgtHeight - splitNum - thisHeight - y >= 0){
								left = +x;
								top = 25 + y;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
							}
							if(win.width + win.scrollLeft - thisLeft - tgtWidth - splitNum - thisWidth - x < 0 && win.height + win.scrollTop - thisTop - tgtHeight - splitNum - thisHeight - y >= 0 && 
								thisLeft - thisWidth - splitNum + x < 0) {
								left = +x;
								top = 25 + y;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
							}
							if(win.width + win.scrollLeft - thisLeft - tgtWidth - splitNum - thisWidth - x < 0 && win.height + win.scrollTop - thisTop - tgtHeight - splitNum - thisHeight - y < 0 && 
								thisLeft - thisWidth - splitNum + x < 0) {
								left = +x;
								top = -thisHeight + y;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
								thisEl.find(".operate-arrow").addClass("bottom-arrow");
							}
							if(win.height + win.scrollTop - thisTop - tgtHeight - splitNum - thisHeight - y < 0 && win.width + win.scrollLeft - thisLeft - tgtWidth - splitNum - thisWidth - x < 0 && 
								thisTop - thisHeight - splitNum + y < 0) {
								left = -thisWidth + 40 + x;
								top = 25 + y;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
								thisEl.find(".operate-arrow").addClass("opposite");
							}
							if(win.height + win.scrollTop - thisTop - tgtHeight - splitNum - thisHeight - y < 0 && win.width + win.scrollLeft - thisLeft - tgtWidth - splitNum - thisWidth - x >= 0 && 
								thisTop - thisHeight - splitNum + y < 0) {
								left = +x;
								top = 25 + y;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
							}
							if(win.height + win.scrollTop - thisTop - tgtHeight - splitNum - thisHeight - y < 0 && win.width + win.scrollLeft - thisLeft - tgtWidth - splitNum - thisWidth - x < 0 && 
								thisTop - thisHeight - splitNum + y < 0 && thisLeft - thisWidth - splitNum + x < 0) {
								left = +x;
								top = 25 + y;
								baseXY = [left, top];
								thisEl.find(".operate-arrow").removeClass("left-arrow right-arrow bottom-arrow opposite");
							}
					}
					$dom.oasOverlay('align', {
						baseXY: baseXY
					});
			});
		},
		// 组件对外方法集
		invoke: {
			//打开操作面板
			open: function() {
				var self = this;
				var timeOut = setTimeout(function(){
					self._create();
					self._emit('open');
					self.$el.show();
				},50);
				
			},
			//关闭操作面板
			close: function() {
				//this.$el.html("");
				this._emit('close');
				this.$el.find(".second-menu,.third-menu").remove();
				this.$el.hide();	
				$('body').find('.oas-mask-opacity').hide();
			},
			/*
			 * @param {ObjArray} dataList 操作面板数据集合
			 */
			data: function(dataList) {
				this.options.data = dataList;
				this._create();
			},
			/*
			 * @param {obj} position 位置，绝对位置
			 */
			position: function(position) {
				if(this.options.position){
					this.options.position = position;
					this._create();
				}
			},
			/*
			 * @param {obj} 触发弹出操作板的目标元素
			 */
			target: function(target) {
				if(target){
					this.$target = target;
				}
			}
		}
	});
}
},{"../position/index":70,"./panel.tpl":64}],64:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"652a7774062a2dda54e27b8f351af0d1"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/operate/panel',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,level=$data.level,layout=$data.layout,$each=$utils.$each,list=$data.list,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,hasChild=$data.hasChild,$out='';if(level == 0){
$out+=' <div class="operate-arrow top-arrow"></div> ';
}
$out+=' <ul class="';
if(level == 1){
$out+='second-menu oas-operate open';
}
if(level == 0){
$out+='first-menu';
}
if(level == 2){
$out+='third-menu oas-operate open';
}
$out+=' ';
if(layout.horizontal == "right"){
$out+=' to-right';
}
if(layout.horizontal == "left"){
$out+=' to-left';
}
if(layout.vertical == "bottom"){
$out+=' to-bottom';
}
if(layout.vertical == "top"){
$out+=' to-top';
}
$out+='"> ';
$each(list,function($value,$index){
$out+=' ';
if(level != 0){
$out+=' ';
if($value.hasChild != true){
$out+=' <li index=';
$out+=$escape($index);
$out+=' id="';
$out+=$escape($value.id);
$out+='" class="';
if($value.disable == true){
$out+=' oas-disable';
}
$out+='" ';
if($value.title != null){
$out+='title="';
$out+=$escape($value.title);
$out+='"';
}
$out+='><a href="javascript:;" class="oasicon ';
$out+=$escape($value.iconClass);
$out+='"></a><a href="javascript:;">';
$out+=$escape($value.text);
$out+='</a></li> ';
}else{
$out+=' <li index=';
$out+=$escape($index);
$out+=' id="';
$out+=$escape($value.id);
$out+='" class="';
if($value.disable == true){
$out+=' oas-disable';
}
$out+='" ';
if($value.title != null){
$out+='title="';
$out+=$escape($value.title);
$out+='"';
}
$out+='><a href="javascript:;" class="oasicon ';
$out+=$escape($value.iconClass);
$out+='"></a><a href="javascript:;">';
$out+=$escape($value.text);
$out+='</a><a href="javascript:;" class="oasicon oasicon-arrow-right"></a></li> ';
}
$out+=' ';
}else{
$out+=' ';
if($value.hasChild != true){
$out+=' <li index=';
$out+=$escape($index);
$out+=' ';
if($value.copyContent != null){
$out+='copycontent="';
$out+=$escape($value.copyContent);
$out+='"';
}
$out+=' id="';
$out+=$escape($value.id);
$out+='" class="';
if($value.disable == true){
$out+=' oas-disable';
}
$out+='" ';
if($value.title != null){
$out+='title="';
$out+=$escape($value.title);
$out+='"';
}
$out+='><a href="javascript:;" class="oasicon ';
$out+=$escape($value.iconClass);
$out+='"></a><a href="javascript:;">';
$out+=$escape($value.text);
$out+='</a></li> ';
}
$out+=' ';
}
$out+=' ';
});
$out+=' </ul> ';
if(hasChild == true && level == 0){
$out+=' <ul class="';
if(level == 0){
$out+='expand-menu';
}
$out+='"> ';
$each(list,function($value,$index){
$out+=' ';
if($value.hasChild == true){
$out+=' <li index=';
$out+=$escape($index);
$out+=' id="';
$out+=$escape($value.id);
$out+='" class="';
if($value.disable == true){
$out+=' oas-disable';
}
$out+='" ';
if($value.title != null){
$out+='title="';
$out+=$escape($value.title);
$out+='"';
}
$out+='> <a href="javascript:;" class="oasicon ';
$out+=$escape($value.iconClass);
$out+='"></a> <a href="javascript:;">';
$out+=$escape($value.text);
$out+='</a> <a href="javascript:;" class="oasicon oasicon-arrow-right"></a> </li> ';
}
$out+=' ';
});
$out+=' </ul> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],65:[function(require,module,exports){
var Position = require("../position/index");
	/**
	 * 提供浮出层的基本功能，包括显示方式，位置定位，resize位置调整等。
	 * @ author rbai
	 * @ create time 2014.07.30
	 * @ version  1.0.0
	 */
module.exports = function(){
	$.oasUiFactory("oasOverlay", {
		options: {

			// 触发类型,默认为hover，也可以为click
			triggerType: 'hover',

			// 触发类型为hover时的延时时间
			delay: 150,

			// 触发的元素
			target: null,

			// 定位参数
			align: {
				// element 的定位点，默认为左上角
				selfXY: [0, 0],
				// 基准定位元素，默认为当前的可视区域
				baseElement: Position.VIEWPORT,
				// 基准定位元素的定位点，默认为左上角
				baseXY: [0, 0],
				direction: '>',
				alignType: 1
			},

			// 父元素
			parentNode: document.body,

			// 是否需要高级定位
			advPin: false,

			// 是否需要点击其他地方消失
			blurHide: true,

			//是否需要展示时的动画
			isNeedAnimation:false
			// onOpen: function() {

			// },

			// beforeOpen: function() {

			// },

			// onClose: function() {

			// }

		},


		_create: function() {
			var self = this,
				options = this.options,
				$targetElement = $(options.target),
				delay = options.delay,
				triggerType = options.triggerType;
			this.target = $targetElement;
			oasOverlay.allOverlays.push(this);
			this.$el.addClass('oas-overlay');
			// 支持hover
			if (triggerType === 'hover' && $targetElement) {
				$targetElement.on('mouseenter.' + this.uiName, function(e) {
					if ($(this).hasClass('disabled')) return;
					clearTimeout(self.hideTime);
					self.target = this;
					self.showTime = setTimeout(function() {
						self._iCall('show');
					}, delay);
				}).on('mouseleave.' + this.uiName, function() {
					if ($(this).hasClass('disabled')) return;
					clearTimeout(self.showTime);
					self.hideTime = setTimeout(function(e) {
						self._iCall('hide');
					}, delay);
				});


				this.$el.on('mouseenter.' + this.uiName, function() {
					clearTimeout(self.hideTime);
				});

				this.$el.on('mouseleave.' + this.uiName, function() {
					self.hideTime = setTimeout(function() {
						self._iCall('hide');
					}, delay);
				});
			} else if (triggerType === 'click' && $targetElement) {

				$targetElement.context = $targetElement.context && $targetElement.context != undefined? $targetElement.context : $targetElement.parent();
				$targetElement.live('click.' + this.uiName, function() {
					if ($(this).hasClass('disabled')) return;
					self.target = this;
					self._iCall('show');
				});
			}else if (triggerType === 'focus' && $targetElement) {

				$targetElement.on('focus.' + this.uiName, function() {
					if ($(this).hasClass('disabled')) return;
					self.target = this;
					self._iCall('show');
				});

				// 联想下拉blur引发bug.

				// $targetElement.on('blur', function() {
				// 	if ($(this).hasClass('disabled')) return;
				// 	self.target = this;
				// 	//self._iCall('hide');
				// });

			}

			this._blurHide();
		},


		_setPosition: function(align) {

			var options = this.options,
				advPin = options.advPin;

			align || (align = options.align);

			if (!align) return;

			if (advPin) {
				return this._setAdvPosition(align, advPin);
			} else {
				return this._setNomalPosition(align);
			}
		},


		/*
		 * 普通定位
		 */
		_setNomalPosition: function(align) {
			var $el = this.$el,
				isHidden = $el.css('display') === 'none',
				parentNode = this.options.parentNode,
				baseXY = align.baseXY,
				direction = align.direction,
				alignType = align.alignType,
				isSuitable = align.isSuitable,
				afterAlign,
				centerDist = align.centerDist,
				selfXY = align.selfXY;

			//在定位时，为避免元素高度不定，先显示出来

			if (isHidden) {
				$el.css({
					visible: 'hidden',
					display: 'block'
				});
			}
			if(parentNode !== document.body && parentNode !== $(document.body)){
				afterAlign = Position.pin({
					element: $el,
					x: selfXY[0],
					y: selfXY[1]
				}, {
					element: this.target,
					x: baseXY[0],
					y: baseXY[1]
				},parentNode,direction,alignType,centerDist,isSuitable);
			}else{
				afterAlign = Position.pin({
					element: $el,
					x: selfXY[0],
					y: selfXY[1]
				}, {
					element: this.target,
					x: baseXY[0],
					y: baseXY[1]
				},undefined,direction,alignType,centerDist,isSuitable);
			}
			

			// 定位后还原
			if (isHidden) {
				$el.css({
					visibility: '',
					display: 'none'
				});
			}

			return afterAlign;

		},

		// 高级定位
		_setAdvPosition: function(align, advPin) {
			var $el = this.$el,
				isHidden = $el.css('display') === 'none';


			//在定位时，为避免元素高度不定，先显示出来

			if (isHidden) {
				$el.css({
					visible: 'hidden',
					display: 'block'
				});
			}

			Position.advPin($el, align.baseElement, {
				offset: align.baseXY,
				direction: advPin.direction
			});
			// 定位完成后，还原
			if (isHidden) {
				$el.css({
					visibility: '',
					display: 'none'
				});
			}
		},

		// 除了element和relativeElements， 点击body后都会隐藏 element
		_blurHide: function(arr) {


			if(!arr) oasOverlay.blurOverlays.push(this);
			arr = $.makeArray(arr);
			arr.push(this.options.target);
			this._relativeElements = arr;
			
		},

		//判断overlay展示在目标元素的哪个方位
		_judgeDirection:function(){
			var	result = {},
				isHidden = this.$el.css('display') === 'none';
			//在定位时，为避免元素高度不定，先显示出来
			if (isHidden) {
				this.$el.css({
					visible: 'hidden',
					display: 'block'
				});
			}
			var	self = this.$el,
				target = $(this.target),
			    selfPos = {top:this.$el.offset().top,left:this.$el.offset().left},
			    targetPos = {top:target.offset().top,left:target.offset().left};
			if(this.options.parentNode !== document.body && this.options.parentNode !== $(document.body)){
				selfPos = {top:this.$el.position().top,left:this.$el.position().left},
			    targetPos = {top:target.position().top,left:target.position().left};
			}
			if(selfPos.top >= targetPos.top + target.outerHeight()){
				result.direction = "bottom";
			}else if(targetPos.top >= selfPos.top + self.outerHeight()){
				result.direction = "top";
			}else if(selfPos.left >= targetPos.left + target.outerWidth()){
				result.direction = "right";
			}else if(targetPos.left >= selfPos.left + self.outerWidth()){
				result.direction = "left";
			}
			result.selfPos = selfPos;
			// 定位后还原
			if (isHidden) {
				this.$el.css({
					visibility: '',
					display: 'none'
				});
			}
			return result;
		},

		// 对外方法集
		invoke: {
			show: function() {
				/*
                 * fixed bugs 2014/9/19
				 */
				// 关闭所有其他的overlay
				// $.each(oasOverlay.allOverlays, function(i, item) {
				// 	// 当实例为空或隐藏时，不处理
				// 	if (!item || !item.visible) {
				// 		return;
				// 	}
				// 	item._iCall('hide');
				// });
				
				// this.options.beforeOpen.call(this.$el, this);
				this._emit('beforeOpen',[this.$el,this]);
				this.visible = true;
				var afterAlign = this._setPosition();
				this._emit('afterSetPosition',[this.$el,afterAlign]);
				if(this.options.isNeedAnimation){
					var result = this._judgeDirection(),
					$el = this.$el,
					isHidden = $el.css('display') === 'none';
					if(result.direction == "bottom"){
						$el.css("top",result.selfPos.top + 15);
						if(!isHidden){
							$el.hide();
						}
						$el.animate({top:result.selfPos.top,opacity: 'show'},300);
					}else if(result.direction == "top"){
						$el.css("top",result.selfPos.top - 15);
						if(!isHidden){
							$el.hide();
						}
						$el.animate({top:result.selfPos.top,opacity: 'show'},300);
					}else if(result.direction == "left"){
						$el.css("left",result.selfPos.left - 15);
						if(!isHidden){
							$el.hide();
						}
						$el.animate({left:result.selfPos.left,opacity: 'show'},300);
					}else if(result.direction == "right"){
						$el.css("left",result.selfPos.left + 15);
						if(!isHidden){
							$el.hide();
						}
						$el.animate({left:result.selfPos.left,opacity: 'show'},300);
					}else{
						$el.show();
					}
				}else{
				this.$el.show();
				}
				if(this.options.hasOpacity){
					$('body').find('.oas-mask-opacity').show();
				}
				// this.options.onOpen.call(this.$el, this);
				this._emit('open',[this.$el,this]);
			},

			hide: function() {

				this.visible = false;
				this.$el.hide();
				if(this.options.hasOpacity){
					$('body').find('.oas-mask-opacity').hide();
				}
				// this.options.onClose.call(this.$el, this);
				this._emit('close',[this.$el,this]);
			},
			/**
			 * 只做展示
			 */
			showSelf:function(){
				this.visible = true;
				this.$el.show();
				this.options.onOpen.call(this.$el, this);
			},
			/**
			 * 修改对齐配置
			 */
			align: function(_align) {

				if (_align) {
					this.options.align = $.extend({}, this.options.align, _align);

					this._setPosition(this.options.align);
				}

			},

			blurHide: function(arr) {

				this._blurHide(arr);

			},

			destroyOverlay: function() {
				var self = this,
					options = this.options,
					$targetElement = $(options.target),
					delay = options.delay,
					triggerType = options.triggerType;
			    function erase(target, array) {
					for (var i = 0, arrLen = array.length; i < arrLen; i++) {
						if (target === array[i]) {
							array.splice(i, 1);
							return array;
						}
					};
				}
				erase(oasOverlay.allOverlays, this);
				this.$el.unbind('.' + this.uiName).removeData(this.uiName);
				if (triggerType === 'hover' && $targetElement) {
					$targetElement.off('mouseover.' + this.uiName).off('mouseleave.' + this.uiName);
					this.$el.off('mouseover.' + this.uiName);
					this.$el.off('mouseleave.' + this.uiName);
				} else if (triggerType === 'click' && $targetElement) {
					$targetElement.context = $targetElement.context && $targetElement.context != undefined? $targetElement.context : $targetElement.parent();
					$targetElement.die('click.' + this.uiName);
				}else if (triggerType === 'focus' && $targetElement) {
					$targetElement.off('focus.' + this.uiName);
				}
				//$(document).unbind('.' + this.uiName);
			}
		}
	});

	window.oasOverlay = {};
	oasOverlay.allOverlays = [];

	oasOverlay.blurOverlays = [];

	$(document).off('.oasOverlay');
	$(document).on('click.oasOverlay', function(e) {
		hideBlurOverlays(e);
	});


	// 绑定resie重新定位事件
	var timeout,
		winWidth = $(window).width(),
		winHeight = $(window).height();


	$(window).resize(function() {
		timeout && clearTimeout(timeout);
		timeout = setTimeout(function() {
			var winNewWidth = $(window).width();
			var winNewHeight = $(window).height();

			if (winWidth !== winNewWidth || winHeight !== winNewHeight) {
				$.each(oasOverlay.allOverlays, function(i, item) {
					// 当实例为空或隐藏时，不处理
					if (!item || !item.visible) {
						return;
					}
					item._setPosition();
				});

				winWidth = winNewWidth;
				winHeight = winNewHeight;
			}
		}, 80);
	});


	// 点击其他区域隐藏

	function hideBlurOverlays(e) {
		$.each(oasOverlay.blurOverlays, function(index, item) {
			// 当实例为空或隐藏时，不做处理
			if (!item || !item.visible) {
				return;
			}

			if( !item.options.blurHide ){
				return;
			}

			// 遍历_relativeElements, 当点击的元素落在这些元素上时，不处理
			for (var i = 0, itemLen = item._relativeElements.length; i < itemLen; i++) {
				if(!!item._relativeElements[i].size() && $.contains($("body")[0], $(item._relativeElements[i])[0])){
					if(item._relativeElements[i].selector){
					if(item._relativeElements[i].size() == $(item._relativeElements[i].selector).size()){
						for (var j = 0, len = item._relativeElements[i].length; j < len; j++){
							var el = $(item._relativeElements[i][j])[0];
							if (el === e.target || $.contains(el, e.target)) {
								return;
							}
						}
					}else{
						var els = $(item._relativeElements[i].selector);
						if(!!els.size()){
							for (var k = 0, lens = els.length; k < lens; k++){
								var el = $(els[k])[0];
								if (el === e.target || $.contains(el, e.target)) {
									return;
								}
								}
							}
						}
					}else{
						for (var j = 0, len = item._relativeElements[i].length; j < len; j++){
							var el = $(item._relativeElements[i][j])[0];
							if (el === e.target || $.contains(el, e.target)) {
								return;
							}
						}
					}
				}else{
					var el = $(item._relativeElements[i])[0];
					if(el == undefined || el == null || !$.contains($("body")[0], el)){
						var els = $(item._relativeElements[i].selector);
						if(!!els.size()){
							for (var k = 0, lens = els.length; k < lens; k++){
								var el = $(els[k])[0];
								if (el === e.target || $.contains(el, e.target)) {
									return;
								}
							}
						}else{
							//throw new Error("target元素不存在或者相关元素不存在!");
						}
					}else{
						if (el === e.target || $.contains(el, e.target)) {
							return;
						}
					}
				}
			};

			if(($(e.target).is('.oas-overlay') || !!$(e.target).closest('.oas-overlay').size()) && $(e.target).closest('.oas-overlay').is(item.$el)){
				return;
			}

			// 隐藏对应元素
			item._iCall('hide');
		});
	}

}
},{"../position/index":70}],66:[function(require,module,exports){
/*
 * @desc oasPagin，依赖于oasisUf
 * @anthor rbai
 * @Date 2016-03-14
 */

var oasDropdown = require("../../components/dropdown/index"),
	util  		= require("../../base/util/index"),
    template  	= require("../../../lib/template/template"),
    paginTpl  	= require("./pagin.tpl");
    
module.exports = function(){
	$.oasUiFactory("oasPagin", {
    	VERSION: '1.0.0',
    	options: {
    		// 分页类型，normal为正常型，simple为简单型,selectPagin为select框中的分页样式
			type: 'normal',

			// 分页的样式大小，normal为正常，sm为小模式,lg 为大模式。
			size: 'normal',

			showMsg: true,

			// 配置模板展示形式 可用参数为{{total}}、{{startItems}}、{{endItems}}、{{current}}、{{totalPages}}
			msgTpl:'',

			// 当前页码
			current: 1,

			// total,总条数
			total: null,

			// pageItems 每页显示条数
			pageItems: 10,

			// 自定义每页显示条数
			customPageItems: [10, 20, 50],

			//  是否需要快速跳转，只有在normal时生效。
			skipto: true,

			// 是否需要设置每页显示条数操作,只有在normal时生效
			setPageItems: true,

			//页码显示形式，当type为normal时生效。
			displayStyle: [2,3,2],

			//设置分页条数的面板的展示位置:down默认的朝下，up朝上
			customPagePos: "down"
    	},

    	_create: function(){
    		var options = this.options,
    			self = this;

    		this.$el.addClass('oas-pagin clearfix').addClass('pagination-' + options.size);

    		this._preRenderData();
    	},

    	events: {

			// 快速跳转事件
			'focus .page-go': function(self, evt) {
				// 因交互要求点击分页输入框，不显示当前第几页
				$(self).val(this.current);
				$(self).select();
			},
			// 为了兼容u2，阻止选中后触发浏览器自己的mouseup事件
			'mouseup .page-go': function(self, evt) {
				return false;
			},

			'blur .page-go': function(self, evt){
				if ($(self).hasClass('oas-disabled')) return false;
				var page = parseInt(util.DBC2SBC($(self).val()));

				if (page != this.current && page > 0 && page <= this.totalPages) {
					this._setCurrentPagin(page);
				}else{
					$(self).val('');
				}
			},

			// 页码点击事件
			'click .pagin-no': function(self, evt) {
				var current = parseInt($(self).text(), 10);
				this._setCurrentPagin(current);
			},
			'keypress .page-go': function(self, evt) {
				if(evt.keyCode === 13) {
					$(self).trigger('blur');
				}
			},

			// 按钮点击事件
			'click .pagin-btn': function(self, evt) {
				if ($(self).hasClass('disabled')) return false;
				if ($(self).hasClass('homepage')) {

					this._setCurrentPagin(1);

				} else if ($(self).hasClass('prev')) {

					this._prevPagin();

				} else if ($(self).hasClass('next')) {

					this._nextPagin();

				}
			},

			// 选择每页显示多少条事件
			'click .dropdown-menu>li': function(self, evt){
				var pageItems = +$(self).find('a').text().match(/[0-9][0-9]/g)[0],
					that = this;

				setTimeout(function(){
					that._iCall('pageItems', [pageItems]);
					that._emit('pageItemsChange', [pageItems, that.current]);
				}, 0)
				
			}
		},

		// 上一页
		_prevPagin: function() {
			var self = this,
				current;
			if (this.current > 1) {

				current = parseInt(this.current, 10) - 1;

				setTimeout(function(){
					self._setCurrentPagin(current);
				},0);
			}
		},

		// 下一页
		_nextPagin: function() {
			var self = this,
				current;
			if (this.current < this.totalPages) {
				current = parseInt(this.current, 10) + 1;

				setTimeout(function(){
					self._setCurrentPagin(current);
				},0);
				
			}
		},

    	// 准备所有需要渲染的数据
		_preRenderData: function() {
			// 空的直接不渲染
			if(this.options.total === null) return;
			var options = this.options,
				_renderData = {},
				total = this.records !== undefined ?  this.records : options.total,
				pageItems = this.options.pageItems || (this.options.pageItems = options.customPageItems[0]),
				totalPages = this.totalPages = Math.ceil(total / pageItems),
				current = this.current || (this.current = options.current),
				startItems = pageItems * (current - 1) + 1,
				endItems = pageItems * current,
				list = this._paginList();

			if(+total === 0){
				this.$el.hide();
				return;
			}else{
				this.$el.show();
			}

			this._renderData = _renderData = {
				total: total,
				pageItems: pageItems,
				totalPages: totalPages,
				current: current,
				startItems: startItems,
				endItems: endItems,
				setPageItems: options.setPageItems,
				skipto: options.skipto,
				list: list,
				showMsg: options.showMsg,
				type: options.type,
				customPageItems: options.customPageItems
			};
			if(this.options.msgTpl !== ''){
				var msgTpl = this.options.msgTpl,
					msgTplString = msgTpl.replace(/{{total}}/g,total)
					.replace(/{{startItems}}/g,startItems)
					.replace(/{{endItems}}/g,endItems)
					.replace(/{{current}}/g,current)
					.replace(/{{totalPages}}/g,totalPages);
				this._renderData['msgTpl'] = msgTplString;
			}

			this._createDom();

		},

		_setCurrentPagin: function(current, needEmit) {

			if(this.current === current){
				return;
			}
			this.current = current;

			this._preRenderData();

			if(needEmit !== false){
				this._emit('pageNoChange', [current, this.options.pageItems]);
			}
		},

		_paginList: function(){
			var options = this.options,
				interval = this._getInterval(),
			    displayStyle = options.displayStyle,
				list = [];
			if (interval[0] > 0 && displayStyle[2] > 0) {
				var end = Math.min(displayStyle[2], interval[0]);
				for (var i = 0; i < end; i++) {
					this._addToPaginList(list, i);
				}
				if(displayStyle[2] < interval[0]){
					list.push('...');
				}
			}
			// 中间的页码
			for (var i = interval[0]; i < interval[1]; i++) {
				this._addToPaginList(list, i);
			}
			if (interval[1] < this.totalPages && displayStyle[2] > 0) {
				 // 点点点字符串
				if (this.totalPages - displayStyle[2] > interval[1]) { 
					// 将点点点添加到容器
					list.push('...');
				}
				var begin = Math.max(this.totalPages - displayStyle[2], interval[1]);
				for (var i = begin; i < this.totalPages; i++) {
					this._addToPaginList(list, i);
				}
			}

			return list;
		},

		//获取页码中间的起始值（当时type为normal时生效）
		_getInterval : function() {
			var current = this.current - 1, 
				options = this.options,
			    displayStyle = options.displayStyle;
			//··中间和末尾显示页面的个数
			var ne_half = parseInt(displayStyle[1]) + parseInt(displayStyle[2]);
			//··总页数
			var pages = this.totalPages;
			//··总页数 - 中间显示页数
			var upper_limit = pages - displayStyle[1];
			//··计算中间显示页码的开始
			var start = current + 1 >= ne_half ? Math.max(Math.min(parseInt(current)+2
									- displayStyle[1], upper_limit), 0) : 0;
			//··计算中间显示页码的结束
			var end = current + 1 >= ne_half ? Math.min(parseInt(current) + 2,
					pages) : Math.min(ne_half, pages);
			return [start, end];
		},

		/*
		 * 将分页信息添加到List中
		 */
		_addToPaginList: function(list, id){
			id = (id < 0 ? 0 : (id < this.totalPages ? id : this.totalPages - 1)),id++;
			list.push(id);
		},

		_createDom: function() {
			var html = paginTpl(this._renderData);

			// remove dropdown
			this.$el.find('[data-toggle="oasDropdown"]').oasDropdown('destroy');
			this.$el.empty().html(html);

			// init dropdown
			this.$el.find('[data-toggle="oasDropdown"]').oasDropdown({panelPos:this.options.customPagePos});
		},


    	
    	// 对外方法
    	invoke: {
    		/*
			 * 修改总数据条数
			 * @param _total 需要修改的总记录条数
			 */
			total: function(_total) {

				// if(this.options.total !== _total){
				// 	this.current = 1;
				// }

				this.options.total = this.records = _total;
				this._preRenderData();
			},

			/*
			 * 修改每页显示的记录条数。
			 * @param _pageItems 需要修改的总记录条数
			 */
			pageItems: function(_pageItems) {
				this.options.pageItems = _pageItems;
				this.totalPages = Math.ceil(this.options.total / _pageItems);
				// 修改每页显示多少条之后回到第一页
				this.current = 1;
				this._emit('pageNoChange', [this.current, this.options.pageItems]);
				this._preRenderData();
			},

			/*
             * 获取或者修改当前分页组件的页码
			 */
			current: function(current){
				if(!!current && current <= this.totalPages){
					//this.current = current;
					//this._preRenderData();
					this._setCurrentPagin(current, false);
				}else{
					return this.current;
				}
			},

			/*
             * 获取当前每页条数
			 */
			getCustomPageItem: function(){
				return this.options.pageItems;
			},
			/*
			 * 跳转的某一页。
			 */
			jumpTo: function(current){
				if(!!current && current <= this.totalPages){
					this._setCurrentPagin(current);
				}else{
					return this.current;
				}
			}
    	}
    });
}
},{"../../../lib/template/template":8,"../../base/util/index":18,"../../components/dropdown/index":36,"./pagin.tpl":67}],67:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"d6cb47fe808ad640b6829097ceab14c5"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/pagin/pagin',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,type=$data.type,current=$data.current,$each=$utils.$each,list=$data.list,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,skipto=$data.skipto,totalPages=$data.totalPages,showMsg=$data.showMsg,msgTpl=$data.msgTpl,total=$data.total,startItems=$data.startItems,endItems=$data.endItems,$string=$utils.$string,setPageItems=$data.setPageItems,pageItems=$data.pageItems,customPageItems=$data.customPageItems,$out='';if(type == "normal"){
$out+=' <ul class="pagination"> <li class="pagin-btn prev';
if(current === 1){
$out+=' disabled';
}
$out+='"><a href="javascript:;">上一页</a></li> ';
$each(list,function($value,$index){
$out+=' ';
if($value === current){
$out+=' <li class="active pagin-no"><a href="javascript:;">';
$out+=$escape($value);
$out+='<span class="sr-only">(current)</span></a></li> ';
}else if($value == '...'){
$out+=' <li><span class="ellipsis">...</span></li> ';
}else{
$out+=' <li class="pagin-no"><a href="javascript:;">';
$out+=$escape($value);
$out+='</a></li> ';
}
$out+=' ';
});
$out+=' ';
if(skipto === true){
$out+=' <li><input type="text" class="page-go form-control" placeholder="';
$out+=$escape(current);
$out+='/';
$out+=$escape(totalPages);
$out+='页"></li> ';
}
$out+=' <li class="pagin-btn next';
if(current === totalPages){
$out+=' disabled';
}
$out+='"><a href="javascript:;">下一页</a></li> </ul> ';
if(showMsg && msgTpl === undefined){
$out+=' <div class="pagin-text"> 共&nbsp;<span>';
$out+=$escape(total);
$out+='</span>&nbsp;条记录，当前显示&nbsp;<span>';
$out+=$escape(startItems);
$out+='-';
if(endItems > total){
$out+=$escape(total);
}else{
$out+=$escape(endItems);
}
$out+='</span>&nbsp;条 </div> ';
}else if(showMsg && msgTpl !== undefined){
$out+=' <div class="pagin-text"> ';
$out+=$string(msgTpl);
$out+=' </div> ';
}
$out+=' ';
if(setPageItems === true){
$out+=' <div class="btn-group dropdown"> <button type="button" class="btn btn-default oas-pagin-button dropdown-toggle" data-toggle="oasDropdown"> 每页&nbsp;';
$out+=$escape(pageItems);
$out+='&nbsp;条 <span class="caret"></span> </button> <ul class="dropdown-menu" role="menu"> ';
$each(customPageItems,function($value,$index){
$out+=' <li><a href="javascript:;">每页&nbsp;';
$out+=$escape($value);
$out+='&nbsp;条</a></li> ';
});
$out+=' </ul> </div> ';
}
$out+=' ';
}else{
$out+=' ';
if(showMsg && msgTpl === undefined){
$out+=' <div class="pagin-text"> 共&nbsp;<span>';
$out+=$escape(total);
$out+='</span>&nbsp;条记录，当前显示&nbsp;<span>';
$out+=$escape(startItems);
$out+='-';
if(endItems > total){
$out+=$escape(total);
}else{
$out+=$escape(endItems);
}
$out+='</span>&nbsp;条 </div> ';
}else if(showMsg && msgTpl !== undefined){
$out+=' <div class="pagin-text"> ';
$out+=$string(msgTpl);
$out+=' </div> ';
}
$out+=' <ul class="pagination ';
$out+=$escape(type);
$out+='"> <li class="pagin-btn prev';
if(current === 1){
$out+=' disabled';
}
$out+='"><a href="javascript:;"><i class="oasicon oasicon-arrow-left"></i></a></li> ';
if(type !== 'selectPagin'){
$out+='<li><input type="text" class="page-go form-control" placeholder="';
$out+=$escape(current);
$out+='/';
$out+=$escape(totalPages);
$out+='页"></li>';
}
$out+=' <li class="pagin-btn next';
if(current === totalPages){
$out+=' disabled';
}
$out+='"><a href="javascript:;"><i class="oasicon oasicon-arrow-right"></i></a></li> </ul> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],68:[function(require,module,exports){
/*! http://mths.be/placeholder v2.0.8 by @mathias */
module.exports = function(){
	// Opera Mini v7 doesn’t support placeholder although its DOM seems to indicate so
	var isOperaMini = Object.prototype.toString.call(window.operamini) == '[object OperaMini]';
	var isInputSupported = 'placeholder' in document.createElement('input') && !isOperaMini;
	var isTextareaSupported = 'placeholder' in document.createElement('textarea') && !isOperaMini;
	var prototype = $.fn;
	var valHooks = $.valHooks;
	var propHooks = $.propHooks;
	var hooks;
	var placeholder;

	if (isInputSupported && isTextareaSupported) {

		placeholder = prototype.oasInput = function() {
			return this;
		};

		placeholder.input = placeholder.textarea = true;

	} else {

		placeholder = prototype.oasInput = function() {
			var $this = this;
			if($this.data('placeholder-enabled')) return; // add by rbai 2015-1-19 防止多次初始化
			$this
				.filter((isInputSupported ? 'textarea' : ':input') + '[placeholder]')
				.not('.placeholder')
				.bind({
					'focus.placeholder': clearPlaceholder,
					'blur.placeholder': setPlaceholder
				})
				.data('placeholder-enabled', true)
				.trigger('blur.placeholder');
			return $this;
		};

		placeholder.input = isInputSupported;
		placeholder.textarea = isTextareaSupported;

		hooks = {
			'get': function(element) {
				var $element = $(element);

				var $passwordInput = $element.data('placeholder-password');
				if ($passwordInput) {
					return $passwordInput[0].value;
				}

				return $element.data('placeholder-enabled') && $element.hasClass('oas-placeholder') ? '' : element.value;
			},
			'set': function(element, value) {
				var $element = $(element);

				var $passwordInput = $element.data('placeholder-password');
				if ($passwordInput) {
					return $passwordInput[0].value = value;
				}

				if (!$element.data('placeholder-enabled')) {
					return element.value = value;
				}
				if (value == '') {
					element.value = value;
					// Issue #56: Setting the placeholder causes problems if the element continues to have focus.
					if (element != safeActiveElement()) {
						// We can't use `triggerHandler` here because of dummy text/password inputs :(
						setPlaceholder.call(element);
					}
				} else if ($element.hasClass('oas-placeholder')) {
					clearPlaceholder.call(element, true, value) || (element.value = value);
				} else {
					element.value = value;
				}
				// `set` can not return `undefined`; see http://jsapi.info/jquery/1.7.1/val#L2363
				return $element;
			}
		};

		if (!isInputSupported) {
			valHooks.input = hooks;
			propHooks.value = hooks;
		}
		if (!isTextareaSupported) {
			valHooks.textarea = hooks;
			propHooks.value = hooks;
		}

		$(function() {
			// Look for forms
			$(document).delegate('form', 'submit.placeholder', function() {
				// Clear the placeholder values so they don't get submitted
				var $inputs = $('.oas-placeholder', this).each(clearPlaceholder);
				setTimeout(function() {
					$inputs.each(setPlaceholder);
				}, 10);
			});
		});

		// Clear placeholder values upon page reload
		$(window).bind('beforeunload.placeholder', function() {
			$('.oas-placeholder').each(function() {
				this.value = '';
			});
		});

	}

	function args(elem) {
		// Return an object of element attributes
		var newAttrs = {};
		var rinlinejQuery = /^jQuery\d+$/;
		$.each(elem.attributes, function(i, attr) {
			if (attr.specified && !rinlinejQuery.test(attr.name)) {
				newAttrs[attr.name] = attr.value;
			}
		});
		return newAttrs;
	}

	function clearPlaceholder(event, value) {
		var input = this;
		var $input = $(input);
		if (input.value == $input.attr('placeholder') && $input.hasClass('oas-placeholder')) {
			if ($input.data('placeholder-password')) {
				$input = $input.hide().next().show().attr('id', $input.removeAttr('id').data('placeholder-id'));
				// If `clearPlaceholder` was called from `$.valHooks.input.set`
				if (event === true) {
					return $input[0].value = value;
				}
				$input.focus();
			} else {
				input.value = '';
				$input.removeClass('oas-placeholder');
				input == safeActiveElement() && input.select();
			}
		}
	}

	function setPlaceholder() {
		var $replacement;
		var input = this;
		var $input = $(input);
		var id = this.id;
		if (input.value == '') {
			if (input.type == 'password') {
				if (!$input.data('placeholder-textinput')) {
					try {
						$replacement = $input.clone().attr({ 'type': 'text' });
					} catch(e) {
						$replacement = $('<input>').attr($.extend(args(this), { 'type': 'text' }));
					}
					$replacement
						.removeAttr('name')
						.data({
							'placeholder-password': $input,
							'placeholder-id': id
						})
						.bind('focus.placeholder', clearPlaceholder);
					$input
						.data({
							'placeholder-textinput': $replacement,
							'placeholder-id': id
						})
						.before($replacement);
				}
				$input = $input.removeAttr('id').hide().prev().attr('id', id).show();
				// Note: `$input[0] != input` now!
			}
			$input.addClass('oas-placeholder');
			$input[0].value = $input.attr('placeholder');
		} else {
			$input.removeClass('oas-placeholder');
		}
	}

	function safeActiveElement() {
		// Avoid IE9 `document.activeElement` of death
		// https://github.com/mathiasbynens/jquery-placeholder/pull/99
		try {
			return document.activeElement;
		} catch (exception) {}
	}

	$('input[placeholder], textarea[placeholder]').oasInput();
}


},{}],69:[function(require,module,exports){

/*
 * @desc popover组件
 * @anthor pwang
 * @Date 2016-03-02
 */

var _position = require("../../base/position/index");

module.exports = function(){

    var oasPopoverArr = [];

	$.oasUiFactory("oasPopover", {
    	VERSION: '1.0.0',
    	options: {
    		animation: true,
    		html: false,
    		placement: '',
    		selector: false,
    		trigger:'click',
            focusoutClose:true,
    		title:'',
    		content:'',
    		delay:0,
    		container:false,
            viewport:{
                selector:'body',
                padding:0
            }
    	},

    	_create: function(){
    		var options = this.options,
    			self = this;
    		// 绑定事件
    		var triggers = options.trigger,
                focusoutClose = options.focusoutClose,
    			triggerArr = triggers.split(' ');

    		for (var i = 0, len = triggerArr.length; i < len; i++){
    			var trigger = triggerArr[i];
    			if(trigger === 'click'){
    				//this.$el.on('click.' + this.uiName, this.$el, $.proxy(this._toggle, this));
                    this.$el.on('click.' + this.uiName, this.$el, function(e) {
                        self._toggle.call(self,$(e.target));
                    });
                    if(focusoutClose) {
                        oasPopoverArr.push(this.$el);
                    }
    			}else if(trigger !== 'manual'){
    				var eventIn = trigger === 'hover' ? 'mouseenter' : 'focusin';
    				var eventOut = trigger === 'hover' ? 'mouseleave' : 'focusout';

                    (trigger === "focus") && oasPopoverArr.push(this.$el);

    				this.$el.on(eventIn + '.' + this.uiName, this.$el, $.proxy(this._enter, this));
    				this.$el.on(eventOut + '.' + this.uiName, this.$el, $.proxy(this._leave, this));
    			}
    		}
    	},


    	_enter: function(){

    		var options = this.options,
    			status = this.$el.data('oasPopover').status,
    			direction = this.options.placement,
    			content = this.options.content,
    			title = this.options.title,
                animation = this.options.animation;
    		if(!status) {
    			this.status = true;
    			this._openPopover(direction,title,content,animation);
    		}
    	},

    	_leave: function(){
    		var options = this.options,
    			status = this.$el.data('oasPopover').status;
    		if(status) {
    			this.status = false;
    			this._closePopover();
    		}
    	},

    	/**
         * 
    	 * place 2 param
    	 */
    	_Place2Param: function(){
    		var place = this.options.placement;
    		var placeObj = {
    			'top': 1,
    			'right': 2,
    			'bottom': 3,
    			'left': 4
    		}

    		return placeObj[place];
    	},


    	_toggle: function($target){
    		var popoverStatus = this.$el.data('oasPopover').status,
                direction = this.options.placement,
                content = this._getContent(),
                title = this._getTitle(),
                animation = this.options.animation;
    		if(!popoverStatus){
    			this._openPopover(direction,title,content,animation);
    		}else if($target.closest(".popover")[0]!==this.popoverItem[0]){
    			this._closePopover();
    		}
    	},

    	_openPopover: function(direction,title,content,animation){
            this.status = true;
            this._emit('beforeShow',[this.$el]);
    		var options = this.options,
                that = this,
                delay = this.options.delay;
                delay = typeof delay === "object"?delay.hide:delay,
    			html = '<div class="popover'+(animation?' fade ':' ')+direction+'">'+
    						'<div class="arrow"></div>'+
    						'<h3 class="popover-title">'+title+'</h3>'+
    						'<div class="popover-content">'+content+'</div>'+
    					'</div>',
    			$html = $(html);
                if(this.popoverItem) {
                   this.popoverItem.remove(); 
                }
                this.popoverItem = $html;
                $html.css("display","block");
    		if(!title) {
    			$html.find(".popover-title").css("display","none");
    		}
            if(options.html) {
                $html.find(".popover-content").html(options.content);
            } else {
                $html.find(".popover-content").text(options.content);
            }
            this._emit('show',[this.$el]);
            this.closeTimeout && clearTimeout(this.closeTimeout);
            this.openTimeout = setTimeout(function() {
                that.options.container ? $html.appendTo(that.options.container) : $html.insertAfter(that.$el);
                that._setPosition(that.$el,$html,options.placement);
                setTimeout(function() {
                    $html.addClass("in");
                    setTimeout(function() {
                        that._emit("shown",[that.$el,that.popoverItem]);
                    },150);
                },0)
            },delay)
    	},

    	/*
         * return title
         * if title is function, return the function apply reslut;
    	 */
    	_getTitle: function(){
    		var options = this.options,
    			title;
    		title = typeof options.title === 'function' ? options.title.call(this.$el[0]) :  options.title;
			
			return title;
    	},

        _getContent:function() {
            var options = this.options,
                content;
            content = typeof options.content === 'function' ? options.content.call(this.$el[0]) :  options.content;
            
            return content;
        },

    	_closePopover: function(){
            this._emit('hide',[this.$el,this.$html]);
            var animation = this.options.animation,
                delay = this.options.delay,
                delay = typeof this.options.delay === "object"?delay.hide:delay,
                that = this;
            this.openTimeout && clearTimeout(this.openTimeout);
            this.closeTimeout = setTimeout(function() {
                that.popoverItem && that.popoverItem.removeClass("in");
                setTimeout(function(){
                    that.popoverItem && that.popoverItem.remove();
                    that.status = false;
                    that._emit("hidden",[that.$el,that.popoverItem]);
                },150);
            },delay)
    	},

        _setPosition : function($el,$html,direction) {
            $html.offset(_position.getPosition($el,$html,direction));
        },

    	// 对外方法
    	invoke: {
    		hide: function(){
                var options = this.options,
                    status = this.$el.data('oasPopover').status;
                this._closePopover();
    		},

    		show: function(){
                var options = this.options,
                    status = this.$el.data('oasPopover').status,
                    direction = this.options.placement,
                    content = this._getContent(),
                    title = this._getTitle(),
                    animation = this.options.animation;
                this._openPopover(direction,title,content,animation);
    		},

            toggle: function(){
                this._toggle();
            },
            content : function(content) {
                var options = this.options,
                    $html = this.popoverItem,
                    $el = this.$el,
                    direction = options.placement;

                options.content = content;

                // if(options.html) {
                //     $html.find(".popover-content").html(content);
                // } else {
                //     $html.find(".popover-content").text(content);
                // }
                // this._setPosition($el,$html,direction);
            },
            setContent: function(content) {
                var options = this.options,
                    $html = this.popoverItem,
                    $el = this.$el,
                    direction = options.placement;

                options.content = content;

                if(options.html) {
                    $html.find(".popover-content").html(content);
                } else {
                    $html.find(".popover-content").text(content);
                }
            }
    	}
    })

    $(document).on("click.oasPopoverHide",function(e) {
        var $target = $(e.target),
            $popover = null,
            $triggerElement = null,
            excuteArr = [];
        for(var i=0,len=oasPopoverArr.length;i<len;i++) {
            $triggerElement = oasPopoverArr[i];
            if($triggerElement.data("oasPopover")) {
                $popover = $triggerElement.data("oasPopover").popoverItem;
                if(($target.closest($triggerElement).length===0&&$target!==$triggerElement)
                    &&($target.closest($popover).length===0&&$target!==$popover)) {
                    $popover && $popover.hasClass("in") && $triggerElement.oasPopover('hide');
                }
            }
        }
    })

}
},{"../../base/position/index":16}],70:[function(require,module,exports){
/**
 * 实现多种定位方式
 * @ author rbai
 * @ create time 2014.08.11
 * @ version  1.0.0
 */
;
(function(){
    var Position = {},
        VIEWPORT = {
            _id: 'VIEWPORT',
            nodeType: 1
        },
        isPinFiexd = false, //用来标示目标元素是否为fiex定位
        ua = (window.navigator.userAgent || "").toLowerCase(),
        isIE6 = ua.indexOf("msie 6") !== -1,
        alignFunc = function(pinLength, baseLength, alignType) {

            return alignType === 0 ? (baseLength - pinLength)/2 : alignType === -1 ? baseLength - pinLength : 0;

        },
        directionType = {
            '^' : function(pinElement, baseElement, alignType) {

                var pinLength = pinElement.outerWidth(),
                    baseLength = baseElement.outerWidth();

                return {

                    x: alignFunc(pinLength, baseLength, alignType),
                    y: -pinElement.outerHeight()

                }

            },
            'v' : function(pinElement, baseElement, alignType) {

                var pinLength = pinElement.outerWidth(),
                    baseLength = baseElement.outerWidth();

                return {

                    x: alignFunc(pinLength, baseLength, alignType),
                    y: baseElement.outerHeight()

                }

            },
            '>' : function(pinElement, baseElement, alignType) {

                var pinLength = pinElement.outerHeight(),
                    baseLength = baseElement.outerHeight();

                return {

                    x: baseElement.outerWidth(),
                    y: alignFunc(pinLength, baseLength, alignType)

                }

            },
            '<' : function(pinElement, baseElement, alignType) {

                var pinLength = pinElement.outerHeight(),
                    baseLength = baseElement.outerHeight();

                return {

                    x: -pinElement.outerWidth(),
                    y: alignFunc(pinLength, baseLength, alignType)

                }

            }
        }

    Position.isOutLeft = function(left, pinElement, parentNode) {

        var offsetLeft = parentNode ? parentNode.offset().left : 0,
            scrollLeft = parentNode ? parentNode.scrollLeft() : 0,
            width = parentNode ? parentNode.outerWidth() : $(window).width();

        return left < offsetLeft;

    }

    Position.isOutRight = function(left, pinElement, parentNode) {

        var offsetLeft = parentNode ? parentNode.offset().left : 0,
            scrollLeft = parentNode ? parentNode.scrollLeft() : 0,
            width = parentNode ? parentNode.outerWidth() : $(window).width();

        return ((left - offsetLeft - scrollLeft + pinElement.outerWidth()) > width);

    }

    Position.isOutTop = function(top, pinElement, parentNode) {

        var offsetTop = parentNode ? parentNode.offset().top : 0,
            scrollTop = parentNode ? parentNode.scrollTop() : 0,
            height = parentNode ? parentNode.outerHeight() : $(window).height();

        return top < offsetTop;

    }

    Position.isOutBottom = function(top, pinElement, parentNode) {

        var offsetTop = parentNode ? parentNode.offset().top : 0,
            scrollTop = parentNode ? parentNode.scrollTop() : 0,
            height = parentNode ? parentNode.outerHeight() : $(window).height();


        return ((top - offsetTop - scrollTop + pinElement.outerHeight()) > height);

    }

    /**
     * 将目标元素相对于基准元素进行定位。
     * @param {Obj} 目标元素
     * @param {obj} 基准元素
     */
    Position.pin = function(pinObject, baseObject, parentNode, direction, alignType, centerDist, isSuitable) {

        var d = {
            '>': 'Right',
            '<': 'Left',
            '^': 'Top',
            'v': 'Bottom'
        }

        var opp = {
            '>': '<',
            '<': '>',
            'v': '^',
            '^': 'v'
        }

        var other = {
            '>': ['Top', 'Bottom'],
            '<': ['Top', 'Bottom'],
            '^': ['Left', 'Right'],
            'v': ['Left', 'Right']
        }
        
        var offset = Position.getPinOffset(pinObject, baseObject, parentNode, direction, alignType, centerDist);
        var pinElement = $(pinObject.element);
        var len = (direction === '<' || direction === '>') ? offset.left : offset.top;
        var inD1 = Position['isOut'+d[direction]](len, pinElement, parentNode);
        var inD2 = Position['isOut'+d[opp[direction]]](len, pinElement, parentNode);

        if(direction&&alignType!==undefined&&isSuitable) {

            if(inD1&&!inD2) {

                direction = opp[direction];
                offset = Position.getPinOffset(pinObject, baseObject, parentNode, direction, alignType, centerDist);

            }

            var len1 = (direction === '<' || direction === '>') ? offset.top : offset.left;
            var len2 = (direction === '<' || direction === '>') ? offset.top : offset.left;

            var inD3 = Position['isOut'+other[direction][0]](len1, pinElement, parentNode);
            var inD4 = Position['isOut'+other[direction][1]](len2, pinElement, parentNode);

            alignType = inD3 ? (inD4 ? alignType : 1) : (inD4 ? -1 : alignType);

            offset = Position.getPinOffset(pinObject, baseObject, parentNode, direction, alignType, centerDist);

        }

        // 定位目标元素
        pinElement.css({
            left: offset.left,
            top: offset.top
        });

        return {
            direction: d[direction],
            alignType: alignType
        }

    }

    Position.getPinOffset = function(pinObject, baseObject, parentNode, direction, alignType, centerDist) {

        var centerDistLeft = 0,centerDistTop = 0;

        if(direction&&centerDist) {

            centerDistLeft = (direction === '>' ? 1 : -1) * centerDist;
            centerDistTop = (direction === 'v' ? 1 : -1) * centerDist;

        }

        //将两个参数转化为标准定位对象 {element: a, x: 0, y: 0}
        pinObject = normalize(pinObject);
        baseObject = normalize(baseObject);


        // 设定目标元素的 position 为绝对定位
        // 若元素的初始 position 不为 absolute，会影响元素的 display、宽高等属性
        var pinElement = $(pinObject.element);
        var baseElement = $(baseObject.element);
        var directionObj;

        if (pinElement.css('position') !== 'fixed' || isIE6) {
            pinElement.css('position', 'absolute');
            isPinFixed = false;
        } else {
            // 定位 fixed 元素的标志位，下面有特殊处理
            isPinFixed = true;
        }

        // 将位置属性归一化为数值
        // 注：必须放在上面这句 `css('position', 'absolute')` 之后，
        //    否则获取的宽高有可能不对
        posConverter(pinObject);
        posConverter(baseObject);

        var parentOffset = getParentOffset(pinElement);
        var baseOffset = baseObject.offset();

        // 先判断方向

        if(direction&&alignType!==undefined) {

            directionObj = directionType[direction](pinElement, baseElement, alignType);

        }

        // 计算目标元素的位置
        var top = baseOffset.top + baseObject.y -
            pinObject.y - parentOffset.top + (directionObj?directionObj.y:0);

        var left = baseOffset.left + baseObject.x -
            pinObject.x - parentOffset.left + (directionObj?directionObj.x:0);

        if(parentNode){
            top += parentNode.scrollTop();
            left += parentNode.scrollLeft();
        }

        return {
            left: left + centerDistLeft,
            top: top + centerDistTop
        }

        // 定位目标元素
        // pinElement.css({
        //     left: left,
        //     top: top
        // });
    }

    // 将目标元素相对于基准元素进行居中定位
    // 接受两个参数，分别为目标元素和定位的基准元素，都是 DOM 节点类型
    Position.center = function(pinElement, baseElement) {
        Position.pin({
            element: pinElement,
            x: '50%',
            y: '50%'
        }, {
            element: baseElement,
            x: '50%',
            y: '50%'
        });
    };

    /* 相对于基准元素四周定位
     * @param {Object} pinElement 目标元素
     * @param {Object} baseElement 基类元素
     * @param {Object} options 定位配置箱
     * options : {
            direction: 'h', // v
            offset: [0, 0]

       }
     */
    Position.advPin = function(pinElement, baseElement, options) {

        pinElement = $(pinElement), baseElement = $(baseElement);
        // 准备坐标数据
        var baseWidth = baseElement.outerWidth(),
            baseHeight = baseElement.outerHeight(),
            baseLeft = baseElement.offset().left,
            baseTop = baseElement.offset().top,
            pinWidth = pinElement.outerWidth(),
            pinHeight = pinElement.outerHeight(),
            pinLeft = pinElement.offset().left,
            pinTop = pinElement.offset().top,
            scrollTop = $(document).scrollTop(),
            scrollLeft = $(document).scrollLeft(),
            winHeight = $(window).height(),
            winWidth = $(window).width(),
            offset;
        if (arguments.length === 2) {

            options = {
                direction: 'v'
            }
        } else if (arguments.length === 3 && typeof options == 'string') {
            options = {
                direction: options
            }
        }

        if (pinElement.css('position') !== 'fixed') {
            pinElement.css('position', 'absolute');
        }

        //计算偏移量
        if (options.offset) {
            offset = options.offset;
        }
        if (options.direction == 'v') { // 垂直定位
            var tempHeight = winHeight - (baseTop - scrollTop + baseHeight + pinHeight),
                tempTop, tempLeft;
            offset ? (tempTop = baseTop + offset[0], tempLeft = baseLeft + offset[1]) : (tempTop = baseTop, tempLeft = baseLeft);
            if (tempHeight > 0) {
                // 定位到基类元素底部
                pinElement.css({
                    top: (tempTop + baseHeight),
                    left: tempLeft
                });
            } else {
                // 定位到基类元素上面
                if ((baseTop - scrollTop) < pinHeight) {
                    pinElement.css({
                        top: (tempTop + baseHeight),
                        left: tempLeft
                    });
                } else {
                    pinElement.css({
                        top: (tempTop - pinHeight),
                        left: tempLeft
                    });
                }

            }
        } else if (options.direction == 'h') { // 水平定位
            var tempWidth = winWidth - (baseLeft - scrollLeft + baseWidth + pinWidth);
            offset ? (tempTop = baseTop + offset[0], tempLeft = baseLeft + offset[1]) : (tempTop = baseTop, tempLeft = baseLeft);
            if (tempWidth > 0) {
                // 定位到基类元素右边
                pinElement.css({
                    left: (tempLeft + baseWidth),
                    top: tempTop
                });
            } else {
                // 定位到基类元素上面
                if ((baseLeft - scrollLeft) < pinWidth) {
                    pinElement.css({
                        left: (tempLeft + baseWidth),
                        top: tempTop
                    });
                } else {
                    pinElement.css({
                        left: (tempLeft - pinWidth),
                        top: tempTop
                    });
                }

            }
        }



    }

    /*
     * 获取一个元素的位置
     * @param {String} pinElement 需要获取的元素
     * @param {String} type 获取位置方式，支持"fixed",即获取元素相对于window的位置，默认是相对于document的位置
     * return {top:0,right:0,bottom:0,left:0}
     */
    Position.location = function(pinElement, type) {
        pinElement = $(pinElement);
        var pinWidth = pinElement.outerWidth(),
            pinHeight = pinElement.outerHeight(),
            pinLeft = pinElement.offset().left,
            pinTop = pinElement.offset().top,
            scrollTop = $(document).scrollTop(),
            scrollLeft = $(document).scrollLeft(),
            winHeight = $(window).height(),
            winWidth = $(window).width(),
            docHeight = $(document).height(),
            docWidth = $(document).width();

        if (type == 'fixed') {
            return {
                top: (pinTop - scrollTop),
                right: (winWidth - (pinLeft - scrollLeft) - pinWidth),
                bottom: (winHeight - (pinTop - scrollTop) - pinHeight),
                left: (pinLeft - scrollLeft)
            };
        } else {
            return {
                top: pinTop,
                right: (docWidth - pinLeft - pinWidth),
                bottom: (docHeight - pinTop - pinHeight),
                left: pinLeft
            };
        }
    }

    /**
     * 计算两个元素重合的面积
     */
    Position.overlapArea = function(rElement, bElement){

        var rOffset = rElement.offset(),
            rleft = rOffset.left,
            rtop = rOffset.top,
            rwidth = rElement.width(),
            rHeight = rElement.height(),
            bOffset = bElement.offset(),
            bleft = bOffset.left,
            btop = bOffset.top,
            bwidth = bElement.width(),
            bheight = bElement.height();

        if((rleft + rwidth < bleft) || (bleft+bwidth < rleft) || (rtop + rHeight < btop) || (btop+bheight < rtop)){
            return 0;
        }

        // 计算重叠的left，top
        var tempLeft = rleft - bleft,
            overlapLeft,
            tempTop = rtop - btop,
            overlapTop;

        overlapLeft = tempLeft < 0 ? rwidth - Math.abs(tempLeft) : bwidth - tempLeft;

        overlapTop = tempTop < 0 ? rHeight - Math.abs(tempTop) : bheight - tempTop;

        return [overlapLeft, overlapTop];

    };


    // 这是当前可视区域的伪 DOM 节点
    // 需要相对于当前可视区域定位时，可传入此对象作为 element 参数
    Position.VIEWPORT = VIEWPORT;


    // global.oasis.Position = global.Position = Position;


    // Helpers
    // -------

    // 将参数包装成标准的定位对象，形似 { element: a, x: 0, y: 0 }

    function normalize(posObject) {
        posObject = toElement(posObject) || {};

        if (posObject.nodeType) {
            posObject = {
                element: posObject
            };
        }

        var element = toElement(posObject.element) || VIEWPORT;
        if (element.nodeType !== 1) {
            throw new Error('posObject.element is invalid.');
        }

        var result = {
            element: element,
            x: posObject.x || 0,
            y: posObject.y || 0
        };

        // config 的深度克隆会替换掉 Position.VIEWPORT, 导致直接比较为 false
        var isVIEWPORT = (element === VIEWPORT || element._id === 'VIEWPORT');

        // 归一化 offset
        result.offset = function() {
            // 若定位 fixed 元素，则父元素的 offset 没有意义
            if (isPinFixed) {
                return {
                    left: 0,
                    top: 0
                };
            } else if (isVIEWPORT) {
                return {
                    left: $(document).scrollLeft(),
                    top: $(document).scrollTop()
                };
            } else {
                return getOffset($(element)[0]);
            }
        };

        // 归一化 size, 含 padding 和 border
        result.size = function() {
            var el = isVIEWPORT ? $(window) : $(element);
            return {
                width: el.outerWidth(),
                height: el.outerHeight()
            };
        };

        return result;
    }

    // 对 x, y 两个参数为 left|center|right|%|px 时的处理，全部处理为纯数字

    function posConverter(pinObject) {
        pinObject.x = xyConverter(pinObject.x, pinObject, 'width');
        pinObject.y = xyConverter(pinObject.y, pinObject, 'height');
    }

    // 处理 x, y 值，都转化为数字

    function xyConverter(x, pinObject, type) {
        // 先转成字符串再说！好处理
        x = x + '';

        // 处理 px
        x = x.replace(/px/gi, '');

        // 处理 alias
        if (/\D/.test(x)) {
            x = x.replace(/(?:top|left)/gi, '0%')
                .replace(/center/gi, '50%')
                .replace(/(?:bottom|right)/gi, '100%');
        }

        // 将百分比转为像素值
        if (x.indexOf('%') !== -1) {
            //支持小数
            x = x.replace(/(\d+(?:\.\d+)?)%/gi, function(m, d) {
                return pinObject.size()[type] * (d / 100.0);
            });
        }

        // 处理类似 100%+20px 的情况
        if (/[+\-*\/]/.test(x)) {
            try {
                // eval 会影响压缩
                // new Function 方法效率高于 for 循环拆字符串的方法
                // 参照：http://jsperf.com/eval-newfunction-for
                x = (new Function('return ' + x))();
            } catch (e) {
                throw new Error('Invalid position value: ' + x);
            }
        }

        // 转回为数字
        return numberize(x);
    }

    // 获取 offsetParent 的位置

    function getParentOffset(element) {
        var parent = element.offsetParent();

        // IE7 下，body 子节点的 offsetParent 为 html 元素，其 offset 为
        // { top: 2, left: 2 }，会导致定位差 2 像素，所以这里将 parent
        // 转为 document.body
        if (parent[0] === document.documentElement) {
            parent = $(document.body);
        }

        // 修正 ie6 下 absolute 定位不准的 bug
        if (isIE6) {
            parent.css('zoom', 1);
        }

        // 获取 offsetParent 的 offset
        var offset;

        // 当 offsetParent 为 body，
        // 而且 body 的 position 是 static 时
        // 元素并不按照 body 来定位，而是按 document 定位
        // http://jsfiddle.net/afc163/hN9Tc/2/
        // 因此这里的偏移值直接设为 0 0
        if (parent[0] === document.body &&
            parent.css('position') === 'static') {
            offset = {
                top: 0,
                left: 0
            };
        } else {
            offset = getOffset(parent[0]);
        }

        // 根据基准元素 offsetParent 的 border 宽度，来修正 offsetParent 的基准位置
        offset.top += numberize(parent.css('border-top-width'));
        offset.left += numberize(parent.css('border-left-width'));

        return offset;
    }

    function numberize(s) {
        return parseFloat(s, 10) || 0;
    }

    function toElement(element) {
        return $(element)[0];
    }

    // fix jQuery 1.7.2 offset
    // document.body 的 position 是 absolute 或 relative 时
    // jQuery.offset 方法无法正确获取 body 的偏移值
    //   -> http://jsfiddle.net/afc163/gMAcp/
    // jQuery 1.9.1 已经修正了这个问题
    //   -> http://jsfiddle.net/afc163/gMAcp/1/
    // 这里先实现一份
    // 参照 kissy 和 jquery 1.9.1
    //   -> https://github.com/kissyteam/kissy/blob/master/src/dom/sub-modules/base/src/base/offset.js#L366 
    //   -> https://github.com/jquery/jquery/blob/1.9.1/src/offset.js#L28

    function getOffset(element) {
        var box = element.getBoundingClientRect(),
            docElem = document.documentElement;

        // < ie8 不支持 win.pageXOffset, 则使用 docElem.scrollLeft
        return {
            left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || document.body.clientLeft || 0),
            top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || document.body.clientTop || 0)
        };
    }
    module.exports =  Position;
})();
},{}],71:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"b6ccf4b5a591f3d2c985367fca141c6a"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/query/calendar',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,radioName=$data.radioName,$out='';$out+='<label class="beauty-check"> <input type="radio" name="';
$out+=$escape(radioName);
$out+='" value="1" disabled checked > <span>true</span> </label> <label class="beauty-check"> <input type="radio" name="';
$out+=$escape(radioName);
$out+='" value="0" disabled> <span>false</span> </label>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],72:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"dc7a906aab9cb85a69eac8444c9f302d"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/query/group',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,group_id=$data.group_id,level=$data.level,data=$data.data,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$out='';$out+='<dl id="';
$out+=$escape(group_id);
$out+='" class="rules-group-container" data-level="';
$out+=$escape(level);
$out+='" data-conditions="';
$out+=$escape(data.defaultRel);
$out+='"> <dt class="rules-group-header"> <div class="pull-right group-actions"> <button class="btn btn-primary add-rule" ';
if(data.no_add_rule){
$out+='disabled="disabled"';
}
$out+='>增加规则</button> <button class="btn btn-primary add-group" ';
if(data.no_add_group){
$out+='disabled="disabled"';
}
$out+='>增加规则组</button> ';
if(level > 1){
$out+=' <button class="btn btn-danger del-group" ';
if(data.no_delete){
$out+='disabled="disabled"';
}
$out+='>删除规则组</button> ';
}
$out+=' </div> <div class="btn-group group-conditions"> ';
$each(data.rels,function($value,$index){
$out+=' <button type="button" name="';
$out+=$escape(group_id);
$out+='" class="btn btn-default ';
if($value == data.defaultRel){
$out+='active';
}
$out+='" data-rel="';
$out+=$escape($value);
$out+='">';
$out+=$escape($value);
$out+='</button> ';
});
$out+=' </div> </dt> <dd class=rules-group-body> <ul class=rules-list></ul> </dd> </dl>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],73:[function(require,module,exports){

var groupTpl =    require('./group.tpl');
var ruleTpl =     require('./rule.tpl');
var radioTpl =    require('./radioValue.tpl');
var calendarTpl = require('./calendar.tpl');


module.exports = function(){	    
	$.oasUiFactory("oasQuery", {
		VERSION: '1.0.0',
		options: {
            // 可选组规则关系 
            rels: ['AND', 'OR'],
            // 默认组规则关系
            defaultRel: 'AND',
            // 是否在字段列表添加清空选项
            hasClearSelect: true,
            // 下拉框默认提示
            selectPlaceHolder: '------',
            selectWidth: 180,
            // 添加规则组的同时添加一条规则
            addGroupWithRule: true,
            // 外部数据源,通过url获取filters字段 data: {fields: []}
            url: '',
            // 字段列表
            filters: [],
            defaultRules: {},
            // 规则关系是否只读 `true`为只读，`false` 反之
            condition_readonly: false,
            // 是否可添加单个规则
            no_add_rule: false,
            // 是否可添加规则组
            no_add_group: false,
            // 是否可删除规则/组
            no_delete: false
        },

        // 组件初始化入口
		_create: function(){
            var self = this;
            var options = this.options;
            // 保存状态信息
            this.status = {
                id: null,
                group_id: 0,
                rule_id: 0,
                radio_id: 0
            };
            this.filters = options.filters;
            this.operators = options.icons;

            // 确保拥有一个容器id
            if(!this.$el.attr('id')) {
                this.$el.attr('id', 'oasQuery_' + Math.floor(Math.random() * 99999));
                this.status.generated_id = true;
            }
            this.status.id = this.$el.attr('id');
            this.$el.addClass('oas-query form-inline'); 
            this.setSettings();
            this._preRenderData();
            this._iCall('setRules', [this._renderData.defaultRules]);
            // this._setRoot(false);
            this._bindEvents();

			allQueryArr.push(this);
        },

        // 设置operators映射数据
        setSettings: function() {
            this.types = {
                'string':   'string',
                'integer':  'number',
                'double':   'number',
                'date':     'datetime',
                'time':     'datetime',
                'datetime': 'datetime',
                'boolean':  'boolean'
            };
            this.operators = [
                { value: 'equal', text: 'equal',                   nb_inputs: 1, apply_to: ['string', 'number', 'datetime', 'boolean'] },
                { value: 'not_equal', text: 'not_equal',           nb_inputs: 1, apply_to: ['string', 'number', 'datetime', 'boolean'] },
                { value: 'in',  text: 'in',                        nb_inputs: 1, apply_to: ['string', 'number', 'datetime'] },
                { value: 'not_in',  text: 'not_in',                nb_inputs: 1, apply_to: ['string', 'number', 'datetime'] },
                { value: 'less',  text: 'less',                    nb_inputs: 1, apply_to: ['number', 'datetime'] },
                { value: 'less_or_equal', text: 'less_or_equal',   nb_inputs: 1, apply_to: ['number', 'datetime'] },
                { value: 'greater', text: 'greater',               nb_inputs: 1, apply_to: ['number', 'datetime'] },
                { value: 'greater_or_equal', text: 'greater_or_equal', nb_inputs: 1, apply_to: ['number', 'datetime'] },
                { value: 'between', text: 'between',               nb_inputs: 2, apply_to: ['number', 'datetime'] },
                { value: 'not_between', text: 'not_between',       nb_inputs: 2, apply_to: ['number', 'datetime'] },
                { value: 'begins_with', text: 'begins_with',       nb_inputs: 1, apply_to: ['string'] },
                { value: 'not_begins_with', text: 'not_begins_with', nb_inputs: 1, apply_to: ['string'] },
                { value: 'contains', text: 'contains',             nb_inputs: 1, apply_to: ['string'] },
                { value: 'not_contains',text: 'not_contains',      nb_inputs: 1, apply_to: ['string'] },
                { value: 'ends_with', text: 'ends_with',           nb_inputs: 1, apply_to: ['string'] },
                { value: 'not_ends_with', text: 'not_ends_with',   nb_inputs: 1, apply_to: ['string'] },
                { value: 'is_empty', text: 'is_empty',             nb_inputs: 0, apply_to: ['string'] },
                { value: 'is_not_empty', text: 'is_not_empty',     nb_inputs: 0, apply_to: ['string'] },
                { value: 'is_null', text: 'is_null',               nb_inputs: 0, apply_to: ['string', 'number', 'datetime', 'boolean'] },
                { value: 'is_not_null', text: 'is_not_null',       nb_inputs: 0, apply_to: ['string', 'number', 'datetime', 'boolean'] }
            ];
            
        },
        // 获取规则组id
        nextGroupId: function() {
            return this.status.id + '_group_' + (this.status.group_id++);
        },
        // 获取规则id
        nextRuleId: function() {
            return this.status.id + '_rule_' + (this.status.rule_id++);
        }, 
        // 获取规则值id
        nextValueId: function(rule_id) {
            return rule_id + '_value_' + (this.status.value++);
        },
        // 远程获取数据
        _initModel: function(){
			var that = this,
				options = this.options;
			if(that.options.url === '' ) return;

			that._model = oasisl.baseModel.extend({
				statics: {
					baseUrl: that.options.url
				}
			});
			that._model.list().then(function(res){
				if(res.meta.status === 0){
                    options.filters = res.data.filters;
                    if(options.hasClearSelect) {
                        options.filters.unshift({
                            text: options.selectPlaceHolder,
                            value: 'clearRule'
                        })
                    }
                    that._initData = options;
                    // 渲染数据
                    that._renderData = $.extend(true, {}, that._initData);

                }
			});
		},
		// 准备所有渲染所需的数据
		_preRenderData: function() {
			var options = this.options;
            // 保存初始化数据
            
            if(options.hasClearSelect) {
                options.filters.unshift({
                    text: options.selectPlaceHolder,
                    value: 'clearRule'
                })
            }

            this._initData = options;
            // 渲染数据
            this._renderData = $.extend(true, {}, this._initData);

            this._initModel();
        },
        /**
         * 事件绑定
         */
        _bindEvents: function() {
            var that = this;
            this.$el.on('click.oasQuery', '.add-group', function(e) {
                if(that.options.no_add_group) {
                    return false;
                }
                var $groupContainer = $(this).closest('.rules-group-container');
                that._addGroup($groupContainer, that._renderData.addGroupWithRule);

                that._emit('add', [true, $groupContainer]);
            });
            this.$el.on('click.oasQuery', '.add-rule', function(e) {
                if(that.options.no_add_rule) {
                    return false;
                }
                var $groupContainer = $(this).closest('.rules-group-container');
                that._addRule($groupContainer);

                that._emit('add', [false, $groupContainer]);
            });

            this.$el.on('click.oasQuery', '.del-group', function(e) {
                if(that.options.no_delete) {
                    return false;
                }
                var $group = $(this).closest('.rules-group-container');
                that._delGroup($group);

                that._emit('del', [true, $group]);
            });

            this.$el.on('click.oasQuery', '.del-rule', function(e) {
                if(that.options.no_delete) {
                    return false;
                }
                var $rule = $(this).closest('.rule-container');
                that._delRule($rule);

                that._emit('del', [false, $rule]);
            });
        },
        /**
         * 设置根节点
         * @isAddRule 添加组节点的时候是否默认添加一个空的规则节点
         */
		_setRoot: function(addRule, condition){
            addRule = (addRule === undefined || addRule === true);
            
            var group_id = this.nextGroupId();  
            var $group = $(this._getGroupTpl(group_id,1));
            this.$el.empty().html($group);

            if (addRule) {
                this._addRule($group);
            }

            if(condition) {
                var con_index = this.options.rels.indexOf(condition);
                $group.find('.group-conditions .btn').eq(con_index).trigger('click');
            }
            return $group;
        },
        
        /**
         * 添加单规则
         * @ $parent 父元素
         * @ json 可选，用于渲染规则的数据
         */
        _addRule: function($parent, json) {

            var rule_id = this.nextRuleId();
            var $rule = $(this._getRuleTpl(rule_id));

            $parent.children('.rules-group-body').children('.rules-list').append($rule);

            this.initFilter($rule, json);
            
        },

        /**
         * 添加规则组
         * @ $parent 父元素
         * @ addRule 可选，用于渲染规则的数据
         */
        _addGroup: function($parent, addRule, condition) {
            addRule = (addRule === undefined || addRule === true);

            var level = $parent.data('level') + 1;
            var group_id = this.nextGroupId();
            var rule_id =this.nextRuleId(); 

            var $group = $(this._getGroupTpl(group_id, level));
            var $rule = $(this._getRuleTpl(rule_id));

            
            $parent.children('.rules-group-body').children('.rules-list').append($group);

            
            if(addRule) {
                $group.children('.rules-group-body').children('.rules-list').append($rule);
                this.initFilter($rule);
            }

            if(condition) {
                con_index = this.options.rels.indexOf(condition);
                $group.find('.group-conditions .btn').eq(con_index).trigger('click');
            }
 
            return $group;
            // var model = parent.addGroup($group);
        },
        _delGroup: function($group) {
            $group.remove();
        },
        _delRule: function($rule) {
            $rule.remove();
        },
        _getGroupTpl: function(group_id, level) {
            return groupTpl({
                data: this._renderData,
                group_id: group_id,
                level: level
            });
        },
        _getRuleTpl: function(rule_id) {
            return ruleTpl({
                data: this._renderData,
                rule_id: rule_id
            });
        },
        // 初始化字段下拉列表
        initFilter: function($rule, json) {
            var that = this;
            
            $rule.find(".rule-filter-container").oasSelect({
                data:that._renderData.filters,
                placeholder: that._renderData.selectPlaceHolder,
                width: that._renderData.selectWidth
            }).on("select.oasSelect",function(ev, $el, filter){
                if(filter.value == 'clearRule') {
                    // $rule.find(".rule-operator-container").data('oasSelect') && rule.find(".rule-operator-container").oasSelect('destroy');
                    $rule.find(".rule-operator-container").empty();
                    $rule.find('.rule-value-container').empty().removeClass('seperator');
                    return;
                }

                // 存储所选字段类型
                var ruleType = that.types[filter.type];
                $rule.data('filterType', ruleType);

                // if(filter.type == 'boolean') {
                //     var ruleId = $rule.attr('id');
                //     var radioName = this.nextValueId(ruleId);
                //     var $radio = $(radioTpl(radioName));
                //     $rule.find('.rule-value-container').empty().append($radio);
                //     return;
                // }

                // 获取该字段对应的所有operators
                var operators = that._getOperators(filter);

                that._initOperator($rule, operators, json);
            })  
            
            json && $rule.find(".rule-filter-container").oasSelect('select', {id: json.id});
        },
        /**
         * 初始化操作符列表
         * @$rule operator 父元素
         * @operators 操作符对象数组，用于初始化
         */
        _initOperator: function($rule, operators, json) {
            var that = this;

            $rule.find(".rule-operator-container").data('oasSelect') ? $rule.find(".rule-operator-container").oasSelect('data', operators) : $rule.find(".rule-operator-container").oasSelect({
                data:operators,
                placeholder: that._renderData.selectPlaceHolder,
                width: that._renderData.selectWidth
            }).on("select.oasSelect",function(ev, $el, operator){
                // 获取该字段对应的所有operators
                // var operators = that._getOperators(filter);
                $rule.data('operator', operator.value);

                that._renderValue($rule, operator, json);

                if(operator.nb_inputs === 0) {
                    $rule.find('.rule-value-container').empty().removeClass('seperator');
                }
                
            })

            // 默认选中第一个
            if(json) {
                $rule.find(".rule-operator-container").oasSelect('select',{value: json.operator}); 
            } else {
                $rule.find(".rule-operator-container").oasSelect('select',operators[0]);
            }
            
        },
        /**
         * 渲染value
         * @$rule value对应的rule节点
         * @operator 操作符信息
         */
        _renderValue: function($rule, operator, json) {
            $rule.find('.rule-value-container').addClass('seperator');
            var filterType = $rule.data('filterType');
            var valueHtml = '';

            if(filterType === 'datetime') {
                switch(operator.nb_inputs) {
                    case 2: 
                        valueHtml = '<div class="date-range datetime"></div>';
                        $rule.find('.rule-value-container').empty().append(valueHtml);
                        $rule.find('.rule-value-container .date-range').oasCalendar({
                            startFrom : 0,
                            type: 'daterange'
                        })
                        
                        json && $rule.find('.rule-value-container .date-range').oasCalendar('setStart', new Date(json.value[0]));
                        json && $rule.find('.rule-value-container .date-range').oasCalendar('setEnd', new Date(json.value[1]));
                        break;
                    case 1: 
                        valueHtml = '<input class="date-value datetime">';
                        $rule.find('.rule-value-container').empty().append(valueHtml);
                        $rule.find('.rule-value-container .date-value').oasCalendar({
                            startFrom : 0,
                            type: 'datetime'
                        })
                        json && $rule.find('.rule-value-container .date-value').oasCalendar('setDate', new Date(json.value));
                        break;
                    case 0: 
                        break;
                }
            }
            else if(filterType === 'boolean') {
                var ruleId = $rule.attr('id');
                var radioName = this.nextValueId(ruleId);
                var $radio = $(radioTpl({radioName: radioName}));
                $rule.find('.rule-value-container').empty().append($radio);

                if(json) {
                    var bool = json.value ? 1 : 0;
                    $radio.find('input[value=' + bool + ']').attr('checked', true);
                }     

            } else {
                switch(operator.nb_inputs) {
                    case 2: 
                        var $valueHtml = $('<input type="text" class="form-control rule-value"><input type="text" class="form-control rule-value">');
                        if(json) {
                            $valueHtml.eq(0).val(json.value[0]);
                            $valueHtml.eq(1).val(json.value[1]);
                        }
                        break;
                    case 1: 
                        var $valueHtml = $('<input type="text" class="form-control rule-value">');
                        json && $valueHtml.val(json.value);
                        break;
                    case 0: 
                        break;
                }
                $rule.find('.rule-value-container').empty().append($valueHtml);
            }   
        },
        // 获取字段对应的操作符
        _getOperators: function(filter) {
            var result = [];
             for (var i = 0, l = this.operators.length; i < l; i++) {
                // 过滤operators
                if (filter.operators) {
                    if (filter.operators.indexOf(this.operators[i].value) == -1) {
                        continue;
                    }
                }
                // 类型检查
                else if (this.operators[i].apply_to.indexOf(this.types[filter.type]) == -1) {
                    continue;
                }
                result.push(this.operators[i]);
            }

            // 排序
            if (filter.operators) {
                result.sort(function(a, b) {
                    return filter.operators.indexOf(a.type) - filter.operators.indexOf(b.type);
                });
            }

            return result;
        },
        // 判断是否是根节点
        isRoot: function($group) {
            return ($group.data('level') === 1);
        },
        // 获取当前规则值
        getValue: function($el) {
            var $value = $el.find('.rule-value-container');
            var filterType = $el.data('filterType');

            var value = null;
            if(filterType === 'datetime') {
                value = $value.find('.datetime').oasCalendar('getSelectDate');
            }
            else if(filterType === 'boolean') {
                value = $value.find('input:checked').val() ? true : false;
            } else {
                if($value.children().length > 1) {
                    value = [];
                    $value.children().each(function() {
                        value.push($(this).val);
                    })
                } else {
                    value = $value.children().val();
                }               
            }
            return value;
        },

        // 获取当前已选规则
        getRules: function($root) {
            var that = this;
            if ($root.hasClass('rule-container')) {
                var rule = {};
                if($root.find('.rule-filter-container').data('oasSelect')) {
                    var filter = $root.find('.rule-filter-container').oasSelect('select');
                    rule.id = filter.id;
                    rule.field = filter.value;
                    rule.type = filter.type;
                }
                if($root.find('.rule-operator-container').data('oasSelect')) {
                    var operator = $root.find('.rule-operator-container').oasSelect('select');
                    rule.operator = operator.value;
                }
                rule.value = that.getValue($root);

                return rule;
            }

            var rulesObj = {
                condition: $root.data('conditions'),
                rules: []
            };
            $root.children('.rules-group-body').children('.rules-list').children().each(function() {
                rulesObj.rules.push(that.getRules($(this)));  
            })
            return rulesObj;
        },

        // 设置规则 by json
        setRules: function($root, json) {
            var that = this;

            if(!json.condition) {
                that._addRule($root, json);
                return;
            }  

            if($root.is(that.$el)) {
                var $group = that._setRoot(false, json.condition); 
            } else {
                var $group = that._addGroup($root, false, json.condition);
            }
            
            if(!_.isEmpty(json.rules)) {
                _.forEach(json.rules, function(n, i) {
                    that.setRules($group, n);                  
                })
            }   
        },

        // 事件
		events: {
			//指定绑定事件的元素
			'target': function() {
				return this.$el;
			},
            'click .rules-group-header .btn-group .btn': function(self, e) {
                if(this.options.condition_readonly) {
                    return false;
                }

                var $self = $(self);

                // var index = $self.index();

                $self.addClass('active').siblings().removeClass('active');
                $self.closest('.rules-group-container').data('conditions', $self.data('rel'));
            }
		},
		// 组件对外方法集
		invoke: {
            /*
			 * 重置规则列表
			 */
            reset: function() {
                this._renderData = this._initData;
                this._iCall('setRules', [this._initData.defaultRules]);
            },
            /*
			 * 获取当前字段列表
			 */
            getFields: function() {
                var filters = _.reject(this._renderData.filters, {value: 'clearRule'});
                return filters;
            },
            /*
			 * 获取组件内置所有运算符列表
			 */
            getOperators: function() {
                return this.operators;
            },
            /*
            * destroy 组件
            */
			destroy : function() {
                this.$el.unbind('.' + this.uiName).removeData(this.uiName);
                this.$el.remove();
                this.$el.off("click.oasQuery");
                this.$el.off("keyup.oasQuery");
                // $(document).off("click.oasQuery" + this.randomNum);
                for(var i=0,len=allQueryArr.length;i<len;i++) {
                    if(allQueryArr[i]===this) {
                        allQueryArr.splice(i,1);
                    }
                }
            },
            getRules: function() {
                var rules = this.getRules(this.$el.children());
                return rules;
            },
            // 设置当前规则
            setRules: function(json) {
                if(_.isEmpty(json)) {
                    json = {
                        condition: 'AND',
                        rule: []
                    }
                }
                this.$el.empty();
                this.setRules(this.$el, json);
            },
		}
	});
    var allQueryArr = [];
}

},{"./calendar.tpl":71,"./group.tpl":72,"./radioValue.tpl":74,"./rule.tpl":75}],74:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"fd7bf95fe70afd45e4bb809e7aa3ee4d"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/query/radioValue',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,radioName=$data.radioName,$out='';$out+='<label class="beauty-check"> <input type="radio" name="';
$out+=$escape(radioName);
$out+='" value="1" > <span>true</span> </label> <label class="beauty-check"> <input type="radio" name="';
$out+=$escape(radioName);
$out+='" value="0" > <span>false</span> </label>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],75:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"ab0cc3152baf2fad7e9fce7cb2573970"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/query/rule',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,rule_id=$data.rule_id,data=$data.data,$out='';$out+='<li id="';
$out+=$escape(rule_id);
$out+='" class="rule-container"> <div class="rule-header"> <div class="btn-group pull-right rule-actions"> <div class="btn del-rule btn-danger" ';
if(data.no_delete){
$out+='disabled="disabled"';
}
$out+='>删除</div> </div> </div> <div class="rule-filter-container"></div> <div class="rule-operator-container"></div> <div class="rule-value-container"></div> </li>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],76:[function(require,module,exports){

/*
 * @desc scrollspy组件
 * @anthor eszhang
 * @Date 2016-03-31
 */


module.exports = function(){

	'use strict';

    $.oasUiFactory("oasScrollspy", {
    	VERSION: '1.0.0',
    	options: {
            target:              '',
            offset:              10,
            activeTarget:        null
    		
    	},

    	_create: function(){
            this.$body          = $(document.body);
    		    this.$scrollElement = this.$el.is(document.body) ? $(window) : this.$el;
            this.selector       =  (this.options.target || '') + ' .nav li > a';
            this.offsets        = [];
            this.targets        = [];
            this.scrollHeight   = 0;
            this.$scrollElement.on('scroll.oasScrollspy', $.proxy(this._process, this));
            this._refresh();
            this._process();
    	}, 

    	_getScrollHeight: function(){
            return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
        },

        _refresh: function () {
            var options = this.options, 
                that          = this,
                offsetMethod  = 'offset',
                offsetBase    = 0;

            this.offsets      = [];
            this.targets      = [];
            this.scrollHeight = this._getScrollHeight();

            if (!$.isWindow(this.$scrollElement[0])) {
              offsetMethod = 'position'
              offsetBase   = this.$scrollElement.scrollTop()
            }

            this.$body
              .find(this.selector)
              .map(function () {
                var $el   = $(this),
                    href  = $el.data('target') || $el.attr('href'),
                    $href = /^#./.test(href) && $(href);

                return ($href
                  && $href.length
                  && $href.is(':visible')
                  && [[$href[offsetMethod]().top + offsetBase, href]]) || null;
              })
              .sort(function (a, b) { return a[0] - b[0] })
              .each(function () {
                that.offsets.push(this[0]);
                that.targets.push(this[1]);
              });
        },

    	_process: function () {
            var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset,
                scrollHeight = this._getScrollHeight(),
                maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height(),
                offsets      = this.offsets,
                targets      = this.targets,
                activeTarget = this.options.activeTarget,
                i;

            if (this.scrollHeight != scrollHeight) {
                this._refresh();
            }

            if (scrollTop >= maxScroll) {  
                return activeTarget != (i = targets[targets.length - 1]) && this._activate(i);
            }

            if (activeTarget && scrollTop < offsets[0]) { 
                return this._clear();
            }

            for (i = offsets.length; i--;) {
              activeTarget != targets[i]
                && scrollTop >= offsets[i]
                && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
                && this._activate(targets[i])
            }
        },

    	_activate: function (target) { 

            var options = this.options;           
            
            this._clear();

            //更新标志位
            this.options.activeTarget = target;
            var selector = this.selector +
              '[data-target="' + target + '"],' +
              this.selector + '[href="' + target + '"]'

            var active = $(selector)
              .parents('li')
              .addClass('active')

            if (active.parent('.dropdown-menu').length) {
              active = active
                .closest('li.dropdown')
                .addClass('active');
            }

            active.trigger('activate.oasScrollspy')
        },

        _clear: function () {

            $(this.selector)
              .parentsUntil(this.options.target, '.active')
              .removeClass('active');

              //重置标志位
              this.options.activeTarget = null;


        },
 

    	// 对外方法
    	invoke: {
            //每当页面中从DOM中增加或删除页面元素时，都需要调用此方法
    		refresh : function(){
                 this._refresh();
                 this._process();      
            },
            //取消事件绑定
            cancel: function(){
                 this.$scrollElement.off('scroll.oasScrollspy');
                 this._clear();
            },
            //恢复事件绑定
            yes: function(){
                 this.$scrollElement.on('scroll.oasScrollspy', $.proxy(this._process, this));
                 this._iCall('refresh');   
            }
    	}
    });
    
    $('[oasScrollspy]').oasScrollspy({});
}
},{}],77:[function(require,module,exports){

var selectTpl = require("./select.tpl"),
	selectMenuTpl = require("./selectMenu.tpl"),
	selectOptionsTpl = require("./selectOptions.tpl"),
	selectHdNoSearchTpl = require("./selectHdNoSearch.tpl");
/**
 * 1、修复disable、placeholder只能应用于传数据格式不能引用于dom格式的问题
 * 2、在dom方式下，会同步进行selected选中，可以用于表单提交获取数据
 * 3、增加addClass选项用于设置特殊样式
 * 4、分组模式下不能掺杂非分组的（即所有选项必须都有自己的组）
 * 5、由于selcted 默认只支持单选 多选无法使用在 dom结构下
 * 6、多项匹配空格隔开
 * 7、在多选时，如果有模板需求，为了保证样式请使用这样的形式对text和comment使用这样方式进行包裹，<span class="option-value"  title=""></span> <span class="option-comment" title=""></span>
 * 8、组件调用组件时，uifactory中events的事件绑定在元素自身，故子组件中的绑定方法会率先执行。
 */
module.exports = function(){

	$.oasUiFactory("oasSelect", {
		VERSION: '1.0.0',
		options: { 
			//是否禁用select 
			disabled: false,
			//select宽度
			width: 250,
			//选项面板高度
			height: 181,
			//选项面板宽度(目前只有 传数据格式有效)
			dropWidth: 'auto',
			//没有selected项的默认显示 （在dom的模式下，select的placeholder作用级别大于配置项中的placeholder）
			placeholder: '请选择',
			//渲染的模板
			render: null,
			//面板偏移方向，和offset组合使用，默认为left
			align: 'left',
			//选项面板相对于select偏移的x, y（在没有设置container情况下生效）
			offset: [0, 0],
			//初始化数据
			data: [],
			//选项面板的父节点(需oasdropdown支持)
			container: null,

			// 2.0新增
			// 是否开启搜索 (如果需要匹配多个可以用空格分开)
			isSearch: false,
			searchCondition:['text'],
			// 获取数据url,`通过url获取数据时使用` 
			url: '',
			// 是否启用分页(分组情况下不支持分页)
			isPage: false,
			//是否是分批取数据
			isBatch: true,
			// 获取数据url,`通过url获取数据时使用`
			pagination:  {type:'simple',current:1,total:0,pageItems:6,msgTpl: '<span style="margin-right:5px;">{{total}}项</span><span>{{current}}/{{totalPages}}页</span>',pageNoChange:function(ev, current, pageItems){}},
			// 是否支持多选
			isMultiple: false,
			// 无数据时显示的提示
			nodataTip: '暂无数据',
			size: 'default'
		},
		_create: function(){
			// 兼容以前的api
			if(this.options.paginInfo !== undefined){
				this.options.pagination = this.options.paginInfo;
			}
			//初始化select所需数据
			this._preRenderData();
		},
		events: {
			//指定绑定事件的元素
			'target': function() {
				if (this.options.container) {
					return $(this.options.container).find('.' + this.randomClass);
				}else{
					return this.$select_el;
				}
			},
			//select选中事件
			'click .select-bd-li': function(self, evt) {
				var $self = $(self);
				if ($self.hasClass('disabled') || !$(self).attr('data-value')) { return false;}
				if(this.options.isMultiple){
					this._multipleClick($self);
					var obj = {value: $self.attr('data-value')};
					//选中元素是否有group父元素，如有，获取父元素的text
					groupTxt = $self.parents('.select-optgroup-li').size() ? $self.parents('.select-optgroup-li').find('.group-value').text() : null;
					//设置选中项
					this._select(obj,groupTxt);
					if(this.options.isSearch){
						this.$select_el.find('.oas-select-hideInput').val('');
						this.$select_el.find('.oas-select-hideInput').focus();
						this.$select_el.find('.oas-select-hideInput').trigger('keyup');
					}
					return false;
				}else{
					var index = $self.index(),  //选中元素在当前上下级中的index
					obj = {value: $self.attr('data-value')},
					//选中元素是否有group父元素，如有，获取父元素的text
					groupTxt = $self.parents('.select-optgroup-li').size() ? $self.parents('.select-optgroup-li').find('.group-value').text() : null;
					//设置选中项
					this._select(obj,groupTxt);
					this.options.isSearch ? this.inputValue = $self.attr('data-value') : undefined;
					if(this.options.isPage && !this.options.isSearch ){
						// 分页只刷options不刷分页部分
						this.$select_el.find('.select-hd').html(selectHdNoSearchTpl(this._renderData));
						this._renderData.chosen ? this.$select_el.find('.select-hd').addClass('selected') : undefined;
						$(self).addClass('focus');
						this._iCall('close');
					}else{
						//重置select
						this._reload();
					}
				}
			},
			'click .group-value': function(self, evt) {
				return false;
			},
			//select hover状态
			'mouseover .select-bd-li': function(self, evt) {
				if ($(self).hasClass('disabled') || !$(self).attr('data-value')) { return false;}
				$(self).closest(".oas-select-bd").find('.select-bd-li').removeClass('focus');
				$(self).addClass('focus');
			},
			'mouseout .select-bd-li': function(self, evt) {
				$(self).parents('.oas-select-bd').css('display')!== 'none' ? $(self).removeClass('focus') : undefined;
			}
		},
		_preRenderData: function() {
			var that = this,
				options = this.options;			
// TODO	 分页的高度，方便后面调整分页高度时的修改
			this.pageHeight = 36;
			this._isPageEffect();
			if (this.$el.is('select')) {//如果是select的情况，并且用type=0标识
				// this.$el.css('display','none');
				this.type = 0;
				//整理元素初始化数据格式
				this._initData = this._convertData(this.$el);
			} else {//如果是非select的情况，并且用type=1标识
				this.type = 1;
				//整合数据初始化数据
				this._initData = {
					// 多选时用于存放选中项
					chosenArray : [],
					// 是否隐藏页脚
					hideFooter : false,
					selectBdMaxHeightInSearch: this.options.height - this.pageHeight + 'px',
					isMultiple: options.isMultiple,
					nodataTip: options.nodataTip,
					list: options.data,  //选项面板数据
					isSearch: options.isSearch,
					isPage: options.isPage,// 是否启用分页
					disabled: options.disabled,  //是否禁用
					placeholder: options.placeholder   //默认显示
				};
			}
			//整合render、selected项数据
			this._processData(this._initData);
			this._createDom();
			// 传url初始化
			this._initModel();
			// 非url形式下绑定input修改事件，url形式下在回调函数中绑定
			this.options.url === ''  ? this._bindChange() : undefined;
			this.hdHeight = this.$select_el.find('.select-hd').height();
			// 在启用分页且没有分组的情况下 分页生效 
			// 不分批获取数据
			if(this.options.isPage && !this.options.url && this.options.isBatch===false){
				this._renderDataPage = $.extend(true, {}, that._initData);
				this._dealData();
				this._dataByIndex(parseInt(this.options.pagination.current,10)-1);
				this._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(this._renderDataPage));
			}else if(this.options.isPage && !this.options.url && this.options.isBatch){
			// 分批获取数据
				this._renderDataPage = $.extend(true, {}, that._initData);
				var loop = this.options.pagination.pageItems - this._renderDataPage.length;
				if(this._renderDataPage.length < this.options.pagination.pageItems){
					for (var i = 0; i < loop; i++) {
						this._renderDataPage.push({label:"",num:"",value:""});
					};
				}
				this._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(this._renderDataPage));
				this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin(this.options.pagination).on("pageNoChange.oasPagin",this.options.pagination.pageNoChange);
			}
			this.$select_el.find('.select-hd').on('click','.oas-select-multiple-delete',function(){
				var $self = $(this);
					that._getSelectBd().find('.select-bd li[data-value='+$self.parents('li').attr("data-value")+']').removeClass('oas-select-multiple-selected');
					if($self.parents('li').siblings('.oas-select-multiple-input-selected').length === 0){
						that.$select_el.find('.select-placeholder').css('display','block');
					}
					$self.parents('li').remove();
					if(that.hdHeight !== that.$select_el.find('.select-hd').height()){
						that._getSelectBd().css('top',that._getSelectBd().css('top').slice(0,-2)-0-27);
						that.hdHeight = that.$select_el.find('.select-hd').height();
					}
					var delValue = $self.parents('li').attr('data-value');
					 _.remove(that._renderData.chosenArray, function(n) {
						return n.value == delValue;
					});
					return false;
			})

			this.$select_el.find('.select-hd').on('keyup','.oas-select-hideInput',function(evt){
				// 自动增加input的长度
				// 输入是打开面板
				that._iCall('open');
				$(this).width(that._getTextWidth($(this).val()) + 10);
				if(that.hdHeight < that.$select_el.find('.select-hd').height()){
					that._getSelectBd().css('top',that._getSelectBd().css('top').slice(0,-2)-0+27);
					that.hdHeight = that.$select_el.find('.select-hd').height();
				}else if(that.hdHeight > that.$select_el.find('.select-hd').height()){
					that._getSelectBd().css('top',that._getSelectBd().css('top').slice(0,-2)-0-27);
					that.hdHeight = that.$select_el.find('.select-hd').height();
				}
				if(that.options.isSearch && that.options.isMultiple){
					if(evt.keyCode === 8 && $(this).val() === ''){
						that.$select_el.find('.oas-select-multiple-input-selected:last .oas-select-multiple-delete').trigger('click');
					}
					if(evt.keyCode === 13){
						that.bulrValide();
						that.$select_el.find('.oas-select-hideInput').trigger('click');
					}
				}
				return false;
			})

			this.$select_el.find('.select-hd').on('keyup','.oas-select-hideInput',function(){
				that._toggleMultiplePlaceholder();
				return false;
			})

			this._getSelectBd().on('click','.oas-select-ft',function(){
				return false;
			})

		},
		_dataByIndex:function(pageIndex){
			this.currentList = this.dataByIndex[pageIndex + ""];
			if(!this.currentList){
				this.currentList = this.dataByIndex["0"];
			}

			var currentListBak = $.extend(true, [], this.currentList);
			this.currentTrueLength = _.filter(currentListBak, function(li){
				return li.value != '';
			}).length;
			var addItems = this.options.pagination.pageItems - this.currentList.length;
			// 如果本页没有放满，用空的元素对象补满
			if(this.currentList.length < this.options.pagination.pageItems){
				for(var i = 0; i < addItems;i++){
					this.currentList.push({text:"",num:"",value:""});
				}
			}
			this.currentPage = pageIndex;
			this._renderDataPage.list = this.currentList;
		},
		//内部翻页
		_onPageNoChage:function(current,pageItems){
			var that = this;
			this._dataByIndex(current);
			if(this.options.isSearch){
				// this.validateRendar();
				var _renderDataBakShow = $.extend(true, {}, this._renderDataBak);
			    if(this.options.isPage){
					var startIndex =(parseInt(this.options.pagination.current,10)-1)*this.options.pagination.pageItems;
				    _renderDataBakShow.list = _renderDataBakShow.list.slice(startIndex,startIndex + this.options.pagination.pageItems);
			    }
				this._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(_renderDataBakShow));
			}else{
			    this._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(this._renderDataPage));
			}

			if(this.options.isMultiple){
				this._getSelectBd().find('.select-bd-li').each(function(){
					var value = $(this).attr('data-value');
					// 如果chosenArray有 则回显
					if(_.result(_.find(that._renderData.chosenArray, function(obj){
						return obj.value == value;
					}),'value') !== undefined){
						$(this).addClass('oas-select-multiple-selected');
					}
				});
			}
		},
		_initModel: function(){
			var that = this,
				options = this.options;
			if(that.options.url === '' ) return;
			
			that._getSelectBd().find('ul.select-bd').html('<div class="oas-select-searching"><i class="oasicon oasicon-loading oasis-spin oas-select-searching-icon"></i><span class="oas-select-searching-text">加载中...</span></div>');
			that._getSelectBd().find('.oas-select-ft').css('display','none');

			that._model = oasisl.baseModel.extend({
				statics: {
					baseUrl: that.options.url
				}
			});
			that._model.list().then(function(res){
				that._getSelectBd().find('.oas-select-ft').css('display','block');
				if(res.meta.status === 0){
					for(var i = 0; i < res.data.length; i++){
						if(res.data[i].render){
							res.data[i].render = template.compile(res.data[i].render);
						}
					}
					that._initData = {
						chosenArray : [],
						// 是否隐藏页脚
						hideFooter : false,
						selectBdMaxHeightInSearch: that.options.height - that.pageHeight + 'px' ,
						isMultiple: that.options.isMultiple,
						nodataTip: that.options.nodataTip,
						list: res.data,  //选项面板数据
						isSearch: that.options.isSearch,
						isPage: options.isPage,// 是否启用分页
						disabled: options.disabled,  //是否禁用
						placeholder: options.placeholder   //默认显示
					};
					//整合render、selected项数据
					that._processData(that._initData);
					// isSearch为true时，绑定输入搜索
					that._bindChange();
					// 渲染
					that._iCall('data', [that._initData.list]);
					if(that.options.isPage && that._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").data('oasPagin') === undefined){
						// that.options.pagination.total = res.total;
						that.options.pagination.total = res.page.totalRows;
						that._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin(that.options.pagination).on("pageNoChange.oasPagin",that.options.pagination.pageNoChange);
					}else if(that.options.isPage ){
						that.options.pagination.total = res.page.totalRows;
						that._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin('total',that.options.pagination.total);
					}

					if(that.options.isPage && that.options.isBatch){
						that._renderDataPage = $.extend(true, {}, that._initData);
						var loop = that.options.pagination.pageItems - that._renderDataPage.length;
						if(that._renderDataPage.length < that.options.pagination.pageItems){
							for (var i = 0; i < loop; i++) {
								that._renderDataPage.push({label:"",num:"",value:""});
							};
						}
						that._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(that._renderDataPage));
						}
					}
			});
		},
		// 使分组情况下分页功能失效（暂不支持分组）
		_isPageEffect: function(){
			if (this.$el.is('select')) {
				// 传数据情况下是否分组
				this.$el.find('optgroup').length !== 0 ? this.isGroup = true : undefined;
			}else{
				_.forEach(this.options.data, function(n, key) {
					if (n.children) {
						this.isGroup = true;
					} 
				});
			}
			this.options.isPage = this.options.isPage && !this.isGroup;
			this.options.isPage && this.isGroup ? console.warn('暂不支持分组情况下使用分页') : undefined;
			// 设置pageNochange方法
			if(this.options.isPage ){
				var that = this;
				// 分页默认227
				this.options.height === 181 ? (this.options.height = 227) : undefined;
				if(this.options.isBatch && !this.options.url){
					return false;
				} 
				this.options.pagination.pageNoChange = function(ev, current, pageItems){
					var self = that;
					if(!that.options.isBatch){
						that.options.pagination.current = parseInt(current);
						that._onPageNoChage(current-1,pageItems);
					}else if(that.options.isBatch && !!that.options.url){
						that._model.condition = {pageNo:current, pageItems: that.options.pagination.pageItems}
						// 数据没出来前显示加载中,把分页隐藏
						that._getSelectBd().find('ul.select-bd').html('<div class="oas-select-searching"><i class="oasicon oasicon-loading oasis-spin oas-select-searching-icon"></i><span class="oas-select-searching-text">加载中...</span></div>');
						that._getSelectBd().find('.oas-select-ft').css('display','none');

						that._model.list(that._model.condition).then(function(res){
							if(res.meta.status === 0){
								that._getSelectBd().find('.oas-select-ft').css('display','block');
								var options = self.options;
								for(var i = 0; i < res.data.length; i++){
									if(res.data[i].render){
										res.data[i].render = template.compile(res.data[i].render);
									}
								}
								self._initData = {
									chosenArray : [],
									// 是否隐藏页脚
									hideFooter : false,
									selectBdMaxHeightInSearch: self.options.height - self.pageHeight + 'px' ,
									isMultiple: self.options.isMultiple,
									nodataTip: self.options.nodataTip,
									list: res.data,  //选项面板数据
									isSearch: self.options.isSearch,
									isPage: options.isPage,// 是否启用分页
									disabled: options.disabled,  //是否禁用
									placeholder: options.placeholder   //默认显示
								};
								//整合render、selected项数据
								self._processData(self._initData);
								self._renderDataPage = $.extend(true, {}, self._initData);
								var loop = self.options.pagination.pageItems - self._renderDataPage.length;
								if(self._renderDataPage.length < self.options.pagination.pageItems){
									for (var i = 0; i < loop; i++) {
										self._renderDataPage.push({label:"",num:"",value:""});
									}
								}
								self._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(self._renderDataPage));
								if(self.options.isMultiple){
									self._getSelectBd().find('.select-bd-li').each(function(){
										var value = $(this).attr('data-value');
										// 如果chosenArray有 则回显
										if(_.result(_.find(self._renderData.chosenArray, function(obj){
											return obj.value == value;
										}),'value') !== undefined){
											$(this).addClass('oas-select-multiple-selected');
										}
									});
								}
							}
						})
					}
				};
			}
		},
		_processData: function(data) {
			var childrenSelect = null,
				that = this,
				list = null;

			if ($.isArray(data)) {
				list = data;
			} else {
				this._renderData = $.extend(true, {}, that._initData);
				list = this._renderData.list;
			}
			//判断元素本身是否有render，没有再寻找options中是否有render
			_.forEach(list, function(n, key) {
				if (n.children) {
					_.forEach(n.children, function(n, key) {
						that._convertRenderDate(n);
						n.text = that._mergeTextLabel(n);
					});
				} else {
					that._convertRenderDate(n);
					n.text = that._mergeTextLabel(n);
				}
			});
			//选出已选项，提供给select默认渲染
			childrenSelect =_.find(list, {children: [{selected: true}]});
			this._renderData.chosen = _.find(list, {selected: true}) || 
						(childrenSelect ? _.find(childrenSelect.children, {selected: true}): undefined);
			this._renderData.list = list;
		},
		// search模式下处理数据方法
		_processDataSearch: function(data) {
			var childrenSelect = null,
				that = this,
				list = null;

			if ($.isArray(data)) {
				list = data;
				list.len = data.length;
			} else {
				this._renderDataBak = $.extend(true, {}, that._initData);
				list = this._renderDataBak.list;
			}
			//判断元素本身是否有render，没有再寻找options中是否有render
			_.forEach(list, function(n, key) {
				if (n.children) {
					_.forEach(n.children, function(n, key) {
						that._convertRenderDate(n);
						n.text = that._mergeTextLabel(n);
					});
				} else {
					that._convertRenderDate(n);
					n.text = that._mergeTextLabel(n);
				}
			});
			//选出已选项，提供给select默认渲染
			childrenSelect =_.find(list, {children: [{selected: true}]});
			this._renderDataBak.chosen = _.find(list, {selected: true}) || 
						(childrenSelect ? _.find(childrenSelect.children, {selected: true}): undefined);
			this._renderDataBak.list = list;
		},
		_convertRenderDate: function(n) {
			if(n.render) {
				n.renderData = n.render(n);
			} else if (this.options.render) {
				n.renderData = this.options.render(n);
			}
		},
		// 如果是select格式的转化数据
		_convertData: function(ele) {
			var options = ele[0].options,  //所有的选项
				l = options.length,
				i = 0,
				list = [],
				groupLabel = null,
				data= {}, 
				// item 分组情况下使用，text为optgroup的label属性，即为组名
				item = {},
				// 解决dom格式下默认placeholder提示不显示的问题
				selected = false,
				option = null;
			// 解决dom格式下默认placeholder提示不显示的问题 查看原dom结构下是否含有selected 没有则说明没有
			// 默认选中，提示placeholder
			if(ele.html().split('selected').length !== 1){
				selected = true;	
			}
			for (; i < l; i++) {
				option = options[i];
				var text = this._mergeTextLabel(option);
				// 利用js原生属性可以拿到这些值
				data = {
					value: option.value,
					text: text,
					selected: selected && option.selected,
					disabled: option.disabled
				}
				// 含有组的情况下进行分组
				if (options[i].parentNode.getAttribute('label')) {
					//是否含有分组 
					this.isGroup = true;
					if (groupLabel !== options[i].parentNode.getAttribute('label')) {
						groupLabel = options[i].parentNode.getAttribute('label');
						item = {};
						item.text = groupLabel;
						item.children = [];
						list.push(item);
					}
					item.children.push(data);	
				} else {
					list.push(data)
				}
			}
			
			return {
				chosenArray : [],
				// 是否隐藏页脚
				hideFooter : false,
				selectBdMaxHeightInSearch: this.options.height - this.pageHeight + 'px',
				nodataTip: this.options.nodataTip,
				isMultiple: this.options.isMultiple,
				list: list,
				isSearch:this.options.isSearch,
				isPage: this.options.isPage,
				disabled: ele.prop('disabled') || this.options.disabled,
				placeholder: ele.attr('placeholder') || this.options.placeholder
			};
		},
		_createDom: function() {
			var options = this.options,
				that = this;
			if (this.type) {
				if(this.$el.attr('type') === 'text'){
					// 为了适配1.0版本 thinkinput 作出的适配，适配input初始化的情况
					this.$el.css('width',this.options.width);
					this.$el.addClass('select-hd');
					this.$el.wrap('<div class="oas-select dropdown"></div>');
					this.$el = this.$el.parents('.oas-select');
					
					this.$select_el = this.$el;
					this.$select_el.find('input').attr('placeholder',this.options.placeholder);
					this.$select_el.find('input').attr('name','select-search');
					this.$select_el.find('input').addClass('select-hd select-search-input');
					$('<i class="search-icon oasicon oasicon-search"></i><div class="oas-select-bd dropdown-menu" role="menu"></div>').insertAfter(this.$select_el.find('input'));
					this.$select_el.find('.oas-select-bd').html(selectMenuTpl(this._renderData));
					// 设置input的size
					this._setSize();
				}else{
				    this.$el.addClass('oas-select dropdown').empty().html(selectTpl(this._renderData));
					// 设置input的size
					this._setSize();
				    this.$select_el = this.$el;
				}
			} else {
				this.$el.hide().after($('<div class="oas-select dropdown">' + selectTpl(this._renderData) + '</div>'));
				this.$select_el = this.$el.next('.oas-select');
			}

			this.$select_el.css({
				width: options.width
			});

			//初始化选项面板
			this._dropDown();

			if(this.options.isPage && !this.options.isBatch){
				this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin(this.options.pagination).on("pageNoChange.oasPagin",this.options.pagination.pageNoChange);
			}
		},
		_setSize: function(){
			if(this.options.size === 'large'){
				this.$el.addClass('large');
			}else if(this.options.size === 'small'){
				this.$el.addClass('small');
			}
		},
		_mergeTextLabel: function(option){
			// 为了兼容input ，解决select中数据展示字段为text,thinkInput中为label的问题
			if(option.text !== undefined){
				return option.text;
			}else if(option.label !== undefined){
				return option.label;
			}
		},
		/**
		 * 返回组件的 oas-select-bd的jquery对象
		 */
		_getSelectBd: function(){
			var $selectBd;
			if(this.options.container){
				$selectBd = $(this.options.container).find('.' + this.randomClass);
			}else{
				$selectBd = this.$select_el.find('.oas-select-bd');
			}
			return $selectBd;
		},
		/*
		 * 设置选中项
		 * @param: {selected} 选中项依据，只能为Number或者Object，Number为数据索引，Object如 {text: 'ly'}
		 * 		   {group} 分组的父元素text，如果有分组、selected为Number且无此参数，默认在第一个分组里面选择
		 */
		_select: function(selected, group) {
			var args = arguments,
				list = this._renderData.list,
				childSelect = _.find(list, 'children'),
				chosen = null,
				chosenCopy = null;



			if (args[1]) {
				childSelect = _.find(list, {'text': args[1]});

				if (_.isObject(args[0])) {
					childSelect = _.where(list, {'children' : []})
				}
			}
				
			if (_.isNumber(args[0])) {
				chosen = childSelect ? _.at(childSelect.children, args[0])[0] : _.at(list, args[0])[0];
			} else if (_.isObject(args[0])) {
				if (childSelect) {
					_.forEach(childSelect, function(n) {
						if (_.find(n.children, args[0])) {
							chosen = _.find(n.children, args[0]);
						}
					});
				} else {
					chosen = _.find(list, args[0]);
				}
			} else {
				console.warn(this.uiName + '设置选择必须为json或者数字');
			}

			if (chosen && chosen.disabled != true) {
				if( this.options.isMultiple){
					// 查看chosenArray中是否含有chosen，有则删除没有则添加
					if(_.result(_.find(this._renderData.chosenArray, chosen), 'value') !== undefined){
						 _.remove(this._renderData.chosenArray, function(n) {
							return n.value == chosen.value;
						});
					}else{
						this._renderData.chosenArray.push(chosen);
					}
				}else{
					// 非多选
					chosenCopy = $.extend(true, {}, chosen);
					if (this._renderData.chosen) {
						this._renderData.chosen.selected = false;
					}
					chosen.selected = true;
					this._renderData.chosen = {};
					this._renderData.chosen = chosen;

					//选项变化事件
					if (!chosenCopy.selected) {
						this._emit('change', [this.$select_el, chosen]);
					} 
					this._emit('select', [this.$select_el, chosen]); 

					if (this.$el.is('select')) {
						this.$el.find('option[value='+chosen.value+']').attr('selected',true);
					}
				}				
			} 
			//this.$el.val(chosen.value);
		},
		//调用dropdown初始化select选项面板
		_dropDown: function() {
			var that = this,
				align = this.options.align,
				headerH,
				dropStyle = {};
			if (this._renderData.disabled) {
				this.$select_el.addClass('disabled');
				return;
			}
			if(this.options.container && this.randomClass === undefined){
				this.randomClass = new Date().getTime() + '';
				// 为$select_el添加对应menu的特定class在data-menucls属性上，用于找到对应menu
				this.$select_el.attr('data-menucls',this.randomClass);
			}
			this.$select_el.find('.select-hd').oasDropdown({
				isClickable : true,
				miss: true,
				container: this.options.container ? this.options.container : null,
				randomClass:this.randomClass ? this.randomClass : '' ,
				offset: [0,6]
			});
			headerH = this.$select_el.find('.select-hd').outerHeight() + 6;
			dropStyle = {
				width: this.options.dropWidth === 'auto' ? this.options.width : this.options.dropWidth,
				maxHeight: this.options.height,
				left: +this.options.offset[0] ? 0 - this.options.offset[0] : 0,
				top: +this.options.offset[1] ? +this.options.offset[1] + headerH : headerH
			}
			if (align == 'right') {
				dropStyle.left = 'inherit';
				dropStyle.right = +this.options.offset[0] ? 0 - (+this.options.offset[0]) : 0;
			}
			if(this.options.container){
				this.$select_bd = $(this.options.container).find('.' + this.randomClass).css(dropStyle);
			}else{
				this.$select_bd = this._getSelectBd().css(dropStyle);
			}
			this.$select_el.find('.select-hd').on('show.oasDropdown',function(ev,$el) {
				if(that.options.isMultiple && that.options.isSearch){
					that.$select_el.find('.oas-select-hideInput').focus();
				}

				// 为了在使用dropdown情况下满足分页样式要求进行样式调整
				if(that.selectBdMaxHeight === undefined){
					if($el.siblings('.oas-select-bd').length !== 0){
					    var $selectBd = $el.siblings('.oas-select-bd');
					}else{
						var dataMenucls = $el.parents('.oas-select').attr('data-menucls');
						var $selectBd = $('.'+dataMenucls);
					}
					that.selectBdMaxHeight = $selectBd.css('max-height');
					$selectBd.find('.select-bd').css('max-height',that.selectBdMaxHeight);
					$selectBd.css('max-height','none');
				}

				inputValue = $(this).val();
				that.inputValue = inputValue;
				that._renderDataBak = $.extend(true, {}, that._renderData);
				for(var j = 0; j < that._renderDataBak.list.length; j++ ){
					that._renderDataBak.list[j].title = that._renderDataBak.list[j].text;
				}
				// 分批只有在分页是有效
				if(!(that.options.isPage && that.options.isBatch) && that.options.isSearch){
					if(that.$select_el.find('.select-search-input').length === 1){
						that.$select_el.find('.select-search-input').val() === '' ? that._renderDataBak.hideFooter = false : that._renderDataBak.hideFooter = true;
					}
					if(that.options.isPage && !that.options.isMultiple){
					// if(!that.options.isMultiple){
						that.validateRendar();
						if(that.$select_el.find('.select-search-input').val() === ''){
							that._renderDataPage = $.extend(true, {}, that._initData);
							that._dealData();
							that._dataByIndex(0);
							
							that._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin('current',that.options.pagination.current);
							that._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(that._renderDataPage));
						}
					}else if(!that.options.isPage && !that.options.isMultiple){
						that.validateRendar();
						if(that.$select_el.find('.select-search-input').val() === ''){
							that._renderDataPage = $.extend(true, {}, that._initData);
							that._dealData();
							that._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(that._renderDataPage));
						}
					}else if(that.options.isMultiple && that.options.isSearch){
						that.validateRendar();
					}
				}
			   that.$select_el.find('.oasicon-desc').addClass('close-animation');
				// 触发打开事件
				that._emit('open',[that.$select_el]);
			});
			this.$select_el.find('.select-hd').on('hide.oasDropdown',function(ev,$el) {
				that.$select_el.find('.oasicon-desc').removeClass('close-animation');
				// event.stopPropagation;
				that.bulrValide();
                if(that.options.isPage && !that.options.isMultiple && that.$select_el.find('.select-search-input').val() === ''){
					that.options.pagination.current = 0;
				}
				that._emit('close',[that.$select_el]);
			});			
		},
		// 失去焦点时校验是否为下拉框中的值，如不是则清空且去除不符合验证的样式
		bulrValide: function(){
			var that = this;
			if(that.options.isSearch){
				var chosen = _.find(that._renderData.list, function(obj) {
					return (!obj.disabled) && (obj.text === that.$select_el.find('.select-search-input').val());
				});
				// 查看input框中的内容是否是下拉选择中的内容
				var searchResult = _.result(chosen, 'text') === undefined ? false : true;
				searchResult === false ? that.$select_el.find('.select-search-input').val('') : undefined;
				// 增加失去焦点时，输入项为列表中有的值,触发选中事件。
				if(searchResult){
					this._emit('select', [this.$select_el, chosen]); 
				}

				if(searchResult && that.options.isMultiple){
					that._getSelectBd().find('.select-bd .select-bd-li .option-value').filter(function(){
						return $(this).text() === that.$select_el.find('.select-search-input').val();
					}).parents('li').trigger('click');
				}

				if(that.options.isMultiple){
					searchResult === false ? that.inputValue = '' : undefined;
					that.$select_el.find('.multiple-hd').removeClass('oas-select-nomatch');
					that._toggleMultiplePlaceholder();
				}else{
 					that.$select_el.find('.select-search-input').removeClass('oas-select-nomatch');
				}
			}
		},
		//启用分页增加 pageNum 、total、dataByIndex三个属性，其中dataByIndex用于分页获取数据
		_dealData: function(){
			var data = this._renderData.list,
				total = data.length,
				pageItems = this.options.pagination.pageItems,
				pageNum = Math.ceil(total/pageItems),
				lastPageNum = total % pageItems,
				dataByIndex = {};
			if(total > 0){
				if(pageNum == 1){
					dataByIndex["0"] = data;
				}else{
					for (var i = 0; i < pageNum-1; i++) {
						var onePageData = [];
						for (var j = 0; j < pageItems; j++) {
							onePageData.push(data[i * pageItems + j]);
						}
						dataByIndex[i +""] = onePageData;
					}
					var lastPageData = [];
					lastPageNum = lastPageNum == 0 ? pageItems : lastPageNum;
					for (var k = 0; k < lastPageNum; k++) {
						lastPageData.push(data[(pageNum -1) * pageItems + k]);
					}
					dataByIndex[pageNum -1 + ""] = lastPageData;
				}				
			}else if(total == 0){
				dataByIndex["0"] = [];
			}
			this.pageNum = pageNum;
			this.dataByIndex = dataByIndex;
			this.total = total;
		},
		//销毁选项面板
		_destroyDropDown: function() {
			if (this.$select_el.find('.select-hd').data('oasDropdown')) {
				this.$select_el.find('.select-hd').oasDropdown('destroy');
			}
		},
		_reload: function() {
			var that =this;
			//销毁选项面板
			this._destroyDropDown();
			this.$select_el.html(selectTpl(this._renderData));
			//初始化新的选项面板
			this._dropDown();
			this._bindChange();
			if(this.options.container){
				this._bindUiEvents();
			}
			if(this.options.isPage){
				this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin(this.options.pagination).on("pageNoChange.oasPagin",this.options.pagination.pageNoChange);
				this._renderDataPage = $.extend(true, {}, this._initData);
				this._dealData();
				this._dataByIndex(parseInt(this.options.pagination.current,10)-1);
				this._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(this._renderDataPage));
			}
		},
		_reloadMenu: function() {
			var that = this;
			//销毁选项面板
			this._destroyDropDown();
			this._renderDataBak.len = this._renderDataBak.list.length;
			//重置select
			this._getSelectBd().html(selectMenuTpl(this._renderDataBak));
			// 设置回显
			this._getSelectBd().find('.select-bd-li').each(function(){
				var value = $(this).attr('data-value');
				// 如果chosenArray有 则回显
				if(_.result(_.find(that._renderData.chosenArray, function(obj){
					return obj.value == value;
				}),'value') !== undefined){
					$(this).addClass('oas-select-multiple-selected');
				}
			});
			if(this.options.isPage){
				this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin(this.options.pagination).on("pageNoChange.oasPagin",this.options.pagination.pageNoChange);
				this._renderDataPage = $.extend(true, {}, this._initData);
				this._dealData();
				this._dataByIndex(parseInt(this.options.pagination.current,10)-1);
				this._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(this._renderDataPage));
			}
			//初始化新的选项面板
			this._dropDown();
		},
		_bindChange: function(){
			var that = this,
				inputValue = "";
			// 是否开启搜索模式
			if(this.options.isSearch === false) {
				return false;
			}
			this.$select_el.find('.select-search-input').on("keyup.oasSelect",function(e){
				that._iCall('open');
				that._renderDataBak = $.extend(true, {}, that._renderData);

				$(this).val() === '' ? that._renderDataBak.hideFooter = false : that._renderDataBak.hideFooter = true;
				for(var j = 0; j < that._renderDataBak.list.length; j++ ){
					that._renderDataBak.list[j].title = that._renderDataBak.list[j].text;
				}
				inputValue = $(this).val();
				if(that.inputValue === inputValue.replace(/(^\s+)|(\s+$)/g,"").replace(/\s/g,"")){
					return;
				}
				that.inputValue = inputValue;
				that._emit('change',[$(this).val()]);
				// 分批只有在分页是有效
				if(!(that.options.isPage && that.options.isBatch) && that.options.isSearch){
					// 返回匹配后的数组，通过判断数组中元素个数查看是否无匹配项
					var tempArray = that.validateRendar();
					if(tempArray.length === 0){
						that.options.isMultiple ? that.$select_el.find('.multiple-hd').addClass('oas-select-nomatch') : that.$select_el.find('.select-search-input').addClass('oas-select-nomatch');
					}else{
						that.options.isMultiple ? that.$select_el.find('.multiple-hd').removeClass('oas-select-nomatch') : that.$select_el.find('.select-search-input').removeClass('oas-select-nomatch');
					}
				}
			});
		},
		//匹配
		matchInput:function(input,data){
			var search = input.split(' ');
			var findNum = 0;
			for (var i = 0; i < search.length; i++) {
				var index = data.toLowerCase().indexOf(search[i].toLowerCase());
				if(index != -1){
					findNum ++;
				}
			}
			if(findNum == search.length){
			    return true;
			}else{
			  	return false;
			}
		},
		validateRendar: function(){
			var that = this,
				data = $.extend(true, [], this._renderDataBak.list),
				inputValue = this.inputValue,
				tempArray = [];
			for(var i = 0; i < data.length; i++){
				var isMatch = false;
				// 去除原thinkInput中value和num验证
				// if(that.matchInput(inputValue,data[i].text) || (data[i].num && that.matchInput(inputValue,data[i].num)) || (data[i].value&&that.matchInput(inputValue,data[i].value))){
				for(var k = 0; k < this.options.searchCondition.length;k++){
					isMatch = isMatch || that.matchInput(inputValue,data[i][this.options.searchCondition[k]]);
				}

				if(isMatch){
					var inputValueArray = inputValue.split(' ');
					_.remove(inputValueArray, function(n) {
						return n === '';
					});
					for(var j = 0;j < inputValueArray.length; j++){
						if(!data[i].disabled){
							data[i].text = data[i].text.replace(inputValueArray[j],'<em class="oas-select-search-value">'+inputValueArray[j]+'</em>');
						}
					}
					tempArray.push(data[i]);
				}
			}
			this._dataOptions(tempArray);
			// 验证后重置面板最大高度
			if(this.selectBdMaxHeight !== undefined){
                this.$select_bd.find('.select-bd').css('max-height',this.selectBdMaxHeight);
			}
			return tempArray;
		},
		_dataOptions: function(data){
			var options = this.options;
			if (_.isArray(data)) {
				// this._processData(data);
				this._processDataSearch(data);
			} else {
				console.warn(this.uiName + '("data")方法的参数不是一个数组');
			}
			this._reloadOptions();
		},
		_reloadOptions: function(){
			var that = this;
			//销毁选项面板
			// this._destroyDropDown();
			// this._dropDown();
			// 取第一页数据进行展示
			this._renderDataBak.len = this._renderDataBak.list.length;
			var _renderDataBakShow = $.extend(true, {}, this._renderDataBak);
			if(this.options.isPage){
				_renderDataBakShow.list = _renderDataBakShow.list.slice(0,this.options.pagination.pageItems);
			}
			//重置select
			this._getSelectBd().html(selectMenuTpl(_renderDataBakShow));
			// 设置回显
			this._getSelectBd().find('.select-bd-li').each(function(){
				var value = $(this).attr('data-value');
				// 如果chosenArray有 则回显
				if(_.result(_.find(that._renderData.chosenArray, function(obj){
					return obj.value == value;
				}),'value') !== undefined){
					$(this).addClass('oas-select-multiple-selected');
				}
			});
			if(this.options.isPage){
				var paginationBak = $.extend(true, {}, this.options.pagination);
				paginationBak.total = that.currentTrueLength < this.options.pagination.pageItems ? that.currentTrueLength : this._renderDataBak.len;
				paginationBak.current = 1;
				this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin(paginationBak).on("pageNoChange.oasPagin",this.options.pagination.pageNoChange);
				// 重新绑定页脚事件，防止冒泡
				this._getSelectBd().on('click','.oas-select-ft',function(){
					return false;
				})
			}
			//初始化新的选项面板
			// this.options.container === null ? this._dropDown() : undefined;
		},
		// 多选情况下面板点击事件
		_multipleClick: function($self){
			if($self.hasClass('oas-select-multiple-selected')){
				$self.removeClass('oas-select-multiple-selected');
				//删除最后一个之前 
				if(this.$select_el.find('.select-hd .oas-select-multiple-input-selected').length === 1){
					this.$select_el.find('.select-placeholder').css('display','block');
				}
				this.$select_el.find('.select-hd .oas-select-multiple-input-selected[data-value="'+$self.attr('data-value')+'"]').remove();
				// 当input高度发生变化时，调整面板的位置top值。
				if(this.hdHeight !== this.$select_el.find('.select-hd').height()){
					this._getSelectBd().css('top',this._getSelectBd().css('top').slice(0,-2)-0-27);
					this.hdHeight = this.$select_el.find('.select-hd').height();
				}
			}else{
				this.$select_el.find('.select-placeholder').css('display','none');
				$self.addClass('oas-select-multiple-selected');
				this.$select_el.find('.select-hd .oas-select-multiple-ul .oas-select-hideInput-li').before('<li class="oas-select-multiple-input-selected" data-value='+$self.attr('data-value')+'>'+$self.find('.option-value').text()+'<i class="oasicon oasicon-delete oas-select-multiple-delete"></i></li>');
				if(this.hdHeight !== this.$select_el.find('.select-hd').height()){
					this._getSelectBd().css('top',this._getSelectBd().css('top').slice(0,-2)-0+27);
					this.hdHeight = this.$select_el.find('.select-hd').height();
				}
			}
		},
		// 获取input框中文字的高度
		_getTextWidth: function(text){
			var $preDom = $('<pre>' + text + '</pre>').css({display:'none'});
			$('body').append($preDom); 
			var width = $preDom.width();
			$preDom.remove();
			return width;
		},
		// 控制多选时请选择的打开关闭
		_toggleMultiplePlaceholder: function(){
			if(this.$select_el.find('.oas-select-hideInput').val() !== '' ||  this.$select_el.find('.oas-select-multiple-ul .oas-select-multiple-input-selected').length !== 0){
				this.$select_el.find('.select-placeholder').css('display','none');
			}else{
				this.$select_el.find('.select-placeholder').css('display','block');
			}
		},
		_fenyeDataMenu: function(){
			this._renderDataPage = $.extend(true, {}, this._renderData);
			this._dealData();
			this._dataByIndex(parseInt(this.options.pagination.current,10)-1);
			this._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(this._renderDataPage));
			if(this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").data('oasPagin') === undefined){
				this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin(this.options.pagination).on("pageNoChange.oasPagin",this.options.pagination.pageNoChange);
			}else{
				this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin("current",this.options.pagination.current);
				this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin("total",this.options.pagination.total);
			}
			if(this.options.isMultiple){
				var that = this;
				this._getSelectBd().find('.select-bd-li').each(function(){
					var value = $(this).attr('data-value');
					// 如果chosenArray有 则回显
					if(_.result(_.find(that._renderData.chosenArray, function(obj){
						return obj.value == value;
					}),'value') !== undefined){
						$(this).addClass('oas-select-multiple-selected');
					}
				});
			}
		},
		invoke: {
			//重置select选项面板
			reset: function() {
				var that = this;
				this._processData(this._initData);
				this._reload();
			},
			//select标签数据变化后刷新面板
			reload: function() {
				if (this.$el.is('select')) {
					this._renderData = this._convertData(this.$el);
				}
				this._reload();
			},
			//打开select选项面板
			open: function() {
				if (this.$select_el.find('.select-hd').data('oasDropdown')) {
					this.$select_el.find('.select-hd').oasDropdown('open');
					this._emit('open');
				} else {
					console.warn('disabled状态下不可操作面板');
				}	
			},
			//关闭select选项面板
			close: function() {
				if (this.$select_el.find('.select-hd').data('oasDropdown')) {
					this.$select_el.find('.select-hd').oasDropdown('close');
					this._emit('close');
				} else {
					console.warn('disabled状态下不可操作面板');
				}
			},
			//设置select选项面板数据
			data: function(data) {
				var options = this.options;
				if (data) {
					if (_.isArray(data)) {
						this.options.data = data;
						this._initData = {
							// 多选时用于存放选中项
							chosenArray : [],
							// 是否隐藏页脚
							hideFooter : false,
							selectBdMaxHeightInSearch: this.options.height - this.pageHeight + 'px',
							isMultiple: options.isMultiple,
							nodataTip: options.nodataTip,
							list: data,  //选项面板数据
							isSearch: options.isSearch,
							isPage: options.isPage,// 是否启用分页
							disabled: options.disabled,  //是否禁用
							placeholder: options.placeholder   //默认显示
						};
						this._processData(data);
					} else {
						console.warn(this.uiName + '("data")方法的参数不是一个数组');
					}
				} else {
					return this._renderData.list;
				}

				if(!this.options.isPage){
					this._reload();
				}else{
					this.options.pagination.current = 1;
					this.options.pagination.total = data.length;
					this._fenyeDataMenu();
				}
			},
			// 分页分批加载时使用
			changeFenye: function(data,pagin) {
				var options = this.options;
				if (data) {
					if (_.isArray(data)) {
						this.options.data = data;
						this._initData = {
							// 多选时用于存放选中项
							chosenArray : [],
							// 是否隐藏页脚
							hideFooter : false,
							selectBdMaxHeightInSearch: this.options.height - this.pageHeight + 'px',
							isMultiple: options.isMultiple,
							nodataTip: options.nodataTip,
							list: data,  //选项面板数据
							isSearch: options.isSearch,
							isPage: options.isPage,// 是否启用分页
							disabled: options.disabled,  //是否禁用
							placeholder: options.placeholder   //默认显示
						};
						this._processData(data);
					} else {
						console.warn(this.uiName + '("data")方法的参数不是一个数组');
					}
				} else {
					return this._renderData.list;
				}

				if(!this.options.isPage){
					this._reload();
				}else{
					this.options.pagination.current = pagin.current;
					this.options.pagination.total = pagin.total;
					this._fenyeDataMenu();
				}
			},
			//无参数时返回选中的select数据，有参数时设置参数数据为选中状态
			select: function(select, group) {
				if (select || _.isNumber(select)) {
					this._select(select, group);
					this._reload();
				} else {
					if(this.options.isMultiple){
						return !this._renderData.chosenArray || this._renderData.chosenArray.length === 0 ? [] : this._renderData.chosenArray;
					}else{
						return !!this._renderData.chosen ? this._renderData.chosen : {}; 
					}
				}
			},
			//设置select是否可用
			disabled: function(disabled) {
				if (_.isBoolean(disabled)) {
					this._renderData.disabled = disabled;
				} else {
					this._renderData.disabled = true;
				}
				this._reload();
			},
			addClass: function(valueArray,cls){
				for(var i = 0;i < valueArray.length;i++){
					// 判断是否含有data-menucls属性，有说明修改了容器，需要特殊处理
					var className = this.$select_el.attr('data-menucls');
					if(className !== undefined){
						$('.oas-select-bd.'+className).find('.select-bd-li[data-value='+valueArray[i]+']').addClass(cls);
					}else{
						this.$select_el.find('.select-bd-li[data-value='+valueArray[i]+']').addClass(cls);
					}
				}
			},
			//设置联想输入当前页(为兼容1.0添加)
			current:function(num){
				var current = parseInt(num,10);
				this.options.pagination.current = current;
				this._getSelectBd().find(".associate-pagin").oasPagin("current",current);
			},
			//设置展示loading(为兼容1.0添加)
            showLoading: function(){
                this._getSelectBd().find('ul.select-bd').html('<div class="oas-select-searching"><i class="oasicon oasicon-loading oasis-spin oas-select-searching-icon"></i><span class="oas-select-searching-text">加载中...</span></div>');
				this._getSelectBd().find('.oas-select-ft').css('display','none');
			},
			//设置隐藏loading(为兼容1.0添加)
			hideLoading: function(){
				this._getSelectBd().find('ul.select-bd .oas-select-searching').css('display','none');
                this._getSelectBd().find('.oas-select-ft').css('display','block');
			},
			//设置销毁组件(为兼容1.0添加)
			destroy : function() {
				this.$el.unbind('.' + this.uiName).removeData(this.uiName);
				this.$select_bd.remove();
                this.$el.off("keyup.oasSelect");
            },
			setDataThinkInput : function(dataList,total) {
				this._initData.list = dataList;
				this._renderData.list = dataList; 
				this._renderDataPage = $.extend(true, {}, this._initData);
				this._dealData();
				this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin('total',total);
				this._getSelectBd().find(".oas-select-ft .oas-select-ft-pagin").oasPagin('current',1);
				this.options.pagination.current = 1;
				this.options.pagination.total = total;
				this._dataByIndex(0);
				this._getSelectBd().find('ul.select-bd').html(selectOptionsTpl(this._renderDataPage));
            }

		}
	});
}
},{"./select.tpl":78,"./selectHdNoSearch.tpl":79,"./selectMenu.tpl":80,"./selectOptions.tpl":81}],78:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"0383b3431415953f443f7f9ddfed0138"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/select/select',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,isSearch=$data.isSearch,disabled=$data.disabled,chosen=$data.chosen,isMultiple=$data.isMultiple,$string=$utils.$string,$escape=$utils.$escape,placeholder=$data.placeholder,choseArray=$data.choseArray,chosenArray=$data.chosenArray,isPage=$data.isPage,selectBdMaxHeightInSearch=$data.selectBdMaxHeightInSearch,$each=$utils.$each,list=$data.list,$value=$data.$value,$index=$data.$index,$out='';if(isSearch === false){
$out+=' <div class="select-hd';
if(disabled){
$out+=' disabled';
}
if(chosen){
$out+=' selected';
}
if(isMultiple){
$out+=' multiple-hd';
}
$out+='" role="button" data-target="#" > ';
if(chosen && isMultiple === false){
$out+=' ';
if(chosen.renderData){
$out+=' ';
$out+=$string(chosen.renderData);
$out+=' ';
}else{
$out+=' <span class="select-value" title="';
$out+=$escape(chosen.text);
$out+='">';
$out+=$escape(chosen.text);
$out+='</span> <span class="select-comment" title="';
$out+=$escape(chosen.comment);
$out+='">';
$out+=$escape(chosen.comment);
$out+='</span> ';
}
$out+=' ';
}else{
$out+=' <span class="select-placeholder">';
$out+=$escape(placeholder);
$out+='</span> ';
}
$out+=' ';
if(isMultiple === false){
$out+=' <a class ="oasicon oasicon-desc"></a> ';
}else{
$out+=' <ul class="oas-select-multiple-ul clearfix"><li class="oas-select-hideInput-li " style="display:none"><input type="text" class="oas-select-hideInput select-search-input"/></li></ul> ';
}
$out+=' </div> ';
}else{
$out+=' <!-- <div class="select-hd';
if(disabled){
$out+=' disabled';
}
if(chosen){
$out+=' selected';
}
$out+='" role="button" data-target="#"> --> ';
if(isMultiple === false){
$out+=' <input type="text" class="select-hd select-search-input ';
if(disabled){
$out+=' disabled';
}
if(chosen){
$out+=' selected';
}
$out+='" role="button" data-target="#" name="select-search" value="';
if(chosen){
$out+=$escape(chosen.text);
}
$out+='" placeholder="';
$out+=$escape(placeholder);
$out+='"> <i class="search-icon oasicon oasicon-search"></i> ';
}else{
$out+=' <div class="select-hd';
if(disabled){
$out+=' disabled';
}
if(chosen){
$out+=' selected';
}
if(isMultiple){
$out+=' multiple-hd';
}
$out+='" role="button" data-target="#"> ';
if(choseArray === undefined || chosenArray.length === 0){
$out+=' <span class="select-placeholder">';
$out+=$escape(placeholder);
$out+='</span> ';
}
$out+=' <ul class="oas-select-multiple-ul clearfix"><li class="oas-select-hideInput-li "><input type="text" class="oas-select-hideInput select-search-input"/></li></ul> </div> ';
}
$out+=' <!-- ';
if(chosen){
$out+=' ';
if(chosen.renderData){
$out+=' ';
$out+=$string(chosen.renderData);
$out+=' ';
}else{
$out+=' <span class="select-value" title="';
$out+=$escape(chosen.text);
$out+='">';
$out+=$escape(chosen.text);
$out+='</span> <span class="select-comment" title="';
$out+=$escape(chosen.comment);
$out+='">';
$out+=$escape(chosen.comment);
$out+='</span> ';
}
$out+=' ';
}else{
$out+=' ';
$out+=$escape(placeholder);
$out+=' ';
}
$out+=' <a class ="oasicon oasicon-desc"></a> -->  ';
}
$out+=' <div class="oas-select-bd dropdown-menu" role="menu"> <ul class="select-bd" ';
if(isPage){
$out+='style=" max-height:';
$out+=$escape(selectBdMaxHeightInSearch);
$out+=' "';
}
$out+='> ';
$each(list,function($value,$index){
$out+=' ';
if($value.children){
$out+=' <li class="select-optgroup-li" > <strong class="group-value">';
$out+=$escape($value.text);
$out+='</strong> <ul> ';
$each($value.children,function($value,$index){
$out+=' <li class="select-bd-li';
if($value.selected){
$out+=' focus';
}
if($value.disabled){
$out+=' disabled';
}
$out+=' clearfix" ';
if($value.disabled){
$out+=' disabled';
}
$out+=' data-value=\'';
$out+=$escape($value.value);
$out+='\'> ';
if($value.renderData){
$out+=' ';
$out+=$string($value.renderData);
$out+=' ';
}else{
$out+=' <span class="option-value';
if($value.disabled){
$out+=' oas-text-disable';
}
$out+='" title="';
$out+=$escape($value.text);
$out+='">';
$out+=$escape($value.text);
$out+='</span> <span class="option-comment" title="';
$out+=$escape($value.comment);
$out+='">';
$out+=$escape($value.comment);
$out+='</span> ';
}
$out+=' </li> ';
});
$out+=' </ul> </li> ';
}else{
$out+=' <li class="select-bd-li';
if($value.selected){
$out+=' focus';
}
if($value.disabled){
$out+=' disabled';
}
$out+=' clearfix" ';
if($value.disabled){
$out+=' disabled';
}
$out+=' data-value=\'';
$out+=$escape($value.value);
$out+='\'> ';
if($value.renderData){
$out+=' ';
$out+=$string($value.renderData);
$out+=' ';
}else{
$out+=' <span class="option-value';
if($value.disabled){
$out+=' oas-text-disable';
}
$out+='" title="';
$out+=$escape($value.text);
$out+='">';
$out+=$escape($value.text);
$out+='</span> <span class="option-comment" title="';
$out+=$escape($value.comment);
$out+='">';
$out+=$escape($value.comment);
$out+='</span> ';
}
$out+=' </li> ';
}
$out+=' ';
});
$out+=' </ul> ';
if(isPage){
$out+=' <div class="oas-select-ft" style = "display:block"> <div class="oas-select-ft-pagin" data-oaspagin-type="simple"></div> </div> ';
}
$out+=' </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],79:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"96b1a1528561c0f60a973e415bfa13ba"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/select/selectHdNoSearch',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,chosen=$data.chosen,isMultiple=$data.isMultiple,$string=$utils.$string,$escape=$utils.$escape,placeholder=$data.placeholder,$out='';if(chosen && isMultiple === false){
$out+=' ';
if(chosen.renderData){
$out+=' ';
$out+=$string(chosen.renderData);
$out+=' ';
}else{
$out+=' <span class="select-value" title="';
$out+=$escape(chosen.text);
$out+='">';
$out+=$escape(chosen.text);
$out+='</span> <span class="select-comment" title="';
$out+=$escape(chosen.comment);
$out+='">';
$out+=$escape(chosen.comment);
$out+='</span> ';
}
$out+=' ';
}else{
$out+=' <span class="select-placeholder">';
$out+=$escape(placeholder);
$out+='</span> ';
}
$out+=' ';
if(isMultiple === false){
$out+=' <a class ="oasicon oasicon-desc"></a> ';
}else{
$out+=' <ul class="oas-select-multiple-ul clearfix"><li class="oas-select-hideInput-li " style="display:none"><input type="text" class="oas-select-hideInput select-search-input"/></li></ul> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],80:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"0de1bcd7d7c731f9422d8479f41d27cd"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/select/selectMenu',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,len=$data.len,$string=$utils.$string,nodataTip=$data.nodataTip,isPage=$data.isPage,$escape=$utils.$escape,selectBdMaxHeightInSearch=$data.selectBdMaxHeightInSearch,$each=$utils.$each,list=$data.list,$value=$data.$value,$index=$data.$index,$out='';if(len !==undefined && len === 0){
$out+=' <div class="oas-select-noData">';
$out+=$string(nodataTip);
$out+='</div> ';
}else{
$out+=' <ul class="select-bd" ';
if(isPage){
$out+='style=" max-height:';
$out+=$escape(selectBdMaxHeightInSearch);
$out+=' "';
}
$out+='> ';
$each(list,function($value,$index){
$out+=' ';
if($value.children){
$out+=' <li class="select-optgroup-li" > <strong class="group-value">';
$out+=$escape($value.text);
$out+='</strong> <ul> ';
$each($value.children,function($value,$index){
$out+=' <li class="select-bd-li';
if($value.selected){
$out+=' focus';
}
if($value.disabled){
$out+=' disabled';
}
$out+=' clearfix" ';
if($value.disabled){
$out+=' disabled';
}
$out+=' data-value=\'';
$out+=$escape($value.value);
$out+='\'> ';
if($value.renderData){
$out+=' ';
$out+=$string($value.renderData);
$out+=' ';
}else{
$out+=' <span class="option-value';
if($value.disabled){
$out+=' oas-text-disable';
}
$out+='" title="';
$out+=$escape($value.title);
$out+='">';
$out+=$escape($value.text);
$out+='</span> <span class="option-comment" title="';
$out+=$escape($value.comment);
$out+='">';
$out+=$escape($value.comment);
$out+='</span> ';
}
$out+=' </li> ';
});
$out+=' </ul> </li> ';
}else{
$out+=' <li class="select-bd-li';
if($value.selected){
$out+=' focus';
}
if($value.disabled){
$out+=' disabled';
}
$out+=' clearfix" ';
if($value.disabled){
$out+=' disabled';
}
$out+=' data-value=\'';
$out+=$escape($value.value);
$out+='\'> ';
if($value.renderData){
$out+=' ';
$out+=$string($value.renderData);
$out+=' ';
}else{
$out+=' <span class="option-value';
if($value.disabled){
$out+=' oas-text-disable';
}
$out+='" title="';
$out+=$escape($value.title);
$out+='">';
$out+=$string($value.text);
$out+='</span> <span class="option-comment" title="';
$out+=$escape($value.comment);
$out+='">';
$out+=$escape($value.comment);
$out+='</span> ';
}
$out+=' </li> ';
}
$out+=' ';
});
$out+=' </ul> ';
if(isPage){
$out+=' <div class="oas-select-ft" style = "display:block"> <div class="oas-select-ft-pagin" data-oaspagin-type="simple"></div> </div> ';
}
$out+=' ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],81:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"e6a38a45bf54e85217a7d5ec6afe1645"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/select/selectOptions',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$each=$utils.$each,list=$data.list,$value=$data.$value,$index=$data.$index,$string=$utils.$string,$escape=$utils.$escape,$out='';$each(list,function($value,$index){
$out+=' ';
if($value.children){
$out+=' <li class="select-optgroup-li" > <strong class="group-value">';
$out+=$string($value.text);
$out+='</strong> <ul> ';
$each($value.children,function($value,$index){
$out+=' <li class="select-bd-li';
if($value.selected){
$out+=' focus';
}
if($value.disabled){
$out+=' disabled';
}
$out+=' clearfix" ';
if($value.disabled){
$out+=' disabled';
}
$out+=' data-value=\'';
$out+=$escape($value.value);
$out+='\'> ';
if($value.renderData){
$out+=' ';
$out+=$string($value.renderData);
$out+=' ';
}else{
$out+=' <span class="option-value';
if($value.disabled){
$out+=' oas-text-disable';
}
$out+='" title="';
$out+=$escape($value.title);
$out+='">';
$out+=$string($value.text);
$out+='</span> <span class="option-comment" title="';
$out+=$escape($value.comment);
$out+='">';
$out+=$escape($value.comment);
$out+='</span> ';
}
$out+=' </li> ';
});
$out+=' </ul> </li> ';
}else{
$out+=' <li class="select-bd-li';
if($value.selected){
$out+=' focus';
}
if($value.disabled){
$out+=' disabled';
}
$out+=' clearfix" ';
if($value.disabled){
$out+=' disabled';
}
$out+=' data-value=\'';
$out+=$escape($value.value);
$out+='\'> ';
if($value.renderData){
$out+=' ';
$out+=$string($value.renderData);
$out+=' ';
}else{
$out+=' <span class="option-value';
if($value.disabled){
$out+=' oas-text-disable';
}
$out+='" title="';
$out+=$escape($value.title);
$out+='">';
$out+=$string($value.text);
$out+='</span> <span class="option-comment" title="';
$out+=$escape($value.comment);
$out+='">';
$out+=$escape($value.comment);
$out+='</span> ';
}
$out+=' </li> ';
}
$out+=' ';
});
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],82:[function(require,module,exports){
/*
 * @desc slider组件
 * @anthor lqbai
 * @Date 2017-08-10
 */
var sliderTpl = require("./slider.tpl");
var sliderHanderTpl = require("./slider_handler.tpl");
var tooltip = require("../../components/tooltip/index");

module.exports = function(){

    var sliderArr = [];

	$.oasUiFactory("oasSlider", {
		VERSION: '1.0.0',
		options: {
            // 是否为双滑块模式，默认为单滑块模式
            range: false,
            // 滑块是否禁用，默认为禁用
            disabled: false,
            // 直接点击轨道是否可以触发
            clickTrigger: false,
            // 输入条最小值
            min: 0,
            // 输入条最大值
            max: 100,
            // 刻度标记，类型必须为number且取值在闭区间[min,max] 内
            marks:[],
            // 步长，取值必须大于 0，并且可被 (max - min) 整除。当 marks 不为空对象时，可以设置 step 为 null，此时 Slider 的可选值仅有 marks 标出来的部分。
            step: 1,
            // 显示按钮/输入框控制slider(目前仅单滑块模式可用）, handler 为 icon 时，使用按钮， 为 input 时，使用输入框, 为 null 时不展示，默认只进行拖拽控制
            handler: null,
            // 设置初始取值
            defaultValue: 20,
            // 值为 true 时，Slider 为垂直方向, 默认为水平方向
            vertical: false,
            // 格式化数值展示
            formatter: null
        },
		_create: function() {
            sliderArr.push(this);
            this._createDom();
            this._processData();
            this._attachEvents();
        },
        // 创建dom
        _createDom: function() {
            if(this.options.handler) {
                var $slider = sliderHanderTpl({options: this.options});
            } else {
                var $slider = sliderTpl({options: this.options});
            }
            this.$el.empty().html($slider);
            this.$slider = this.$el.find('.oas-slider');
            this.$rail = this.$slider.find('.oas-slider-rail');
            this.$track = this.$slider.find('.oas-slider-track');
            this.$handle = this.$slider.find('.oas-slider-handle');
            this.$steps = this.$slider.find('.oas-slider-step');
            this.$marks = this.$slider.find('.oas-slider-mark');
            this.$label = this.$slider.find('.oas-slider-label');
            
            if(this.options.range) {
                this.$lowPointer = this.$handle.first();
            }
            this.$highPointer = this.$handle.last();
            this.cr = this.$handle.eq(0).outerWidth()/2;
        },
        getMaxOffset: function() {
             this.maxOffset = !this.options.vertical ? this.$slider.width() : this.$slider.height(); 
             return this.maxOffset;
        },
        // 初始化data
        _processData: function() {
            var that = this,
                options = this.options,
                value = options.defaultValue,
                trackWidth_per,
                trackOffset_per,
                handle_left = [];

            this.interval = options.max - options.min; // max - min 间隔
            this.maxOffset = !options.vertical ? this.$slider.width() : this.$slider.height(); // slider总长度
            this.isVertical = this.options.vertical; // 是否竖向
            this.low = (options.range) ? value[0] : 0;
            this.high = (options.range) ? value[1] : value;
            this.CurrValue; // 记录当前值，用于判断是否change

            // 刻度初始化
            this._formatterMarks();

            if(options.range) {
                var lowPointer_per = this.getOffsetPerByValue(value[0]),
                    highPointer_per = this.getOffsetPerByValue(value[1]),
                    trackWidth_per = highPointer_per - lowPointer_per,
                    trackOffset_per = lowPointer_per;

                if(options.vertical) {
                    this.$lowPointer.css({
                        bottom: lowPointer_per*100 + '%'
                    })
                    this.$highPointer.css({
                        bottom: highPointer_per*100 + '%'
                    })
                } else {
                    this.$lowPointer.css({
                        left: lowPointer_per*100 + '%'
                    })
                    this.$highPointer.css({
                        left: highPointer_per*100 + '%'
                    })
                }
                
            } else {
                var pointer_per = this.getOffsetPerByValue(value),
                    trackOffset_per = 0,
                    trackWidth_per = pointer_per - trackOffset_per;

                if(options.vertical) {
                    this.$handle.css({
                        bottom: pointer_per*100 + '%'
                    })
                } else {
                    this.$handle.css({
                        left: pointer_per*100 + '%'
                    })
                }
            
                if(!options.range && options.handler == 'input') {
                    this.$slider.find('.oas-input-number-input').val(value);
                }
            }
            // track 初始化
            if(options.vertical) {
                this.$track.css({
                    bottom: trackOffset_per*100 + '%',
                    height: trackWidth_per*100 + '%'
                })
            } else {
                this.$track.css({
                    left: trackOffset_per*100 + '%',
                    width: trackWidth_per*100 + '%'
                })
            }
            
            this.$marks.find('.oas-slider-mark-text').each(function(i) {
                if(options.vertical) {
                    $(this).css({
                        bottom: (options.marks[i] - options.min) / that.interval *100 + '%'
                    })
                } else {
                    $(this).css({
                        left: (options.marks[i] - options.min) / that.interval *100 + '%'
                    })
                }
                $(this).text(options._marks[i]);
            })

            // dot初始化
            this.$steps.find('.oas-slider-dot').each(function(i) {
                var dot = $(this).data('dot');
                if(that.low <= dot && dot<= that.high) {
                    $(this).addClass('oas-slider-dot-active');
                } else {
                    $(this).removeClass('oas-slider-dot-active');
                }
                if(options.vertical) {
                    $(this).css({
                        bottom: (options.marks[i] - options.min) / that.interval *100 + '%'
                    })
                } else {
                    $(this).css({
                        left: (options.marks[i] - options.min) / that.interval *100 + '%'
                    })
                } 
            })            
        },

        // label formatter
        _formatter: function(n) {
            if(this.options.formatter) {
                if ($.isFunction(this.options.formatter)) {
                    return this.options.formatter(n);
                } else {
                    return this.options.formatter.replace('%s', n);
                }
            } else {
                return n;
            }  
        },
        // marks formatter
        _formatterMarks: function() {
            var that = this;
            var options = this.options;
            options._marks = _.map(options.marks, function(n, k) {
                return that._formatter(n);
            });
        },
        // 获取event pos
        getMousePos: function(event) {
            var e = event || window.event;
            var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
            var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
            var x = e.pageX || e.clientX + scrollX;
            var y = e.pageY || e.clientY + scrollY;
            return { 'x': x, 'y': y };
        },
        // 初始化事件
        _attachEvents: function() {
            var that = this;
            if(this.options.disabled) {
                return;
            }
            this.$handle.on('mouseover',function() {
                if(!that.options.formatter) {
                    return;
                }
                var valuenow = that._formatter($(this).data('valuenow'));
                    that.$label.show().find('span').text(valuenow);

                if(that.options.vertical) {
                    that.$label.css({
                        left: $(this).position().left - that.$label.outerWidth()/2 + 2,
                        bottom: that.maxOffset - $(this).position().top + that.$label.outerHeight()*0.6
                    })
                } else {
                    that.$label.css({
                        left: $(this).position().left - that.$label.outerWidth()/2
                    })
                }
            });
            this.$handle.on('mouseout.slider',function() {that.$label.hide();});
            this.$handle.on('mousedown.slider', $.proxy(this.onDragStart, this));
        },
        onDragStart: function(e) {
			if ( this.options.disabled || (e.type === 'mousedown' && e.which !== 1)) {
				return;
			}
			e.stopPropagation();
			e.preventDefault();
            var pointer = $(e.target).closest('.oas-slider-handle');
            pointer.off('mouseover');
            pointer.off('mouseout');
			$(document).on('mousemove.slider', $.proxy(this.onDrag, this, pointer));
			$(document).on('mouseup.slider', $.proxy(this.onDragEnd, this));
		},
        onDrag: function(pointer, e) {
            e.stopPropagation();
            e.preventDefault();

            if(this.options.vertical){
                var position = this.getMaxOffset()  - (this.getMousePos(e).y - this.$slider.offset().top); 
            } else {
                var position = this.getMousePos(e).x - this.$slider.offset().left; 
            }

            this.onChange(pointer, position);

            this._emit('onChange', [pointer, this._getValue()]); //是否需要formatter
        },
        onDragEnd: function(e) {
                var that = this;
            this.$label.hide();
            this.$handle.on('mouseover',function() {
                if(!that.options.formatter) {
                    return;
                }
                var valuenow = that._formatter($(this).data('valuenow'));
                that.$label.show().find('span').text(valuenow);
                if(that.options.vertical) {
                    that.$label.css({
                        left: $(this).position().left - that.$label.outerWidth()/2 + 2,
                        bottom: that.maxOffset - $(this).position().top + that.$label.outerHeight()*0.6
                    })
                } else {
                    that.$label.css({
                        left: $(this).position().left - that.$label.outerWidth()/2
                    })
                }   
            });
            this.$handle.on('mouseout',function() {
                that.$label.hide();
            });
            $(document).off('.slider');

            this._emit('onAfterChange', [$(e.target).closest('oas-slider-handle'), this._getValue()]); //是否需要formatter
        },
        // get position
        onChange:function(pointer, position) {
            var	min = 0;
            var max = this.getMaxOffset() ;
            var position = Math.min(Math.max(position, min), max);
            this.setPosition(pointer, position);
        },
        // 偏移设置
        setPosition: function(pointer, position) {
            var that = this,
                options = this.options,
                highPointer_pos = (!options.vertical) ? this.$highPointer.position().left : (this.getMaxOffset() - this.$highPointer.position().top),
                leftPos;

            if(options.range) {
                var lowPointer_pos = (!options.vertical) ? this.$lowPointer.position().left : (this.getMaxOffset() - this.$lowPointer.position().top);
            } else {
                var lowPointer_pos = 0;
            }

			if (pointer[0] === this.$highPointer[0]) {
                highPointer_pos = Math.round(position);
			} else {
                lowPointer_pos = Math.round(position);
            }

            if(highPointer_pos < lowPointer_pos) {
                var temp = highPointer_pos,
                    highPointer_pos = lowPointer_pos,
                    lowPointer_pos = temp;
            } 

            // 滑块定位
            if(options.vertical) {
                pointer.css({
                    'bottom':  this.getOffsetPerByPos(position) *100  + '%'
                });
            } else {
                pointer.css({
                    'left':  this.getOffsetPerByPos(position) *100  + '%'
                });
            }
            // track定位
            if(options.vertical) {
                this.$track.css({
                    'height': (this.getOffsetPerByPos(highPointer_pos) - this.getOffsetPerByPos(lowPointer_pos)) *100 + '%',
                    'bottom': this.getOffsetPerByPos(lowPointer_pos) *100 + '%'
                });
            } else {
                this.$track.css({
                    'width': (this.getOffsetPerByPos(highPointer_pos) - this.getOffsetPerByPos(lowPointer_pos)) *100 + '%',
                    'left': this.getOffsetPerByPos(lowPointer_pos) *100 + '%'
                });
            }

            // hover label定位
            if(options.formatter) {
                if(options.vertical) {
                    var labelOffset = this.getOffsetPerByPos(position) +  0.6*this.$label.outerHeight()/this.getMaxOffset()  + this.cr/this.getMaxOffset() ;
                    this.$label.show().css({
                        bottom: labelOffset*100  + '%',
                        left: parseInt(this.$slider.css('padding-left')) + 2 - this.$label.outerWidth()/2,
                    });
                } else {
                    var labelOffset = this.getOffsetPerByPos(position) -  0.5*this.$label.outerWidth()/this.getMaxOffset() ;
                    this.$label.show().css({
                        left: labelOffset*100  + '%'
                    });
                }
            }
            this.setPointerValue(pointer, position);
            this._detectDotStatus();
			
        },
        // set pointer & label's value
        setPointerValue: function(pointer, position) {
            var that = this;
            var value = this.getNextValue(position);
            var text; 

            pointer.data('valuenow', value);
            this.$slider.find('.oas-input-number-input').val(value);

			if ($.isFunction(this.options.formatter)) {
				text = this.options.formatter(value);
			} else {
				text = value;
            }
            
            this.$label.find('span').text(text);
        },
        // 
        getNextValue: function(pos) {
            var options = this.options;
            
            var value = options.min + pos/this.getMaxOffset() *this.interval;
            value = (value > this.options.max) ? this.options.max : value;
            var _value =  value - options.min;

            var nearMark;
            var nearStep;
            var left;
            
            if(options.step) {
                nearStep = options.min + this.getNextStep(_value);
                if (options.marks && options.marks.length) {
                    nearMark = this.getNextMark(value);
                    value = (Math.abs(value - nearStep) >= Math.abs(value - nearMark)) ? nearMark : nearStep;
                } else {
                    value = nearStep;
                }
            } else if(options.marks && options.marks.length){ // 是否存在刻度
                value = this.getNextMark(value);
            } 
            return value;
        },

        getOffsetPerByPos: function(pos) {
            var value = this.getNextValue(pos);
            var left = (value - this.options.min) / this.interval;
            return left;
        },

        getNextStep: function(value) {
            var nearStep = Math.round(value/ this.options.step) * this.options.step;
            return nearStep; 
        },

        getNextMark: function(value) {
            var marks = this.options.marks,
                nearMark,
                markLen = marks.length;
            for(var i = 0;i < markLen-1; i++){
                // console.log(marks[i], marks[i+1],i,markLen)
                if(marks[i] <= value && value <= marks[i+1] ) {
                    tempArr = [marks[i], marks[i + 1]];
                    nearMark = (Math.abs(value - tempArr[1]) >= Math.abs(value - tempArr[0])) ? tempArr[0] : tempArr[1];
                    return nearMark; 
                }
            }
        },
        // 检测dot状态
        _detectDotStatus: function() {
            var that = this;
            var value = this._getValue(); 
            // console.log(value);
            if($.isArray(value)) {
                this.min = value[0];
                this.max = value[1];
            } else {
                this.min = 0;
                this.max = value;
            }
            this.$steps.find('.oas-slider-dot').each(function() {
                var dot = $(this).data('dot');
                if(that.min <= dot && that.max >= dot){
                    $(this).addClass('oas-slider-dot-active');
                }else {
                    $(this).removeClass('oas-slider-dot-active');
                }
            })
        },
        // 获取value
        _getValue: function() {
            var tempArr = [];
            this.$handle.each(function() {
                tempArr.push($(this).data('valuenow'));
            })
            // value 排序
            tempArr.sort(function(a,b) {
                return a - b;
            })

            if(this.options.range) {
                return tempArr;
            } else {
                return tempArr[0];
            }
        },
        // 设置value
        _setValue: function(value) {
            var options = this.options;
            if(!this.isVertical) {
                if($.isArray(value)) {
                    this.$lowPointer.css({
                        left: this.getOffsetPerByValue(value[0])*100 + '%'
                    }).data('valuenow',value[0]);
                    this.$highPointer.css({
                        left: this.getOffsetPerByValue(value[1])*100 + '%'
                    }).data('valuenow',value[1]);

                    this.$track.css({
                        left: this.getOffsetPerByValue(value[0])*100 + '%',
                        width: (this.getOffsetPerByValue(value[1]) - this.getOffsetPerByValue(value[0]))*100 + '%'
                    })
                } else {
                    this.$highPointer.css({
                        left: this.getOffsetPerByValue(value)*100 + '%'
                    }).data('valuenow',value);
                    this.$track.css({
                        left: '0%',
                        width: this.getOffsetPerByValue(value)*100 + '%'
                    })
                }
            } else {
                if($.isArray(value)) {
                    this.$lowPointer.css({
                        bottom: this.getOffsetPerByValue(value[0])*100 + '%'
                    }).data('valuenow',value[0]);
                    this.$highPointer.css({
                        bottom: this.getOffsetPerByValue(value[1])*100 + '%'
                    }).data('valuenow',value[1]);

                    this.$track.css({
                        bottom: this.getOffsetPerByValue(value[0])*100 + '%',
                        height: (this.getOffsetPerByValue(value[1]) - this.getOffsetPerByValue(value[0]))*100 + '%'
                    })
                } else {
                    this.$highPointer.css({
                        bottom: this.getOffsetPerByValue(value)*100 + '%'
                    }).data('valuenow',value);
                    this.$track.css({
                        bottom: '0%',
                        height: this.getOffsetPerByValue(value)*100 + '%'
                    })
                }

            }
            
            // set input-handler value
            if(!options.range && options.handler == 'input') {
                this.$slider.find('.oas-input-number-input').val(value);
            }

            this._detectDotStatus();
        },
        ascValue:function() {
            var value = this._getValue();
            var _value = value + this.options.step;
            
            if(_value <= this.options.max && _value >= this.options.min) {
                value = _value;
            }
            this._setValue(value);
        },
        descValue: function() {
            var value = this._getValue();
            var _value = value - this.options.step;
            
            if(_value <= this.options.max && _value >= this.options.min) {
                value = _value;
            }
            this._setValue(value);
        },
        // 通过value值获取偏移值
        getOffsetPerByValue: function(value) {
            var offset = (value - this.options.min) / this.interval;
            return offset;
        },
        isEqual: function(v1, v2) {
            if($.isArray(v1)) {
                return !_.difference(v1, v2).length ? true : false;
            } else {
                return v1 == v2 ? true : false;
            }
        },
        // 事件
        events: {
			//指定绑定事件的元素
			'target': function() {
				return this.$el;
            },
            'mousedown .asc-btn': function(self, evt) {
                
                var that = this;
                if(this.options.disabled || evt.which != 1) {
                   return; 
                }
                this.ascValue();
                this._emit('onChange', [$(self), this._getValue()]); 

                this.ascid = setInterval(function() {
                    that.ascValue();
                    that._emit('onChange', [$(self), that._getValue()]); 
                }, 200); 
            },
            'mouseup .asc-btn': function(self, evt) {
                console.log(evt)
                if(this.options.disabled || evt.which != 1) {
                   return; 
                }
                clearInterval(this.ascid);
                this._emit('onAfterChange', [$(self), this._getValue()]); 
            },

            'mousedown .desc-btn': function(self, evt) {
                var that = this;
                if(this.options.disabled || evt.which != 1) {
                   return; 
                }
                that.descValue();
                that._emit('onChange', [$(self), that._getValue()]); 
                this.descid = setInterval(function() {
                    that.descValue();
                    that._emit('onChange', [$(self), that._getValue()]); 
                }, 200);
            },
            'mouseup .desc-btn': function(self, evt) {
                if(this.options.disabled || evt.which != 1) {
                   return; 
                }
                clearInterval(this.descid);
                this._emit('onAfterChange', [$(self), this._getValue()]); 
            },
            'change .oas-input-number-input': function(self, evt) {
                if(this.options.disabled) {
                   return; 
                }
                var e = evt || window.evt;
                var value = parseInt($(self).val()) || 0;
                value = (value < this.options.min) ? this.options.min : value;
                value = (value > this.options.max) ? this.options.max : value;
                this._setValue(value);
                this._emit('onAfterChange', [$(self), value]); 
            },
            'click .oas-slider': function(self, e) {
                var options = this.options;
                if(!this.options.clickTrigger || this.options.disabled) {
                   return; 
                }
                var $nearPointer;

                var clickPos = (!options.vertical) ? (this.getMousePos(e).x - this.$slider.offset().left) : (this.getMaxOffset()  - (this.getMousePos(e).y - this.$slider.offset().top));
                var highPointer_pos = (!options.vertical) ? this.$highPointer.position().left : (this.getMaxOffset() - this.$highPointer.position().top);

                if(options.range) {
                    var lowPointer_pos = (!options.vertical) ? this.$lowPointer.position().left : (this.getMaxOffset() - this.$lowPointer.position().top);
                    $nearPointer = (Math.abs(clickPos - highPointer_pos) > Math.abs(clickPos - lowPointer_pos)) ? this.$lowPointer : this.$highPointer;
                } else {
                    $nearPointer = this.$highPointer;
                }

                this.onChange($nearPointer, clickPos);
            }
        },
        // 对外方法调用
        invoke: {
            'value': function(value) {
                if (value) {
					this._setValue(value);
				} else {
					return this._getValue();
                }
            },
            'disabled': function(bool) {
                if(bool) {
                    this.$slider.addClass('oas-slider-disabled');
                    this.options.disabled = true;
                    this.$slider.find('.opt-icon').addClass('disabled');
                    
                } else {
                    this.$slider.removeClass('oas-slider-disabled');
                    this.options.disabled = false;
                    this.$slider.find('.opt-icon').removeClass('disabled');
                } 
            },
            'destroy' : function() {
                this.$el.unbind('.' + this.uiName).removeData(this.uiName);
                this.$el.remove();
                for(var i=0,len=sliderArr.length;i<len;i++) {
                    if(sliderArr[i]===this.$el) {
                        sliderArr.splice(i,1);
                    }
                }
            }
        }

    })
}

},{"../../components/tooltip/index":92,"./slider.tpl":83,"./slider_handler.tpl":84}],83:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"5413aebdef94a17ac06db191bf7f8e99"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/slider/slider',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,options=$data.options,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,$out='';$out+='<div class="oas-slider ';
if(options.marks && options.marks.length){
$out+=' oas-slider-with-marks ';
}
$out+=' ';
if(options.disabled){
$out+=' oas-slider-disabled ';
}
$out+=' ';
if(options.vertical){
$out+=' oas-slider-vertical ';
}
$out+='"> <div class="oas-slider-rail"></div> <div class="oas-slider-track"></div> ';
if(options.marks){
$out+=' <div class="oas-slider-step"> ';
$each(options.marks,function($value,$index){
$out+=' <span class="oas-slider-dot" data-dot="';
$out+=$escape($value);
$out+='"></span> ';
});
$out+=' </div> ';
}
$out+=' <div class="oas-slider-label"> <i class="oas-slider-label-arrow"></i> <span>50</span> </div> ';
if(options.range){
$out+=' ';
$each(options.defaultValue,function($value,$index){
$out+=' <div role="slider" data-oastooltip-placement="top" data-oastooltip-title="我是一个正常的提示" data-valuemin="';
$out+=$escape(options.min);
$out+='" data-valuemax="';
$out+=$escape(options.max);
$out+='" data-valuenow="';
$out+=$escape($value);
$out+='" data-disabled="false" class="oas-slider-handle oas-slider-handle-';
$out+=$escape($index + 1);
$out+='"> <i class="hov-inner"></i> </div> ';
});
$out+=' ';
}else{
$out+=' <div role="slider" data-oastooltip-placement="top" data-oastooltip-title="我是一个正常的提示" data-valuemin="';
$out+=$escape(options.min);
$out+='" data-valuemax="';
$out+=$escape(options.max);
$out+='" data-valuenow="';
$out+=$escape(options.defaultValue);
$out+='" data-disabled="false" class="oas-slider-handle"> <i class="hov-inner"></i> </div> ';
}
$out+=' ';
if(options.marks && options.marks.length){
$out+=' <div class="oas-slider-mark"> ';
$each(options.marks,function($value,$index){
$out+=' <span class="oas-slider-mark-text">';
$out+=$escape($value);
$out+='</span> ';
});
$out+=' </div> ';
}
$out+=' </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],84:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"f6e13e63052f161718aef1f1996008ae"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/slider/slider_handler',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,options=$data.options,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$out='';$out+='<div class="oas-slider-';
$out+=$escape(options.handler);
$out+='-wrapper ';
if(options.vertical){
$out+=' wrap-vertical ';
}
$out+='"> <div class="oas-slider ';
if(options.marks && options.marks.length){
$out+=' oas-slider-with-marks ';
}
$out+=' ';
if(options.disabled){
$out+=' oas-slider-disabled ';
}
$out+=' ';
if(options.vertical){
$out+=' oas-slider-vertical ';
}
$out+=' "> ';
if(options.handler == 'icon'){
$out+=' <i class="opt-icon desc-btn oasicon oasicon-delitem"></i> ';
}
$out+=' <div class="oas-slider-rail"></div> <div class="oas-slider-track"></div> ';
if(options.marks){
$out+=' <div class="oas-slider-step"> ';
$each(options.marks,function($value,$index){
$out+=' <span class="oas-slider-dot" data-dot="';
$out+=$escape($value);
$out+='"></span> ';
});
$out+=' </div> ';
}
$out+=' <div class="oas-slider-label"> <i class="oas-slider-label-arrow"></i> <span>50</span> </div> <div role="slider" data-valuemin="';
$out+=$escape(options.min);
$out+='" data-valuemax="';
$out+=$escape(options.max);
$out+='" data-valuenow="';
$out+=$escape(options.defaultValue);
$out+='" data-disabled="false" class="oas-slider-handle"> <i class="hov-inner"></i> </div> ';
if(options.marks && options.marks.length){
$out+=' <div class="oas-slider-mark"> ';
$each(options.marks,function($value,$index){
$out+=' <span class="oas-slider-mark-text" style="width: 30%; margin-left: -15%;">';
$out+=$escape($value);
$out+='</span> ';
});
$out+=' </div> ';
}
$out+=' ';
if(options.handler == 'icon'){
$out+=' <i class="opt-icon asc-btn oasicon oasicon-additem"></i> ';
}
$out+=' ';
if(options.handler == 'input'){
$out+=' <div class="oas-input-number"> <div class="oas-input-number-handler-wrap"> <span unselectable="unselectable" role="button" aria-label="Increase Value" aria-disabled="false" class="oas-input-number-handler oas-input-number-handler-up asc-btn"> <span unselectable="unselectable" class="oas-input-number-handler-up-inner oasicon oasicon-asc"></span> </span> <span unselectable="unselectable" role="button" aria-label="Decrease Value" aria-disabled="false" class="oas-input-number-handler oas-input-number-handler-down desc-btn"> <span unselectable="unselectable" class="oas-input-number-handler-down-inner oasicon oasicon-desc"></span> </span> </div> <div class="oas-input-number-input-wrap" role="spinbutton" aria-valuemin="0" aria-valuemax="1"> <input min="0" max="1" class="oas-input-number-input"> </div> </div> ';
}
$out+=' </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],85:[function(require,module,exports){
/*
 * @desc sticky组件
 * @anthor rbai
 * @Date 2016-03-24 eszhang(改)
 */
module.exports = function(){
      /**
       * 提供一个元素当滚动条滚动到该元素的高度时，该元素固定，以及达到某个高度是接触固定。
       * @ authoptionsr rbai
       * @ create time 2014.08.24
       * @ versioptionsn  1.0.0
       */
      $.oasUiFactory("oasSticky", {
          options: {

              topSpacing: 0,
              bottomSpacing: 0,
              className: 'oas-issticky',
              wrapperClassName: 'oas-sticky-wrapper',
              center: false,
              getWidthFrom: '',
              responsiveWidth: false,

              bottomfixed: false,
              // stoptionsp 当滚动超过多少时不在固定
              stoptionsp: null,
              
              /*2015-3-25增加 滚动容器和文档流*/

              fixedContainer: window,
              fixedDocument: document,

              fixedWidth: false
          },

          _create: function() {
              var $el = this.$el,
                  options = this.options,
                  self = this;

                  this.oasSticked = [],
                  this.$fixed_container = $(options.fixedContainer),
                  this.$fixed_document = $(options.fixedDocument),
                  this.windowHeight = this.$fixed_container.actual('outerHeight');


                var stickyId = $el.attr('id');
                var wrapperId = stickyId ? stickyId + '-' + options.wrapperClassName : options.wrapperClassName 
                var wrapper = $('<div></div>')
                  .attr('id', stickyId + '-sticky-wrapper')
                  .addClass(options.wrapperClassName);
                $el.addClass('oas-sticky').wrapAll(wrapper);

                if (options.center) {
                  $el.parent().css({width:$el.actual('outerWidth'),marginLeft:"auto",marginRight:"auto"});
                }

                if ($el.css("float") == "right") {
                  $el.css({"float":"none"}).parent().css({"float":"right"});
                }

                var stickyWrapper = $el.parent();
                  //  height = $el.height() === 0 ? $el.actualHeight() : $el.outerHeight();
                stickyWrapper.css('height', $el.actual('outerHeight'));

                // 保存到所有的固定元素的对象中，便于统一管理。
                this.oasSticked.push({
                  topSpacing: options.topSpacing,
                  bottomSpacing: options.bottomSpacing,
                  stickyElement: $el,
                  currentTop: null,
                  stickyWrapper: stickyWrapper,
                  className: options.className,
                  getWidthFrom: options.getWidthFrom,
                  responsiveWidth: options.responsiveWidth,
                  stoptionsp: options.stoptionsp,
                  bottomfixed: options.bottomfixed,
                  that: this,
                  fixedWidth: options.fixedWidth
                });
                this.athchEvent();
                self.scroller();
                
          },

          athchEvent : function(){
             var _fixed_container_width = this.$fixed_container.actual('outerWidth'),
                 _fixed_container_height = this.$fixed_container.actual('outerHeight'),
                 timeout,
                 _self = this;

              this.$fixed_container.on("scroll",function(){
                  _self.scroller();
              });
              $(window).on("resize", function() {
                 timeout && clearTimeout(timeout);
                 timeout = setTimeout(function(){          
                     var fix_container_width = _self.$fixed_container.actual('outerWidth'),
                         fix_container_height = _self.$fixed_container.actual('outerHeight');
                     if(fix_container_width!==_fixed_container_width||fix_container_height!==_fixed_container_height){
                        _self.resizer();
                        _fixed_container_width = _self.$fixed_container.actual('outerWidth');
                        _fixed_container_height = _self.$fixed_container.actual('outerHeight');                             
                     }         
                     
               },80);
                 
              });
          },

          scroller : function() {
            var fixed_container = this.$fixed_container,
                scrollTop = fixed_container.scrollTop(),
                documentHeight = this.$fixed_document.actual('outerHeight'),
                dwh = documentHeight - this.windowHeight,
                extra = (scrollTop > dwh) ? dwh - scrollTop : 0;

            for (var i = 0; i < this.oasSticked.length; i++) {
              var s = this.oasSticked[i],
                  fixed_container_top = fixed_container.is($(window)) ? 0 : fixed_container.offset().top, 
                  elementTop = s.stickyWrapper.offset().top - fixed_container_top;

              elementTop = s.bottomfixed ? elementTop + s.stickyWrapper.actual('outerHeight') : elementTop;
              var etse = elementTop - s.topSpacing - extra;


              var flag = fixed_container.is($(window)) ? (scrollTop <= etse) : (etse > 0);

              if (flag) {
                if (s.currentTop !== null) {
                  s.stickyElement
                    .css('position', '')
                    .css('top', '');
                  s.stickyElement.parent().removeClass(s.className);
                  s.that._emit('unFixed',[s.that.$el]);
                  s.currentTop = null;
                }
              }
              else {
                var newTop = documentHeight - s.stickyElement.actual('outerHeight')
                  - s.topSpacing - s.bottomSpacing - scrollTop - extra;
                if (newTop < 0) {
                  newTop = newTop + s.topSpacing + fixed_container_top;
                } else {
                  newTop = s.topSpacing + fixed_container_top;
                }

                newTop = fixed_container.is($(window)) ? newTop : newTop -  $(window).scrollTop();

                if (typeof s.getWidthFrom !== 'undefined' && s.getWidthFrom !== '') {
                    s.stickyElement.css('width', $(s.getWidthFrom).actual('outerWidth'));
                  }else{
                      //var width = $(s.stickyElement).width() === 0 ? $(s.stickyElement).actualWidth() : $(s.stickyElement).width();
                      s.stickyElement.css('width', $(s.stickyElement).actual('outerWidth'));
                  }

                if (s.currentTop != newTop) {
                  s.stickyElement
                    .css('position', 'fixed')
                    .css('top', newTop);

                  s.stickyElement.parent().addClass(s.className);
                  s.that._emit('onFixed',[s.that.$el]);
                  s.currentTop = newTop;
                }
              }

              // 如果超过了stoption则移除。
              if(s.stoptionsp && s.stoptionsp < scrollTop ){
                    s.stickyElement
                        .css('position', '')
                        .css('top', '');
                    s.stickyElement.parent().removeClass(s.className);
                    s.that._emit('unFixed',[s.that.$el]);
                    s.currentTop = null;
              }
            }

          },

          // window resize时对所有的固定元素宽度等进行重新计算
          resizer : function() {
            // console.log('resizer函数z执行中~');
            for (var i = 0; i < this.oasSticked.length; i++) {
              var s = this.oasSticked[i];
              if (typeof s.getWidthFrom !== 'undefined' && s.responsiveWidth === true) {
                  s.stickyElement.css('width', $(s.getWidthFrom).actual('outerWidth'));
              }else if(s.stickyElement.actual('outerWidth', { clone : true })===0&&s.stickyElement.actual('outerWidth')!==0){
                  // 修复该bug.这边有性能问题，表格不需要这段代码，但是其他固定元素需要，所以暂时去掉。后面有时间补上这里逻辑。
                  s.stickyElement.css('width',"100%");
                  trueWidth = s.stickyElement.actual('outerWidth') - s.stickyElement.css('margin-left').slice(0,-2) - s.stickyElement.css('margin-right').slice(0,-2);
                  s.stickyElement.outerWidth(trueWidth);
              }else{  

                  if(!s.fixedWidth){
                      s.stickyElement.css('width',s.stickyElement.parent().actual('outerWidth'))
                  }                     
              }
            }
          },
          
          // 对外方法集
          invoke: {
              
              // update: this.scroller,


              /*
               * 解除当前元素的固定。
               */
              unstick: function() {

                var unstickyElement = this.$el;

                var removeIdx = -1;
                for (var i = 0; i < this.oasSticked.length; i++)
                {
                  if (this.oasSticked[i].stickyElement.get(0) == unstickyElement.get(0))
                  {
                      removeIdx = i;
                  }
                }
                if(removeIdx != -1)
                {
                  this.oasSticked.splice(removeIdx,1);
                  unstickyElement.unwrap();
                  unstickyElement.removeClass("oas-sticky").removeAttr('style');
                }
              },


              /*
              * 设置关闭固定的高度。
              * */
              stoptionsp: function(top){
                  this.options.stoptionsp = top;

                  for(var i = 0, len = this.oasSticked.length; i < len; i ++ ){
                      if(this.oasSticked[i].that === this){
                          this.oasSticked[i].stoptionsp = top;
                          break;
                      }
                  }
              },
              
              scroller: function(){
                  this. scroller();
              }
          }

          
      });
      
     $.fn.extend({

          actual: function(method, options) {
              // check if the jQuery method exist
              if (!this[method]) {
                  throw '$.actual => The jQuery method "' + method + '" you called does not exist';
              }

              var defaults = {
                  absolute: false,
                  clone: false,
                  includeMargin: false
              };

              var configs = $.extend(defaults, options);

              var $target = this.eq(0);
              var fix, restore;

              if (configs.clone === true) {
                  fix = function() {
                      var style = 'position: absolute !important; top: -1000 !important; ';

                      // this is useful with css3pie
                      $target = $target.
                      clone().
                      attr('style', style).
                      appendTo('body');
                  };

                  restore = function() {
                      // remove DOM element after getting the width
                      $target.remove();
                  };
              } else {
                  var tmp = [];
                  var style = '';
                  var $hidden;

                  fix = function() {
                      // get all hidden parents
                      $hidden = $target.parents().addBack().filter(':hidden');
                      style += 'visibility: hidden !important; display: block !important; left: -9999px; top:-9999px;';

                      if (configs.absolute === true) style += 'position: absolute !important; ';

                      // save the origin style props
                      // set the hidden el css to be got the actual value later
                      $hidden.each(function() {
                          // Save original style. If no style was set, attr() returns undefined
                          var $this = $(this);
                          var thisStyle = $this.attr('style');

                          tmp.push(thisStyle);
                          // Retain as much of the original style as possible, if there is one
                          $this.attr('style', thisStyle ? thisStyle + ';' + style : style);
                      });
                  };

                  restore = function() {
                      // restore origin style values
                      $hidden.each(function(i) {
                          var $this = $(this);
                          var _tmp = tmp[i];

                          if (_tmp === undefined) {
                              $this.removeAttr('style');
                          } else {
                              $this.attr('style', _tmp);
                          }
                      });
                  };
              }

              fix();
              // get the actual value with user specific methed
              // it can be 'width', 'height', 'outerWidth', 'innerWidth'... etc
              // configs.includeMargin only works for 'outerWidth' and 'outerHeight'
              var actual = /(outer)/.test(method) ?
                  $target[method](configs.includeMargin) :
                  $target[method]();

              restore();
              // IMPORTANT, this plugin only return the value of the first element
              return actual;
          }
      });

     $.fn.addBack = $.fn.addBack || $.fn.andSelf;

    
    $('[oassticky]').oasSticky({});        
}

},{}],86:[function(require,module,exports){
/*
 * @desc tabsCard组件
 * @anthor eszhang
 * @Date 2016-07-19
 */
var _position = require("../../base/position/index"),
    tabsCardTpl  = require("./tabsCard.tpl"),
    tabsUnitTpl  = require("./tabsUnit.tpl");

module.exports = function(){
	$.oasUiFactory("oasTabsCard", {
    	VERSION: '1.0.0',
    	options: {
            width: 'auto',
            height: 'auto',
            tabsCardHead:{
               title:'',
               isCopyBtn: false,
               isCloseBtn: true
            },
            tabsCardBody:{
                // tabs: null
            },
            tabsCardFooter:{
                btns:[]
            }, 
    		trigger:'click',
            direction: 'bottom',
            focusoutClose:true,
            hoverDelay: 2000,
    		delay:100,
    		container:false,
            offset: [0,0]
    	},
    	_create: function(){
            var options = this.options,
                self = this;
            this._initEvent();
    	},
        _initEvent: function(){
            // 绑定事件
            var options = this.options,
                that = this,
                trigger = options.trigger,
                hoverDelay = this.options.hoverDelay;

                if(trigger){
                    if(trigger === 'click'){
                        this.$el.on('click.' + this.uiName, this.$el, function(e) {
                            that._toggle.call(that,$(e.target));
                        });
                    }else{
                        this.$el.on('mouseenter.' + this.uiName, this.$el,function(){
                            that._enter();                       
                        });
                        this.$el.on('mouseleave.' + this.uiName, this.$el, function(){
                            that._leave(hoverDelay);
                        });
                    }
                }
                
        },
        _initRelativeEvent: function($relativeDom){
            var that = this,
                index = 0,
                options = this.options,
                hoverDelay = options.hoverDelay,
                trigger = options.trigger,
                tabsCardFooter = options.tabsCardFooter,
                callback;
            $relativeDom.on('click.' + this.uiName, ".oas-tabsCard-title .delete-btn", function(){
                that._toggle();
            });
            $relativeDom.on('click.' + this.uiName, ".oas-tabsCard-title .copy-btn", function(){
                that._emit('copy',[that.$el,that.relativeDom]);;
            });
            $relativeDom.on('click.' + this.uiName, ".oas-tabsCard-tabs .oas-tabs-hd li", function(){
                var index = $(this).index();
                $(this).siblings().removeClass("current").end().addClass("current");
                that._changetab(index);
                that._emit("tabChange",[index,that.$el,that.relativeDom]);
            });
            if(trigger=="hover"){
                $relativeDom.on('mouseenter.' + this.uiName, this.$el,function(){
                    that._enter();
                });
                $relativeDom.on('mouseleave.' + this.uiName, this.$el, function(){
                    that._leave(hoverDelay);
                });
            }
            if(tabsCardFooter&&tabsCardFooter.btns){
                var btnIndex = 0;
                $relativeDom.on('click.' + this.uiName,"button:not('.disabled')", function(){
                    btnIndex = $(this).index();
                    callback = tabsCardFooter.btns[btnIndex].callback|| '';
                    _.isFunction(callback)&&callback.apply(null,[that.$el,$relativeDom]);

                });
            }
            index = that._getCurrentIndex();
            $relativeDom.find("li").eq(index).trigger("click");
        },
        _toggle: function(){
            var options = this.options;
                this.status = this.status || false;
                if(this.status){
                    this._closeTabsCard();                
                }else{
                    this._openTabsCard(); 
                }
        },
        _enter: function(){
            var that = this;
            that.hoverTimeoutId_End&&clearTimeout(that.hoverTimeoutId_End);
            that.openTimeout&&clearTimeout(that.openTimeout);
            that.closeTimeout&&clearTimeout(that.closeTimeout);
            that.hoverTimeoutId_Start = setTimeout(function(){
                that.status ? 0 : that._openTabsCard(); 
            },0)
        },
        _leave: function(hoverDelay){
            var that = this;
            that.hoverTimeoutId_Start&&clearTimeout(that.hoverTimeoutId_Start);
            that.openTimeout&&clearTimeout(that.openTimeout);
            that.closeTimeout&&clearTimeout(that.closeTimeout);
            that.hoverTimeoutId_End = setTimeout(function(){
               that.status ? that._closeTabsCard(): 0; 
            },hoverDelay)
        },
        _openTabsCard: function(){
            var that = this,
                options = this.options,
                delay = options.delay,
                direction = options.direction,
                $html = this.relativeDom = $("<div class='oas-tabsCard'></div>");
                $html.append(that._getRenderDom());
            this._emit('show',[this.$el,this.relativeDom]);
            this.closeTimeout && clearTimeout(this.closeTimeout);
            this.openTimeout = setTimeout(function() {
                that.options.container ? $html.appendTo(that.options.container) : $html.insertAfter(that.$el);
                that._adjustBox($html);
                that._setPosition(that.$el,$html,options.direction);
                that._initRelativeEvent($html);
                
                that.status = true;
                this.relativeDom = $html;
                that._emit("shown",[that.$el,this.relativeDom]);
            },delay);
        },
        _closeTabsCard: function(){
            this._emit('hide',[this.$el,this.relativeDom]);
            var that = this,
                options = this.options,
                delay = this.options.delay;
            this.openTimeout && clearTimeout(that.openTimeout);
            this.closeTimeout = setTimeout(function() {
                that.relativeDom && that.relativeDom.remove();
                that.status = false;
                that._emit("hidden",[that.$el,this.relativeDom]);
                that.relativeDom =null;
            },delay)
        },
        _adjustBox: function($html){
           var options = this.options,
               width = $html.outerWidth(),
               _height = options.height,
               titleHeight = $html.find(".oas-tabsCard-title").outerHeight(),
               footHeight = $html.find(".oas-tabsCard-footer").outerHeight();
               if(width<options.width){
                 $html.outerWidth(options.width);
               }
               //最小高度为50
               _height = _height > (titleHeight+footHeight+50) ? _height : titleHeight+footHeight+50;
               if(options.height!='auto'){
                  $html.outerHeight(_height);
                  $html.find(".oas-tabsCard-content").outerHeight(options.height-titleHeight-footHeight)
               }
        },
        _getRenderDom: function(){
            var _title = this.$el.attr("data-card-title");
            if(_title){
               this.options.tabsCardHead.title = _title;
            }
            return $(tabsCardTpl({data:this.options}));
        },
        _getCurrentIndex: function(){
            var options = this.options,
                tabs = options.tabsCardBody&&options.tabsCardBody.tabs,
                index;
                if(tabs){
                    $.each(tabs,function(i,data){
                        data.selected ? (index = i) : 0;
                    });
                }else{
                    index = 0;
                }
            return index;

        },
        /*切换tab卡*/
        _changetab: function(index){
           var that = this,
               options = this.options,
               tabs = options.tabsCardBody.tabs,
               dataArray = tabs[index];
           if(dataArray){
              this.relativeDom.find(".oas-tabs-bd").html(tabsUnitTpl({data:dataArray}));
           }    
        },
        _setPosition : function($el,$html,direction) {
            var offset = this.options.offset,
                offsetObj = _position.getPosition($el,$html,direction);
            var thisTop = offsetObj.top, //top值
                thisLeft = offsetObj.left,
                elWidth = $el.outerWidth(),
                elHeight = $el.outerHeight(),
                elTop = $el.offset().top,
                elLeft = $el.offset().left,
                win = {
                    height: $(window).height(), //窗口的宽高
                    width: $(window).width(),
                    scrollTop: $(window).scrollTop(),//窗口的滚动条宽高
                    scrollLeft: $(window).scrollLeft()
                },
                thisWidth = $html.outerWidth(),
                thisHeight = $html.outerHeight();

            if (win.width + win.scrollLeft - thisLeft - thisWidth  < 0) {
                if(thisLeft<thisWidth){

                }else{
                    switch(direction){
                        case 'bottom' :
                            offsetObj.left = thisLeft -thisWidth/2 + elWidth/2;
                        break;
                        case 'top' :
                            offsetObj.left = thisLeft -thisWidth/2 + elWidth/2;
                        break;
                        case 'right' :
                            offsetObj.left = thisLeft - thisWidth - elWidth -20 ;
                        break;
                    }
                }
            }
            if (win.height + win.scrollTop - thisTop - thisHeight  < 0) {
                if(thisTop < thisHeight){
                    // switch(direction){
                    //     case 'top' :
                    //         offsetObj.top = thisTop;
                    //     break;
                    // }
                }else{
                    switch(direction){
                        case 'bottom' :
                            offsetObj.top = thisTop -thisHeight - elHeight -20;
                        break;
                        case 'left' :
                            offsetObj.top = thisTop -thisHeight/2 + elHeight/2;
                        break;
                        case 'right' :
                            offsetObj.top = thisTop -thisHeight/2  + elHeight/2;
                        break;
                    }
                }
            }
            if(win.height + win.scrollTop - thisTop - thisHeight  < 0 && win.width + win.scrollLeft - thisLeft - thisWidth  < 0){
                if(thisTop < thisHeight){

                }else{
                    switch(direction){
                        case 'bottom' :
                            offsetObj.top = thisTop -thisHeight - elHeight -20;
                            offsetObj.left = thisLeft -thisWidth/2 + elWidth/2;
                        break;
                        case 'left' :
                            offsetObj.top = thisTop -thisHeight/2 + elHeight/2;
                        break;
                        case 'right' :
                            offsetObj.top = thisTop -thisHeight/2  + elHeight/2;
                            offsetObj.left = thisLeft - thisWidth - elWidth -20 ;
                        break;
                        case 'top' :
                            offsetObj.top = thisTop -thisHeight/2  + elHeight/2;
                            offsetObj.left = thisLeft -thisWidth/2 + elWidth/2;
                        break;
                    }
                   
                }
            }   
            if(elLeft < thisWidth){
                switch(direction){
                    case 'left' :
                        offsetObj.left = elLeft + elWidth +10;
                    break;
                    case 'bottom' :
                        offsetObj.left = elLeft;
                    break;
                    case 'top' :
                        offsetObj.left = elLeft;
                    break;
                }
                if(elLeft > thisWidth/2){
                    switch(direction){
                        case 'bottom' :
                            offsetObj.left = _position.getPosition($el,$html,direction).left;
                        break;
                        case 'top' :
                            offsetObj.left = _position.getPosition($el,$html,direction).left;
                        break;
                    }
                }
            }  
            if(elTop < thisHeight){
                switch(direction){
                    case 'top' :
                        offsetObj.top = elTop  + elHeight +10;
                    break;
                    case 'left' :
                        offsetObj.top = elTop;
                    break;
                    case 'right' :
                        offsetObj.top = elTop;
                    break;
                }
                if(elTop > thisHeight/2){
                    switch(direction){
                        case 'left' :
                            offsetObj.top = _position.getPosition($el,$html,direction).top;
                        break;
                        case 'right' :
                            offsetObj.top = _position.getPosition($el,$html,direction).top;
                        break;
                    }
                }
            }                   

            _.isNumber(parseInt(offset[0]))&&(offsetObj.top+=offset[0]);
            _.isNumber(parseInt(offset[1]))&&(offsetObj.left+=offset[1]);
            $html.offset(offsetObj);

        },

    	// 对外方法
    	invoke: {
            hide: function(){
                this._closeTabsCard();
            },
            show: function(){
                if(!this.relativeDom){
                    this._openTabsCard();
                }
            },
            content: function(tpl){
                if(this.options.tabsCardBody){
                    this.options.tabsCardBody.content = tpl;
                    this.relativeDom.find('.oas-tabsCard-content').html(tpl);
                }
            },
            setBtnDisabled: function(index,isDisabled){
                var $btnDom = this.relativeDom.find(".oas-tabsCard-footer button").eq(index);
                isDisabled ? $btnDom.addClass("disabled") : $btnDom.removeClass("disabled");
            },
            setCardTitle:function(title){
                this.options.tabsCardHead.title = title;
                this.relativeDom.find('.oas-tabsCard-title h3').html(title);
            },
            tabsCardBody:function(data){
               // var _data = $.extend(true,this.options.tabsCardBody,data);
                this.options.tabsCardBody = data;
                this.relativeDom.html(tabsCardTpl({data:this.options}));
                var index = this._getCurrentIndex();
                //this._changetab(index);
                this.relativeDom.find("li").eq(index).trigger("click");
                this._adjustBox(this.relativeDom);
                this._setPosition(this.$el,this.relativeDom,this.options.direction);
            },
            tabsCardFooter:function(data){
                //var _data = $.extend(true,this.options.tabsCardFooter,data);
                this.options.tabsCardFooter = data;
                this.relativeDom.html(tabsCardTpl({data:this.options}));
                var index = this._getCurrentIndex();
                //this._changetab(index);
                this.relativeDom.find("li").eq(index).trigger("click");
                this._adjustBox(this.relativeDom);
                this._setPosition(this.$el,this.relativeDom,this.options.direction);
            }   
    	}
    })
}

},{"../../base/position/index":16,"./tabsCard.tpl":87,"./tabsUnit.tpl":88}],87:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"3acbcd1e0bca1ae1ea7d7c945be61311"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/tabsCard/tabsCard',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,data=$data.data,$escape=$utils.$escape,$string=$utils.$string,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$out='';$out+=' ';
if(data.tabsCardHead){
$out+=' <div class="oas-tabsCard-title"> ';
if(data.tabsCardHead.isCloseBtn){
$out+='<a href="javascript:;" class="oasicon oasicon-delete title-btn delete-btn"></a>';
}
$out+=' ';
if(data.tabsCardHead.isCopyBtn){
$out+='<a href="javascript:;" class="oasicon oasicon-copy title-btn copy-btn"></a>';
}
$out+=' <h3>';
$out+=$escape(data.tabsCardHead.title);
$out+='</h3> </div> ';
}
$out+=' <div class="oas-tabsCard-content"> ';
if(data.tabsCardBody){
$out+=' ';
if(data.tabsCardBody.content){
$out+=' ';
$out+=$string(data.tabsCardBody.content);
$out+=' ';
}else if(data.tabsCardBody.tabs){
$out+=' <div class="oas-tabsCard-tabs"> <div class="oas-tabs-hd"> <ul> ';
$each(data.tabsCardBody.tabs,function($value,$index){
$out+=' <li><a href="javascript:;">';
$out+=$escape($value.title);
$out+='</a></li> ';
});
$out+=' </ul> </div> <div class="oas-tabs-bd">  </div> </div> ';
}
$out+=' ';
}else{
$out+=' <div class="tabsCard-loading"></div> ';
}
$out+=' </div> ';
if(data.tabsCardFooter){
$out+=' <div class="oas-tabsCard-footer"> ';
$each(data.tabsCardFooter.btns,function($value,$index){
$out+=' <button class="btn ';
if($value.recommend){
$out+='btn-primary';
}else{
$out+='btn-default';
}
$out+=' btn-sm ';
if($value.disable){
$out+='disabled';
}
$out+='">';
if($value.icon){
$out+='<i class="';
$out+=$escape($value.icon);
$out+='"></i>';
}
if($value.text){
$out+='<span>';
$out+=$escape($value.text);
$out+='</span>';
}
$out+='</button> ';
});
$out+=' </div> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],88:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"86a1265646299776f507141ec3a3689d"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/tabsCard/tabsUnit',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,data=$data.data,$escape=$utils.$escape,$string=$utils.$string,$out='';if(data.label){
$out+=' <div class="oas-tabsCard-top"> <span class="tab-img ';
$out+=$escape(data.label.imageClass);
$out+='"/></span> ';
if(data.label.statusClass){
$out+=' <span class="tab-ramark ';
$out+=$escape(data.label.statusClass);
$out+='"></span> ';
}
$out+=' ';
if(data.label.text || data.label.subText ){
$out+=' <ul class="tab-texts"> ';
if(data.label.text){
$out+=' <li class="tab-text"> ';
if(data.label.text.key){
$out+=' <span class="text-key">';
$out+=$escape(data.label.text.key);
$out+='：</span> ';
}
$out+=' ';
if(data.label.text.value){
$out+=' <span class="text-value">';
$out+=$escape(data.label.text.value);
$out+='</span> ';
}
$out+=' </li> ';
}
$out+=' ';
if(data.label.subText){
$out+=' <li class="tab-subtext"> ';
if(data.label.subText.key){
$out+=' <span class="text-key">';
$out+=$escape(data.label.subText.key);
$out+='：</span> ';
}
$out+=' ';
if(data.label.subText.value){
$out+=' <span class="text-value">';
$out+=$escape(data.label.subText.value);
$out+='</span> ';
}
$out+=' </li> ';
}
$out+=' </ul> ';
}
$out+=' </div> ';
}
$out+=' ';
if(data.content){
$out+=' <div class="oas-tabsCard-main">';
$out+=$string(data.content);
$out+='</div> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],89:[function(require,module,exports){
module.exports = function(){	    
	$.oasUiFactory("oasThinkInput", {
		VERSION: '1.0.0',
		options: {
			/**联想输入面板数据集合:[{label:"",num:"",value:""},{label:"",num:"",value:""}]**/
			data: [],
			//是否是分批取数据
			isBatch:true,
			//父节点元素
			parentEl:null,
			paginInfo:{type:'simple',current:1,total:0,pageItems:8,pageNoChange:function(ev, current, pageItems){}},
			//当数据总条数为零时(暂不适配)
			blankDom:'',
			fillField:'',
			//无数据时的提示
			nodataTip:"没有找到类似数据"
		},
		// 事件
		events: {
			'target': function() {
				return this.$el;
			}
		},
		_create: function(){
			var html = this.$el.html;
			this._preData();
			this.attrMap = this.$el[0].attributes;
			var obj = {
			    data:  this.options.data,
			    isBatch:  this.options.isBatch,
				nodataTip: this.options.nodataTip,
				pagination:	 this.options.paginInfo,
				container: this.options.parentEl === null ? 'body' : this.options.parentEl,
				render: this.options.fillField ? template.compile('<span class="option-value" title="{{'+fillField+'}}">{{'+fillField+'}}</span>') : undefined,  
				isSearch: true,
				isPage: true,
				height: (this.options.paginInfo.pageItems * 30)+37
			};
			this._createDom(html,obj);
			
		},
		_preData: function(){
            for(var i = 0; i < this.options.data.length;i++){
                this.options.data[i].text = this.options.data[i].label;
			}
		},
		_createDom: function(html,obj){
			var that = this;
            // this.$inputSelect = this.$el.after('<div class="oas-thinkInput-select"></div>');
			this.thinkInputUUID = oasisl.util.getUID(this.uiName);
			this.$el.wrap('<div class="'+this.thinkInputUUID+'"></div>');
			this.$inputSelect = $('.'+this.thinkInputUUID);
			
			this.$inputSelect.oasSelect(obj).on('open.oasSelect',function(ev, $el) {
                that._emit('onOpen');
                return false;
            }).on('afterClear.oasCalendar',function(ev, $el) {
                that._emit('onClose');
                return false;
			}).on('change.oasSelect',function(ev,select) { 
                that._emit('onChange',[select]);
                return false;
            }).on('select.oasSelect',function(ev, $el, select) { 
                that._emit('onSelect',[select]);
                return false;
			});
			// this.$el = this.$inputSelect.find('input');
			// 把原input的属性赋值给新的input
			this._addAttr();
		},
		_addAttr: function(){
			var attrMap = this.attrMap;
			for(var i = 0; i < attrMap.length; i++){
				if(attrMap[i].nodeName === 'class'){
					this.$inputSelect.find('.select-search-input').addClass(attrMap[i].nodeValue);
				}else if(attrMap[i].nodeName !== 'style'){
					this.$inputSelect.find('.select-search-input').attr(attrMap[i].nodeName,attrMap[i].nodeValue);
				}
			}
		},
		// 组件对外方法集
		invoke: {
			/*
			 * 修改当前页数据
			 * @param dataList 新的数据集合
			 * @param total 总的数据条数
			 */
			data: function(dataList,total,isInner,isfromTarget) {
				for(var i = 0; i < dataList.length;i++){
                    dataList[i].text = dataList[i].label;
			    }
				this.$inputSelect.oasSelect('setDataThinkInput',dataList,total); 
			},
			//设置联想输入当前页
			current:function(num){
				this.$inputSelect.oasSelect('current',num); 
			},
			//打开面板
			open: function() {
				this.$inputSelect.oasSelect('open');
			},
			//关闭面板
			close: function() {
				this.$inputSelect.oasSelect('close');
			},
			//显示加载
			showLoading:function(){
				this.$inputSelect.oasSelect('showLoading');
			},
			//关闭加载
			hideLoading:function(){
				this.$inputSelect.oasSelect('hideLoading');
			},
			destroy : function() {
                this.$inputSelect.oasSelect('destroy');
            }
		}

	});
	
}

},{}],90:[function(require,module,exports){

/*
 * @desc timeline组件
 * @date 2017-07-31
 */

var timelineTpl = require("./timeline.tpl"),
    util        = require("../../base/util/index");

module.exports = function(){
	
    $.oasUiFactory("oasTimeline", {

        version: "0.0.1",
        /*
         * 默认配置项
         */
        options: {
            
            //精度类型
            type: "month",

            //数据
            data: null,

            //支持url获取data
            url: null,

            //分页配置项
            pagination: {
                pageItems: 10,
                current: 1              
            },

            //宽度
            width: "auto",

            //高度
            height: "auto",

            //布局方式
            layout: "left",

            //数据追加类型
            loadType: "click",

            //是否支持展开收起
            toggleabled: false,

            //时间point自定义class
            pointClass: null,

            //content渲染内容
            headRender: null,
            bodyRender: null

        },

        /*
         * 精度
         */
        precisionMap: {
            "year":  ["yyyy年","MM月"],
            "month": ["yyyy-MM","dd日"],
            "date":  ["yyyy-MM-dd","hh:mm"]
        },      

        /*
         * 事件
         */
        events: {

            "click .oas-timeline-loading.timeline-more": function(self, evt){

                if(this.options.loadType !== "scroll"){
                     this.dataManage.loadData();
                }
               
            },

            "click .row-toggle-btn": function(self, evt){

               var $timelineRowBd = $(self).closest(".oas-timeline-row").find(".oas-timeline-row-bd");

                if($(self).hasClass("row-open")){
                    $(self).removeClass("row-open").addClass("row-close");
                    $timelineRowBd.stop().slideUp(function(){
                        $timelineRowBd.parent().removeClass("row-open").addClass("row-close")
                    });
                }else{
                    $(self).removeClass("row-close").addClass("row-open");
                    $timelineRowBd.stop().slideDown(function(){
                        $timelineRowBd.parent().removeClass("row-close").addClass("row-open")
                    });
                }
               
            },

            "mouseenter .oas-timeline-row-bd": function(self, evt){
                this._emit('mouseEnter', [$(self)]);
            },

            "mouseleave .oas-timeline-row-bd": function(self, evt){
                this._emit('mouseLeave', [$(self)]);
            }
        },

        /*
         * 重要数据处理
         */
        
        _initDataManage: function(data){

            var self         = this,
                options      = this.options,
                precisionMap = this.precisionMap,
                type         = options.type,
                pointClass   = options.pointClass,
                headRender   = options.headRender,
                bodyRender   = options.bodyRender;

            var eventsManage = this.eventsManage;

            this.dataManage = {

                url: options.url,

                data: [],

                convertData: null,

                current: options.pagination.current,

                pageItems: options.pagination.pageItems,

                totalPages: null,

                classMap: {},

                toggleabled: options.toggleabled,

                finished: false,

                
                init: function(data){

                    var that = this;

                    //清除状态
                    this._resetState();

                    if(this.url){

                        var condition;

                        this.model = oasisl.baseModel.extend({
                            statics: {
                                baseUrl: that.url
                            }
                        });

                        condition           = this.model.condition = {pageNo:1,pageItems: 20};
                        condition.pageNo    = this.current;
                        condition.pageItems = _.isNumber(this.pageItems) ?  this.pageItems : null;

                        this.model.list(condition).then(function(res){
                           
                            if(res.meta.status === 0){
                                data = res.data;

                                that.data  = data || [];

                                that.totalPages = res.page.totalPages;
                                
                                //转换时间格式(具体看后台传的类型)
                                _(data).forEach(function(m,mIndex){
                                    m.time = new Date(m.time);
                                }).value();
                                that.setData(data);
                                that.updateToggleabled();
                            }

                        })

                    }else if(data){

                        var current,
                            pageItems,
                            startIndex,
                            endIndex;

                        that.data         = data || [];
                        
                        current    = this.current;
                        pageItems  = _.isNumber(this.pageItems) ?  this.pageItems : that.data.length;
                        startIndex = (current-1)*pageItems;
                        endIndex   = startIndex+pageItems;

                        that.totalPages = Math.ceil(this.data.length/pageItems);

                        data.sort(function(m1,m2){
                            return m1.time.getTime() - m2.time.getTime();
                        })
         
                        this.setData(data.slice(startIndex,endIndex));
                        this.updateToggleabled();    
                    }                                                                  
                },

                setData: function(data){
                    
                    var convertData =  this._convertData(data),
                        setData     = this._transferToArr(convertData);

                    eventsManage.fire("data.oasTimeline",[setData,this.classMap,convertData])

                    if(this.current>=this.totalPages){
                        this.finished = true;
                        eventsManage.fire("loadMore.oasTimeline",["end"])
                    }

                    self._emit('data', [data]);
                },


                loadData: function(){

                    var loadDeferred = new $.Deferred(),
                        current      = ++this.current,
                        pageItems    = this.pageItems,
                        data         = this.data,
                        that         = this,
                        loadData,
                        condition;

                    eventsManage.fire("loadMore.oasTimeline",["load"]);  
                    if(this.url){
                        condition       = this.model.condition;
                        condition.pageNo = this.current;

                        this.model.list(condition).then(function(res){
                               
                                if(res.meta.status === 0){
                                    data = res.data;

                                    //转换时间格式(具体看后台传的类型)
                                    _(data).forEach(function(m,mIndex){
                                        m.time = new Date(m.time);
                                    }).value();                                    

                                    that.data = that.data.concat(data);
                                    loadDeferred.resolve();
                                }else{
                                    this.current--;
                                    loadDeferred.reject();                     
                                }
                        },function(){
                            this.current--;
                            loadDeferred.reject();
                        })
                    }else{
                        startIndex = (current-1)*pageItems;
                        endIndex   = startIndex+pageItems;
                        data       = data.slice(startIndex,endIndex);
                        loadDeferred.resolve();
      
                    }

                    $.when(loadDeferred).then(function(){
                        loadData = that._convertData(data);
                        that._transferToArr(that.convertData);                       
                        self._emit('loadMoreBefore', [data]);                          
                        eventsManage.fire("loadData.oasTimeline",[data,that.classMap]);             
                                                 
                        if(that.current>=that.totalPages){
                            that.finished = true;
                            eventsManage.fire("loadMore.oasTimeline",["end"]);
                        }else{
                            eventsManage.fire("loadMore.oasTimeline",[]);
                        }

                        self._emit('loadMoreAfter', [data]);
                        
                    })             
                },

                addData: function(data){
                    
                    var aArr       = [],
                        matchIndex = -1;

                    if(!_.isArray(data)){
                        data = [data]
                    }

                    _(data).forEach(function(m,mIndex){
                        matchIndex = -1;
                        _(this.data).forEach(function(n,nIndex){
                            if(m.id == n.id)
                                matchIndex = nIndex;
                        }).value();
                        (matchIndex === -1)&&aArr.push(m);

                    }).value();

                    this.data = this.data.concat(aArr);

                    this._convertData(data);
                    this._transferToArr(this.convertData);
                    eventsManage.fire("addData.oasTimeline",[aArr,this.classMap])
                    self._emit('addData', [aArr]);
                },

                getData: function(){

                    return this.data;
                },

                getConvertData: function(){

                    return this.convertData;
                },

                updateToggleabled: function(type){

                    this.toggleabled = options.toggleabled = _.isBoolean(type) ? type : options.toggleabled;
                    eventsManage.fire("toggle.oasTimeline",[this.toggleabled])
                },

                _convertData: function(data){

                    var that         = this,
                        convertData;

                    //按时间顺序归并数据

                    type = precisionMap.hasOwnProperty(type) ? type : "month";

                    convertData =  _.groupBy(data,function(n){
                        if(_.isString(bodyRender)){
                            n.label = template.compile(bodyRender)(n);
                        }else if(_.isFunction(bodyRender)){
                            n.label = template.compile(bodyRender(n))(n);
                        }

                        return  util.dateFormat(n.time,precisionMap[type][0]);
                    });

                    _.forEach(convertData,function(list,key) {
                        convertData[key] = _.groupBy(list,function(n){
                            return util.dateFormat(n.time,precisionMap[type][1]);
                        })

                    });

                    //记录合并数据
                    if(!this.convertData){
                        this.convertData = convertData
                    }else{

                        _.merge(this.convertData, convertData, function(a, b) {
                            if (_.isArray(a)) {
                                return a.concat(b);
                            }
                        });
                    }
                   
                    return  convertData;

                },

                /*
                 *  转化成数组，且记录dom节点顺序(渲染节点全量)
                 */
                _transferToArr: function(data){


                    var that          = this,
                        _convertDataArr_ = [];

                    this.classMap = {};

                    _.forEach(data,function(firstVal,firstKey){

                        var firstIndex =  _.indexOf(_.keys(data).sort(),firstKey);

                        _convertDataArr_[firstIndex]           = {};
                        _convertDataArr_[firstIndex][firstKey] = []

                        _.forEach(firstVal,function(secondVal,secondKey){

                            var secondIndex = _.indexOf(_.keys(firstVal).sort(),secondKey);

                            _convertDataArr_[firstIndex][firstKey][secondIndex]            = {};
                            _convertDataArr_[firstIndex][firstKey][secondIndex][secondKey] = secondVal;

                            that.classMap[firstKey+"-"+secondKey] = pointClass ? (_.isFunction(pointClass) ? pointClass.apply(null,[firstKey,secondKey,secondVal]) : pointClass) 
                                                                               : (pointClass);

                            _(secondVal).forEach(function(content,contentIndex){

                                var posIndex = _.findIndex(that.data, function(chr) {
                                    return chr.id == content.id;
                                });

                                content._index_ = [firstIndex,secondIndex,contentIndex];

                                that.data[posIndex]._index_ = [firstIndex,secondIndex,contentIndex];

                            }).value();


                        })

                    })

                    return _convertDataArr_;
                },

                //还原状态
                _resetState: function(){
                    this.data        = [];
                    this.convertData = null;
                    this.current     = options.pagination.current;
                    this.pageItems   = options.pagination.pageItems;
                    this.totalPages  = null;
                    this.classMap    = {};
                    this.finished    = false;
                }
            }

            this.dataManage.init(data);

        },

        /*
         * 数据渲染
         */
        
        _initRenderManage: function(){

            var $el          = this.$el,
                self         = this,
                options      = this.options,
                type         = options.type,
                width        = options.width,
                height       = options.height,
                headRender   = options.headRender,
                precisionMap = this.precisionMap;

            this.renderManage = {

                render: function(data,classMap,dataObj){

                    var tpl,
                        $timeline;

                    if(data&&data.length>0){
                        tpl = timelineTpl({
                                headRender: _.isFunction(headRender) ? headRender() : headRender,
                                data: data,
                                classMap: classMap
                            });
                    }else{
                        tpl = '<div class="oas-no-data oas-big-style">'+
                                  '<span class="oas-no-dataImg"></span>'+
                                  '<span class="oas-no-dataImg-magnifier"></span>'+
                                  '<span class="oas-no-dataTip">对不起，暂无数据</span>'+
                              '</div>';
                    }

                    $el.html(tpl);

                    $timeline = $el.addClass("oas-timeline");

                    (options.layout === "center")&&($timeline.addClass("timeline-center"));

                    $timeline.outerWidth(width)
                             .outerHeight(height);

                    this._resetDomStatus();

                    setTimeout(function(){
                        self._emit("afterRender",[dataObj])
                    },0)
                },

                //(DIFF渲染)
                addRender: function(data,classMap){

                    var firstLevel,
                        secondLevel;

                    type = precisionMap.hasOwnProperty(type) ? type : "month";

                    data.sort(function(m1,m2){
                            return m1.time.getTime() - m2.time.getTime();
                    })

                    _(data).forEach(function(m,mIndex){

                        firstLevel  = util.dateFormat(m.time,precisionMap[type][0]);
                        secondLevel = util.dateFormat(m.time,precisionMap[type][1]);

                        var $firstTpl,
                            $firstDom,
                            $secondTpl,
                            $secondDom,
                            $thirdTpl;

                        $firstDom = $el.find("[data-timeline-date='"+firstLevel+"']");

                        if($firstDom.length === 0){
                            $firstTpl = $('<div class="oas-timeline-row  row-open" data-timeline-date="'+firstLevel+'">'+
                                            '<div class="oas-timeline-row-hd">'+
                                                '<div class="row-hd-content">'+(headRender ? (_.isFunction(headRender) ? headRender() : headRender) : "")+'</div>'+
                                                '<div class="row-hd-line"></div>'+
                                                '<div class="row-hd-point">'+
                                                    '<span class="point-left"></span>'+
                                                    '<span class="point-text">'+firstLevel+'</span>'+
                                                    '<span class="point-right"></span>'+
                                                    '<span class="point-icon row-toggle-btn row-open"></span>'+
                                                '</div>'+
                                            '</div>'+
                                        '</div>');

                            if(m._index_[0] === 0){
                                $el.find(".oas-timeline-main").prepend($firstTpl);
                            }else{
                                $el.find(".oas-timeline-row").eq(m._index_[0]-1).after($firstTpl);
                            }
                        }

                        $firstDom  = $el.find("[data-timeline-date='"+firstLevel+"']");
                        $secondDom = $firstDom.find("[data-timeline-date='"+secondLevel+"']");

                        if($secondDom.length === 0){
                            $secondTpl = '<div class="oas-timeline-row-bd" data-timeline-date="'+secondLevel+'">'+        
                                            '<div class="row-bd-line"></div>'+
                                            '<div class="row-bd-point '+classMap[firstLevel+'-'+secondLevel]+'">'+
                                                '<span class="point-time">'+secondLevel+'</span>'+
                                                '<span class="point-icon"></span>'+
                                            '</div>'+
                                         '</div>';

                            if(m._index_[1] === 0){
                                $firstDom.find(".oas-timeline-row-hd").after($secondTpl);
                            }else{
                                $firstDom.find(".oas-timeline-row-bd").eq(m._index_[1]-1).after($secondTpl);
                            }
                        }

                        $secondDom = $firstDom.find("[data-timeline-date='"+secondLevel+"']");

                        $thirdTpl = '<div class="row-bd-content">'+
                                        '<div class="row-bd-content-inner">'+m.label+'</div>'+
                                    '</div>';

                        if(m._index_[2] === 0){
                            $secondDom.prepend($thirdTpl);
                        }else{
                            $secondDom.find(".row-bd-content").eq(m._index_[2]-1).after($thirdTpl);
                        }
                    }).value()
                   
                    this._resetDomStatus();
                   
                },

                loadmoreRender: function(type){
                    if(type === "load"){                
                        $el.find(".oas-timeline-loading")
                           .removeClass("timeline-more")
                           .addClass("timeline-loading")
                           .find(".loading-text a").text("正在加载，请稍后...");

                    }else if(type === "end"){
                        $el.find(".oas-timeline-loading")
                           .removeClass("timeline-loading timeline-more")
                           .addClass("timeline-end")
                           .find(".loading-text a").text("我也是有底线的");
                    }else{
                        $el.find(".oas-timeline-loading")
                           .removeClass("timeline-loading")
                           .addClass("timeline-more")
                           .find(".loading-text a").text("加载更多");
                    }
                },

                //状态重置
                _resetDomStatus: function(){

                    $el.find(".oas-timeline-row-bd")
                       .removeClass("last-content")
                       .last()
                       .addClass("last-content");

                    $el.find(".oas-timeline-row-bd").removeClass("row-bd-even row-bd-odd")
                       .end()
                       .find(".oas-timeline-row-bd:even").addClass("row-bd-even")
                       .end()
                       .find(".oas-timeline-row-bd:odd").addClass("row-bd-odd");                             
                },

                toggle: function(type){
                    if(type){
                        $el.addClass("timeline-has-toggle")
                    }else{
                        $el.removeClass("timeline-has-toggle")
                    }
                }
            }

        },

        /*
         * 事件驱动
         */
        _initEventDriveManage: function(){

            var _events = {}

            this.eventsManage = {

                on: function(name, callback){
                    name = (name || '').toLowerCase();
                    if(_events[name]) {
                        _events[name].push(callback)
                    }else {
                        _events[name] = [callback]
                    }
                    return this;
                },

                off: function(name, callback){
                    var index,
                        list;
                    name = (name || '').toLowerCase();
                    index = _indexFn(name, callback);
                    if(index > -1) {
                        list = _events[name];
                        list.splice(index, 1);
                    }
                    return this;
                },

                fire: function(name, params){
                    var that = this,
                        list;
                    name = (name || '').toLowerCase();
                    list = _events[name];
                    if(list) {
                        $.each(list, function(index, dict){
                            
                            _.isFunction(dict)&&dict.apply(that, params);
                            
                        })
                    }
                },

                _indexFn: function(name, fn) {
                    var list;
                    name = (name || '').toLowerCase();
                    list = __events[name];

                    if(list){
                        fn = fn || '';
                        for (var i = 0; i < list.length; i++) {
                            if (fn.toString() === list[i].toString()) {
                                return i;
                            }
                        }
                    }                    
                    return -1;
                }
            }

        },

        /*
         * 订阅事件(桥梁)
         */        
        _subscripteEvent: function(){

            var renderManage = this.renderManage,
                eventsManage = this.eventsManage;

            //订阅 数据更新时重新渲染(全量)
            eventsManage.on("data.oasTimeline",function(){
                renderManage.render.apply(renderManage,arguments);
            });

            //订阅 数据更新时重新渲染(部分)
            eventsManage.on("loadData.oasTimeline",function(){
                renderManage.addRender.apply(renderManage,arguments);
            });

            //订阅 数据更新时重新渲染(部分)
            eventsManage.on("addData.oasTimeline",function(){
                renderManage.addRender.apply(renderManage,arguments);
            });

            //loadmore
            eventsManage.on("loadmore.oasTimeline",function(type){
                renderManage.loadmoreRender(type);
            });

            //toggle
            eventsManage.on("toggle.oasTimeline",function(type){
                renderManage.toggle(type);
            });

        },

        /*
         * 事件绑定
         */
        _bindEvents: function(){

            var $el      = this.$el,
                self     = this,
                options  = this.options,
                timelineTop,
                maxDiffTop;

            var dataManage = this.dataManage;

            $el.on("scroll",function(){

                if(options.loadType === "scroll" && (!dataManage.finished)){

                    timelineTop = $el.scrollTop();
                    maxDiffTop  = $el.find(".oas-timeline-inner").outerHeight() - $el.height();

                    if(timelineTop == maxDiffTop){
                        
                       self.dataManage.loadData();
                    }
                }
                
            })

        },

        /*
         * 组件入口
         */
        _create: function() {

            var options = this.options,
                data    = options.data;

            this._initRenderManage();
            this._initEventDriveManage();
            this._subscripteEvent();
            this._initDataManage(data);
            this._bindEvents();         
            
        },

        /*
         * 对外方法
         */
        invoke: {

            // 重刷数据
            data: function(data){
                this.dataManage.url = null
                this.dataManage.init(data); 
            },

            // 添加数据
            addData: function(data){
                this.dataManage.addData(data); 
            },

            //切换是否支持展开收起
            toggleabled: function(type){
                this.dataManage.updateToggleabled(type);
            },

            //获取某个时间段的数据（已渲染的数据）
            getTimeData: function(time1,time2){

                var returnVal,
                    ConvertData;

                ConvertData = this.dataManage.getConvertData();

                if(time1){
                    if(time2){

                        (ConvertData[time1]&&ConvertData[time1][time2])&&(returnVal={},returnVal[time1]={},returnVal[time1][time2]=ConvertData[time1][time2])
                    }else{
                        (ConvertData[time1])&&(returnVal={},returnVal[time1]=ConvertData[time1])
                    }
                }

                return returnVal;
            }
        }
        
    });
    
}
},{"../../base/util/index":18,"./timeline.tpl":91}],91:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"a82c4466c201b5c28e3c37637a26af56"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/timeline/timeline',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,data=$data.data,$each=$utils.$each,firstLevel=$data.firstLevel,firstIndex=$data.firstIndex,$escape=$utils.$escape,oasTimelineGetKey=$helpers.oasTimelineGetKey,headRender=$data.headRender,$string=$utils.$string,secondLevel=$data.secondLevel,secondIndex=$data.secondIndex,content=$data.content,contentIndex=$data.contentIndex,classMap=$data.classMap,$out='';$out+=' ';
if(data){
$out+=' <div class="oas-timeline-inner"> <div class="oas-timeline-main"> ';
$each(data,function(firstLevel,firstIndex){
$out+=' <div class="oas-timeline-row row-open" data-timeline-date="';
$out+=$escape(oasTimelineGetKey(firstLevel));
$out+='"> <div class="oas-timeline-row-hd"> <div class="row-hd-content">';
if(headRender){
$out+=$string(headRender);
}
$out+='</div> <div class="row-hd-line"></div> <div class="row-hd-point"> <span class="point-left"></span> <span class="point-text">';
$out+=$escape(oasTimelineGetKey(firstLevel));
$out+='</span> <span class="point-right"></span> <span class="point-icon row-toggle-btn row-open"></span> </div> </div> ';
$each(firstLevel[oasTimelineGetKey(firstLevel)],function(secondLevel,secondIndex){
$out+=' <div class="oas-timeline-row-bd" data-timeline-date="';
$out+=$escape(oasTimelineGetKey(secondLevel));
$out+='"> ';
$each(secondLevel[oasTimelineGetKey(secondLevel)],function(content,contentIndex){
$out+=' <div class="row-bd-content"> <div class="row-bd-content-inner">';
$out+=$string(content.label);
$out+='</div> </div> ';
});
$out+=' <div class="row-bd-line"></div> <div class="row-bd-point ';
$out+=$escape(classMap&&classMap[oasTimelineGetKey(firstLevel)+'-'+oasTimelineGetKey(secondLevel)]);
$out+='"> <span class="point-time">';
$out+=$escape(oasTimelineGetKey(secondLevel));
$out+='</span> <span class="point-icon"></span> </div> </div> ';
});
$out+=' </div> ';
});
$out+=' </div> <div class="oas-timeline-loading timeline-more"> <div class="loading-text"><a href="javascript:;">加载更多</a></div> <div class="loading-line"></div> <div class="loading-point"> <span class="point-icon point-icon-more"></span> <span class="point-icon point-icon-loading oasicon oasicon-loading oasis-spin"></span> </div> </div> </div> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],92:[function(require,module,exports){
/*
 * @desc tooltips组件，依赖于oasDialog
 * @anthor rbai
 * @Date 2016-03-02
 */
module.exports = function(){
    $.oasUiFactory("oasTooltip", {
    	VERSION: '1.0.0',
    	options: {
    		trigger: 'hover focus',
    		title: '',
    		placement: 'top',
    		delay: 0,
    		time: 2000 // if time > 0, and trigger is 'click', the tip will close auto after time
    	},

    	_create: function(){
    		var options = this.options,
    			self = this;
    		// 绑定事件
    		var triggers = options.trigger,
    			triggerArr = triggers.split(' ');

    		for (var i = 0, len = triggerArr.length; i < len; i++){
    			var trigger = triggerArr[i];
    			if(trigger === 'click'){
    				this.$el.on('click.' + this.uiName, this.$el, $.proxy(this._toggle, this));
    			}else if(trigger !== 'manual'){
    				var eventIn = trigger === 'hover' ? 'mouseenter' : 'focusin';
    				var eventOut = trigger === 'hover' ? 'mouseleave' : 'focusout';

    				this.$el.on(eventIn + '.' + this.uiName, this.$el, $.proxy(this._enter, this));
    				this.$el.on(eventOut + '.' + this.uiName, this.$el, $.proxy(this._leave, this));
    			}
    		}
    	},


    	_enter: function(){

    		var options = this.options;
            var self = this;
    		clearTimeout(this.timeout);
    		this.hoverState = 'in';

    		if (!options.delay) return this._openTip();

    		// add the timeout
    		this.timeout = setTimeout(function () {
		      if (self.hoverState == 'in') self._openTip();
		    }, options.delay);
    	},

    	_leave: function(){
    		var options = this.options;
            var self = this;
    		clearTimeout(this.timeout);
    		this.hoverState = 'out';

    		if (!options.delay) return this._closeTip();

    		this.timeout = setTimeout(function () {
		      if (self.hoverState == 'out') self._closeTip();
		    }, options.delay)
    	},

    	/**
         * 
    	 * place 2 param
    	 */
    	_Place2Param: function(){
    		var place = this.options.placement;
    		var placeObj = {
    			'top': 1,
    			'right': 2,
    			'bottom': 3,
    			'left': 4
    		}

    		return placeObj[place];
    	},


    	_toggle: function(){
    		var tip = this.$el.data('oastip');
    		if(tip){
    			this._closeTip();
    		}else{
    			this._openTip();
    		}
    	},

    	_openTip: function(){
    		var options = this.options,
                self = this,
    			time = (options.trigger === 'click' && options.time > 0) ? options.time : 0;
            //2016-7-22 enzhang增(避免title为空的bug)
            if(!this._getTitle()) return;
            
            this._emit('show', [this.$el]);
    		this.$el.data('oastip', dialog.tips(this._getTitle(), this.$el, {
    			tips: [this._Place2Param()],
    			time: time,
                end:function(){
                    self.$el.data('oastip', null);
                    self._emit('hide', [this.$el]);
                    self._emit('hidden', [this.$el]);
                }
    		}));

            this._emit('shown', [this.$el]);
    	},

    	/*
         * return title
         * if title is function, return the function apply reslut;
    	 */
    	_getTitle: function(){
    		var options = this.options,
    			title;
    		title = typeof options.title === 'function' ? options.title.call(this.$el[0]) :  options.title;

            title = title ? title : this.$el.attr('title');
			
			return title;
    	},

    	_closeTip: function(){
    		var tip = this.$el.data('oastip');
    		if(!tip) return;
    		var options = this.options;
            this._emit('hide', [this.$el]);
    		dialog.close(tip);
    		this.$el.data('oastip', null);
            this._emit('hidden', [this.$el]);
    	},

    	// 对外方法
    	invoke: {
    		hide: function(){
    			this._closeTip();
    		},

    		show: function(){
    			this._openTip();
    		},

    		setContent: function(title){
    			if(!title || title === ''){
    				console.warn('[OASTOOTIP]: title is invalid');
    				return;
    			}
    			this.options.title = title;
    		}
    	}
    });

    $('[oastooltip],[data-toggle="oasTooltip"]').oasTooltip({});
}
},{}],93:[function(require,module,exports){
var transferTpl                   = require("./transfer.tpl"),
    transferItemTpl               = require("./transfer_item.tpl"),
    noDataTpl                     = require("./no_data.tpl");

module.exports = function(){
	$.oasUiFactory("oasTransfer", {
		VERSION: '1.0.0',
		options: {
            // 穿梭框类型： 'bi'为双向穿梭框，'uni'为单向穿梭框
            direction: 'bi',
            // 穿梭框组件宽度
            width: 200,
            // 穿梭框组件高度
            height: 200,
            // 穿梭数据集合
            fences: [{
                title: 'src',
                data:[]
            },{
                title: 'dest',
                data:[]
            }],
            transferBtn: ['向右', '向左'],
            // 要穿梭的数据结构是否为树
            isTree: false,
            // 是否包含搜索框
            showSearch: false,
            // 是否通过url获取数据
            url: null,
            // 搜索框提示内容
            searchPlaceholder: '请输入搜索内容',
            // 业务按钮名称
            businessBtn: null,
            // 业务按钮点击回调
            business_cb: null
		},
		_create: function(){
            //初始化select所需数据
            oasTransfer.allTransfer.push(this);
            this._createDom();
            if(!!this.options.url){
                this._initModel();
            }
        },
        //初始化选项面板
        _createDom: function(fences) {
            var $el = this.$el;
                options = this.options;

            $el.empty().addClass('oas-transfer ' + options.direction + ' clearfix')
                .html(transferTpl({options:options}));

            this.$leftList = this.$el.find('.oas-transfer-list.to-right .oas-transfer-list-body'), // 左侧穿梭框
            this.$rightList = this.$el.find('.oas-transfer-list.to-left .oas-transfer-list-body'); // 右侧穿梭框

            this._iCall('data', [options.fences]);
        },
        // 通过 url传递数据
        _initModel: function(){
            var that = this;
            if(!that.options.url) return;

            that._model = oasisl.baseModel.extend({
                statics: {
                    baseUrl: that.options.url
                }
            });

            that._model.list().then(function(res){
                if(res.meta.status === 0){
                    that._iCall('data', [res.data]);
                }
            });
        },
        // fence data预处理
        _preRenderData: function(fences) {
            var that = this;
            if(fences && fences.length) {
                // title长度处理
                if(this.options.businessBtn) {
                    this.$leftList.siblings('.oas-transfer-list-head').find('.title').addClass('hasBusiness');
                }

                if(this.options.direction === 'bi') {
                    // 双向穿梭框
                    this.lList = {
                        l_check : _.filter(fences[0].data, {'checked': true}).length,
                        data: fences[0].data
                    },
                    this.lView = {
                        l_check : 0,
                        l_pick : _.filter(fences[0].data, {'disabled': false}).length,
                        l_all: fences[0].data.length,
                        data: fences[0].data
                    };
                    this.rList = {
                        l_check : _.filter(fences[1].data, {'checked': true}).length,
                        data: fences[1].data
                    },
                    this.rView = {
                        l_check : 0,
                        l_pick : _.filter(fences[1].data, {'disabled': false}).length,
                        l_all: fences[1].data.length,
                        data: fences[1].data
                    };

                } else {
                    // 单向穿梭框,初始化已选项
                    fences[1].data = _.filter(fences[0].data, {checked: true});
                    
                    this.lList = {
                        l_check : 0,
                        data: fences[0].data
                    },
                    // 左侧视图---树
                    this.lView = {
                        l_check : fences[1].data.length,
                        l_pick : (that.options.isTree)? _.filter(fences[0].data, {'chosen': true, 'disabled': false}).length : _.filter(fences[0].data, {'disabled': false}).length,
                        l_all: (that.options.isTree)? _.filter(fences[0].data, {'chosen': true}).length : fences[0].data.length,
                        data: fences[0].data
                    };
                    this.rList = {
                        l_check : _.filter(fences[0].data, {'checked': true}).length,
                        data: fences[1].data
                    },
                    this.rView = {
                        l_check : fences[1].data.length,
                        l_pick :fences[1].data.length,
                        l_all: fences[1].data.length,
                        data: fences[1].data
                    };

                    if(this.options.isTree) {
                        this.options.TreeDataLen = this.lView.l_all;
                    }

                }          
            }
        },

        // 渲染穿梭框内容
        _refresh: function() {
            var that = this;
            // 渲染左侧栏
            if(this.options.isTree && this.options.direction === 'uni') { // 若左侧栏是树形结构
                this.$leftList.empty().oasTree({
                    dataType:"array",
                    checkType:"checkbox",
                    data:this.lView.data
                }).on("checkChange.oasTree",function(ev,node,checkChangeNodes){
                    var checkChangeNodes = $(this).oasTree('getCheckedNodes');
                    that.rList.data = _.filter(checkChangeNodes, {'chosen': true}); // 获取所有选中的树叶节点
                    that._refreshView('to-right'); // 单向只刷新右侧
                    that._emit('change', [that.lList.data, that.rList.data, that.lView.data, that.rView.data]);
                })
            }

            that._refreshView('to-right');
        },
        // 刷新穿梭框
        _refreshView: function(ori) {
            var $el_arr = this._getListEl(ori);
            var list_arr = this._getListData(ori);

            var $el = $el_arr[0],
                $el_oppo = $el_arr[1],
                list = list_arr[0],
                list_oppo = list_arr[1],
                view = this._getViewData(ori)[0],
                view_oppo = this._getViewData(ori)[1],
                query_my = '',
                query_oppo = '';

            if(this.options.showSearch) {
                query_my = $el.prev().find('input').val().trim();
                query_oppo = $el_oppo.prev().find('input').val().trim();
            }

            // 维护view数据及统计
            
            if(this.options.isTree && this.options.direction === 'uni') {
                
                view.data = _.filter(this.$leftList.oasTree('getAllTreeNode'), function(n){return n.chosen && n.label.indexOf(query_my) > -1 });
                view.l_check = _.filter(this.$leftList.oasTree('getCheckedNodes'), function(n) {return n.chosen && !n.disabled && n.label.indexOf(query_my) > -1;}).length;
                view.l_pick =_.filter(this.$leftList.oasTree('getAllTreeNode'), function(n) {return n.chosen && !n.disabled && n.label.indexOf(query_my) > -1;}).length;
                view.l_all = _.filter(this.$leftList.oasTree('getAllTreeNode'), function(n){return n.chosen && n.label.indexOf(query_my) > -1 }).length;

                view_oppo.data = this._filterData(list_oppo.data, query_oppo);
                view_oppo.l_check = view_oppo.data.length;
                view_oppo.l_pick = view_oppo.data.length;
                view_oppo.l_all = view_oppo.data.length;

            
                $el_oppo.find('.oas-transfer-item-wrap').empty().html(transferItemTpl({data: view_oppo.data, ori: this.options.direction}));
                // return;

            } else {

                view.data = this._filterData(list.data, query_my);
                view.l_check = this._getCheckNum(view.data);
                view.l_pick = this._getPickNum(view.data);
                view.l_all = view.data.length;

                view_oppo.data = this._filterData(list_oppo.data, query_oppo);
                view_oppo.l_check = this._getCheckNum(view_oppo.data);
                view_oppo.l_pick = this._getPickNum(view_oppo.data);
                view_oppo.l_all = view_oppo.data.length;

                $el.find('.oas-transfer-item-wrap').empty().html(transferItemTpl({data: view.data, ori: 'bi'}));
                $el_oppo.find('.oas-transfer-item-wrap').empty().html(transferItemTpl({data: view_oppo.data, ori: this.options.direction}));
            }

            this._detectStatus(ori);
            
        },

        // 检测状态
        _detectStatus: function(ori) {
            var that = this;

            var $el_arr = this._getListEl(ori),
                list_arr = this._getListData(ori),

                $el = $el_arr[0],
                $el_oppo = $el_arr[1],
                list = list_arr[0],
                list_oppo = list_arr[1],
                view = this._getViewData(ori)[0],
                view_oppo = this._getViewData(ori)[1];

            var ori_oppo = (ori=='to-right') ? 'to-left' : 'to-right';
            /*
             * 单向穿梭状态判断
             * 1 全选和清空状态
             * 2 分栏数量状态统计
             */
            if(this.options.direction == 'uni') {

                if(!view_oppo.l_check) {
                    $el_oppo.next().find('i.clear').removeClass('on');
                } else {
                    $el_oppo.next().find('i.clear').addClass('on');
                }
                // 全选按钮状态判断
                if(view.l_check === view.l_pick ||  !view.l_pick) {
                    $el.next().find('i.all').removeClass('on');
                } else{
                    $el.next().find('i.all').addClass('on');
                }

                $el.next().find('span i.sta').text(view.l_all);
                $el_oppo.next().find('span i.sta').text(view_oppo.l_all);


            } else {
                /*
                 * 双向穿梭状态判断
                 * 1 分栏数量状态统计
                 * 2 切换按钮统计
                 */
                if(this.options.direction === 'bi' ) {

                    $('.to-switch.' + ori).removeClass('disabled').removeAttr('disabled');

                    if(!list.l_check) {
                        $el.next().find('input').removeAttr('checked').removeProp('checked');
                        $el.next().find('span').removeClass('half').text('共 ' + view.l_all + ' 个元素' );
                        $('.to-switch.' + ori).addClass('disabled').attr('disabled', 'disabled');
                    } else {
                        $el.next().find('span').addClass('half').text('已选 ' + list.l_check + ' / ' + view.l_all + ' 个元素' ).siblings('input').removeAttr('checked').removeProp('checked');

                        if(view.l_pick === view.l_check) {
                            $el.next().find('input').prop('checked',true).siblings('span').removeClass('half');
                        } 
                        $('.to-switch.' + ori).removeClass('disabled').removeAttr('disabled');
                    }

                     if(!list_oppo.l_check) {
                         $el_oppo.next().find('input').removeAttr('checked').removeProp('checked');
                        $el_oppo.next().find('span').text('共 ' + view_oppo.l_all + ' 个元素');
                        $('.to-switch.' + ori_oppo).addClass('disabled').attr('disabled', 'disabled');
                    } else {
                        $el_oppo.next().find('span').addClass('half').text('已选 ' + list_oppo.l_check + ' / ' + view_oppo.l_all + ' 个元素').siblings('input').removeAttr('checked').removeProp('checked');

                        if(view_oppo.l_pick === view_oppo.l_check) {
                            $el_oppo.next().find('input').prop('checked',true).siblings('span').removeClass('half');

                            $('.to-switch.' + ori_oppo).removeClass('disabled').removeAttr('disabled');
                        } 
                    }

                    if(!view.l_pick) {
                        $('.to-switch.' + ori).addClass('disabled').attr('disabled', 'disabled');
                        $el.next().find('input').attr('disabled', true);
                    }else {
                        $el.next().find('input').removeAttr('disabled');
                    }
                    if(!view_oppo.l_pick) {
                        $('.to-switch.' + ori_oppo).addClass('disabled').attr('disabled', 'disabled');
                        $el_oppo.next().find('input').attr('disabled', true);
                    } else {
                        $el_oppo.next().find('input').removeAttr('disabled');
                    }
                }

            }
        },
        // 获取当前操作栏list数据
        _getListData: function(ori) {
            var temp = [];
            if(ori === 'to-right') {
                temp[0] = this.lList;
                temp[1] = this.rList;
            } else {
                temp[0] = this.rList;
                temp[1] = this.lList;
            }
            return temp;
        },   
        // 获取当前操作栏view数据
        _getViewData: function(ori) {
            var temp = [];
            if(ori === 'to-right') {
                temp[0] = this.lView;
                temp[1] = this.rView;
            } else {
                temp[0] = this.rView;
                temp[1] = this.lView;
            }
            return temp;
        },
        // 获取当前操作栏wrap元素
        _getListEl: function(ori) {
            var temp = [];
            if(ori === 'to-right') {
                temp[0] = this.$leftList;
                temp[1] = this.$rightList;
            } else {
                temp[0] = this.$rightList;
                temp[1] = this.$leftList;
            }
            return temp;
        },

        // 获取视图已选元素个数
        _getCheckNum: function(list) {
            if(this.options.isTree && this.options.direction === 'uni') {
                 return _.filter(this.$leftList.oasTree('getCheckedNodes'), {'chosen': true}).length;
            }else {
                return _.filter(list, {checked: true}).length;
            }
            
        },
        // 获取视图可选元素个数
        _getPickNum: function(list) {
            if(this.options.isTree && this.options.direction === 'uni') {
                 return _.filter(list, function(n, i) {
                     return !n.disabled && n.chosen;
                 }).length;
            }else {
                return _.reject(list, {disabled: true}).length;
            } 
        },
        _getAllNum: function(list) {
            if(this.options.isTree && this.options.direction === 'uni') {
                 return _.filter(list, function(n, i) {
                     return n.chosen;
                 }).length;
            } else {
                return list.length;
            }
        },

        // 根据搜索条件过滤view
        _filterData: function(list, query) {
             if(query != '') {
                var temp = _.filter(list, function(n){
                    return n.label.indexOf(query) > -1;
                })
                return temp;
            } else {
                return list;
            }
        },
        // 更新list数据
        _changeList: function($el, list, change) {
            $el.each(function() {
                if(!$(this).is(':disabled')) {
                    // var _label = $(this).siblings('span').text();
                    var id = $(this).closest('.oas-transfer-item').data('id') + '';
                    _.forEach(list, function(n, k){
                        if(n.id == id) {
                            n.checked = change;
                            return;
                        }
                    })
                }
            })
        },
        // 初始化当前栏dom
        _initView: function($el, data, ori) {
            var dom = transferItemTpl({data: data, ori: ori});
            $el.find('.oas-transfer-item-wrap').empty().html(dom);
        },

        // 事件
		events: {
			//指定绑定事件的元素
			'target': function() {
				return this.$el;
			},
			// select-item选中事件
			'click .oas-transfer-item.bi': function(self, evt) {
                // 避免label触发两次点击事件
                var $input = $(self).find('input');
                if($(evt.target).is('input') || $input.is(':disabled')) {
                    return;
                }

                var options     = this.options,
                    ori         = $(self).closest('.oas-transfer-list').data('direction'),
                    id          = $(self).data('id') + '',
                    label       = $(self).data('label'),
                    $el         = this._getListEl(ori)[0],
                    $el_oppo    = this._getListEl(ori)[1],
                    $el_ft      = $el.next('.oas-transfer-list-foot'),
                    $el_oppo_ft = $el_oppo.next('.oas-transfer-list-foot'),
                    _list       = this._getListData(ori)[0],
                    _list_oppo  = this._getListData(ori)[1],
                    _view       = this._getViewData(ori)[0],
                    _view_oppo  = this._getViewData(ori)[1];

                if($input.is(':checked')) {
                    _list.l_check--;
                    _view.l_check--;
                } else {
                    _view.l_check++;
                    _list.l_check++;
                }

                // 改变list数据
                _.forEach(_list.data, function(n, k){
                    if(id == n.id) {
                        n.checked = !n.checked;
                        return;
                    }
                })

                // 单向穿梭
                if(options.direction === 'uni') {
                    if(_.find(_list_oppo.data, {'id': id})) {
                        _.remove(_list_oppo.data, {'id': id});
                    } else {
                        _list_oppo.data.push({'id': id, 'label': label, 'checked': true});
                    }
                }
                    
                this._refreshView(ori); // 刷新视图

                options.direction === 'uni' && this._emit('change', [this.lList.data, this.rList.data, this.lView.data, this.rView.data]); // 触发列表change事件

            },

            // 双向切换事件 ----------------
            'click .to-switch:not(.disabled)': function(self, evt) {
                var that = this;
                var options = that.options,
                    ori = $(self).data('direction'),
                    $el = that._getListEl(ori)[0], // src el
                    $el_oppo = that._getListEl(ori)[1], // dest el
                    list = that._getListData(ori)[0],
                    list_oppo = that._getListData(ori)[1],
                    view = that._getViewData(ori)[0],
                    view_oppo = that._getViewData(ori)[1];

                var removeData = _.remove(list.data, {checked: true});

                _.forEach(removeData, function(n) {
                    list_oppo.data.push({'id': n.id, 'label': n.label});
                })

                list.data = _.reject(list.data, {checked: true});

                list.l_check = _.filter(list.data, {checked: true}).length;
                list_oppo.l_check = _.filter(list_oppo.data, {checked: true}).length;

                // 渲染列表
                this._refreshView(ori);
                // 切换按钮及全选状态变更
                this._emit('change', [this.lList.data, this.rList.data, this.lView.data, this.rView.data]);

            },
            // 双向穿梭框全选/取消全选事件
            'click .select-opt': function(self, evt) {
                // 阻止input点击事件冒泡
                if($(evt.target).is('input') || $(self).find('input').is(':disabled')) {
                    return;
                }
                var ori = $(self).closest('.oas-transfer-list').data('direction'),
                    $el = this._getListEl(ori)[0], 
                    list = this._getListData(ori)[0],
                    view = this._getViewData(ori)[0],
                    $el_pick = $el.find('input').not(':disabled'),
                    _check = view.l_check;// 当前视图已选元素个数

                if(view.l_check != view.l_pick) {
                    $('.to-switch.' + ori).removeClass('disabled').removeAttr('disabled');
                    $el_pick.prop('checked',true);
                    this._changeList($el_pick, list.data, true); // 变更list数据

                    view.l_check = view.l_pick;
                    list.l_check += (view.l_check - _check);
                    $(self).find('input').siblings('span').removeClass('half').text('已选 ' + list.l_check + ' / ' + view.l_all + ' 个元素' );

                } else {
                    $el_pick.attr('checked',false);
                    $('.to-switch.' + ori).addClass('disabled').attr('disabled', 'disabled');
                    this._changeList($el_pick, list.data, false); // 变更list数据

                    view.l_check = 0;
                    list.l_check -= _check;
                    if(list.l_check) {
                        $(self).find('span').addClass('half').text('已选 ' + list.l_check + ' / ' + view.l_all + ' 个元素' );
                    } else {
                        $(self).find('span').removeClass('half').text('共 ' + view.l_all + ' 个元素' );
                    }
                }
            },

            // 单向穿梭框全选
            'click .oas-transfer-list-foot i.all.on':function(self, evt) {
                var that = this;
                //暂存元素
                var options = this.options;
                var $el = this._getListEl('to-right')[0];
                var $el_oppo = this._getListEl('to-right')[1];
                var list = this._getListData('to-right')[0];
                var list_oppo = this._getListData('to-right')[1];
                var view = this._getViewData('to-right')[0];
                var view_oppo = this._getViewData('to-right')[1];

                query = '';
                if(this.options.showSearch) {
                    query = $el.siblings('.oas-transfer-list-search').find(' input').val().trim();
                }

                // 树结构
                if(options.isTree) {
                    // _.filter(checkChangeNodes, {'chosen': true});
                    var nodesArr = this.$leftList.oasTree('getAllTreeNode');
                    var ids = [];
                    _.each(nodesArr, function(n, i) {
                        if(n.label.indexOf(query) > -1 && !n.disabled) {
                            ids.push(n.id);
                        }
                    });
                    that.$leftList.oasTree('checkedByIds',ids,true);
                    return;
                } 

                $el.find('input').not(':disabled').not(':checked').attr('checked', true);

                // list变更 ---- 更改
                _.forEach(view.data, function(n, k) {
                    if(!n.disabled) {
                        var id = n.id;
                        n.checked = true;
                        if(!_.find(list_oppo.data, {id: n.id})) {
                            list_oppo.data.push(n);
                        }
                        _.forEach(list.data, function(v, i) {
                            var _id = v.id;
                            if(_id === id) {
                                n.checked = true;
                            }
                        })
                    }
                    
                })

                this._refreshView('to-right'); // 刷新穿梭框
                this._emit('change', [this.lList.data, this.rList.data, this.lView.data, this.rView.data]);

                $el_oppo.next().find('i.clear')
                    .addClass('on')
                    .end().find('.sta').text(view_oppo.data.length);

                $(self).removeClass('on').siblings().find('.sta').text(view.data.length);

            },
            // 单向穿梭框全部清除
            'click .oas-transfer-list-foot .clear.on':function(self, evt) {
                // 暂存元素
                var options = this.options,
                    that = this,
                    $el = this._getListEl('to-right')[0],
                    $el_oppo = this._getListEl('to-right')[1],
                    list = this._getListData('to-right')[0],
                    list_oppo = this._getListData('to-right')[1],
                    view_oppo = this._getViewData('to-right')[1];

                if(options.isTree) {
                    _.forEach(view_oppo.data, function(n, k) {
                        var pNodes = that.$leftList.oasTree('searchAllparentsById',n.id);
                        var pids = [];
                        _.forEach(pNodes,function(n) {
                            pids.push(n.id);
                        })
                        pids.push(n.id);
                        that.$leftList.oasTree('checkedByIds',pids, false);
                    })
                    return;
                }

                // 改变左侧list
                _.forEach(view_oppo.data, function(n, k) {
                    var _id = n.id;
                    list_oppo.data = _.reject(list_oppo.data, {'id': n.id});
                    _.forEach(list.data, function(n, k){
                        if(n.id == _id) {
                            n.checked = false;
                            list.l_check--;
                        }
                    })
                })
                // 改变右侧list

                // view.data = _.reject(view_oppo.data, {'checked': true});

                view_oppo.l_check = 0;
                this._refreshView('to-right');
                this._emit('change', [this.lList.data, this.rList.data, this.lView.data, this.rView.data]);

                $el_oppo.next().find('.sta').text(view_oppo.l_check);
                $el.next().find('i.all').addClass('on');
                $(self).removeClass('on');
            },
            // 单向穿梭框单个清除
            'click .oas-transfer-item .rm-item':function(self, evt) {
                var that = this;
                
                var label = $(self).closest('li').data('label');
                var id =  $(self).closest('li').data('id') + '';

                if(this.options.isTree) {
                    var pNodes = that.$leftList.oasTree('searchAllparentsById', id);
                    var pids = [];
                    _.forEach(pNodes,function(n) {
                        pids.push(n.id);
                    })
                    pids.push(id);

                    this.$leftList.oasTree('checkedByIds',pids, false);
                    // $(self).remove();
                    return;
                }

                _.forEach(this.lList.data, function(n, i) {
                    if(id == n.id) {
                        n.checked = false;
                    }
                })
                this.rList.data = _.reject(this.rList.data, {'id': id});
                
                this._refreshView('to-right'); // 单向只刷新右侧
                this._emit('change', [this.lList.data, this.rList.data, this.lView.data, this.rView.data]);
                
                // 更新显示状态
                this.$rightList.next('.oas-transfer-list-foot').find('span i.sta').text(this.rView.l_pick);

                if(!this.rView.l_pick) {
                    this.$rightList.next('.oas-transfer-list-foot').find('i.clear').removeClass('on');
                } else {
                    this.$rightList.next('.oas-transfer-list-foot').find('i.clear').addClass('on');
                }

                if(this.lView.l_check === this.lView.l_pick || !this.lView.l_pick) {
                    this.$leftList.next('.oas-transfer-list-foot').find('i.all').removeClass('on');
                } else{
                    this.$leftList.next('.oas-transfer-list-foot').find('i.all').addClass('on');
                }
            },
            // 搜索
            'keyup .oas-transfer-list-search input':function(self, evt) {
                var ori = $(self).closest('.oas-transfer-list').data('direction'),
                    $el = this._getListEl(ori)[0], // 当前列表wrap
                    query = $(self).val().trim();

                var _list = this._getListData(ori)[0]; // list data
                var _view = this._getViewData(ori)[0]; // view data

                checked = _list.l_check; // list 已选个数

                _view.data = this._filterData(_list.data, query); // 搜索过滤列表

                _view.l_check = this._getCheckNum( _view.data);
                _view.l_pick = this._getPickNum( _view.data);
                _view.l_all =  this._getAllNum(_view.data);

                if(this.options.direction === 'uni' && ori === 'to-left') {
                    this._initView($el,  _view.data, 'uni'); // 渲染列表
                } 
                // else if(ori === 'to-right' && this.options.isTree && this.options.direction === 'uni') {
                //     var showIds = this.$leftList.oasTree('search', query);
                //     this._emit('search',[query, _view.data]);
                //     // return;
                // } 
                else{
                    this._initView($el, _view.data);
                }

                // 树结构特殊处理 
                if(ori === 'to-right' && this.options.isTree && this.options.direction === 'uni') {
                    var showIds = this.$leftList.oasTree('search', query);
                    // this._emit('search',[query, _view.data]);
                    // return;
                }
                // 判断已选状态
                if(this.options.direction === 'bi') {
                    if(!_list.l_check) {
                        $el.next().find('span')
                            .removeClass('half')
                            .text('共 ' + _view.l_all + ' 个元素' );
                        $('.to-switch.' + ori).addClass('disabled').attr('disabled', 'disabled').attr('disabled', 'disabled');
                    } else {
                        $el.next().find('span')
                            .addClass('half')
                            .text('已选 ' + _list.l_check + ' / ' + _view.l_all + ' 个元素' )
                        .siblings('input').removeAttr('checked').removeProp('checked');

                        // 所选item达到可选最大个数
                        if(_view.l_pick === _view.l_check) {
                            $el.next().find('input')
                                .prop('checked',true)
                            .siblings('span')
                                .removeClass('half');
                        }
                    }
                    // 是否disabled全选
                    if(!_view.l_pick) {
                        $el.next().find('input').attr('disabled',true);
                    } else {
                        $el.next().find('input').removeAttr('disabled');
                    }
                } else {

                    if(_view.l_check === _view.l_pick || !_view.l_pick) {
                        $el.next().find('i.all').removeClass('on');
                    } else{
                        $el.next().find('i.all').addClass('on');
                    }

                    if(!_view.l_pick) {
                        $el.next().find('i.clear').removeClass('on');
                    } else {
                        $el.next().find('i.clear').addClass('on');
                    }
                    $el.next().find('.sta').text(_view.l_all);
                }
                // }
                this._emit('search', [query, _view.data]);
            },

            'click .oas-transfer-list-search .search-icon': function(self, evt) {
                var $input = $(self).siblings('input');
                if($(self).hasClass('oasicon-fail')) {
                    $input.val('');
                }
                $(self).siblings('input').trigger('keyup');
            },
            // 业务事件触发
            'click .oas-transfer-list-head .btn': function(self,evt) {
                this._emit('business',[self,this.lList.data, this.rList.data,this.lView.data, this.rView.data]);
                this.options.business_cb && business_cb(self,this.lList.data, this.rList.data);
            }
        },
		// 组件对外方法
		invoke: {
            //重置穿梭框面板
			reset: function() {
				var that = this;
				this._preRenderData(this.options.fences);
				this._refresh();
			},
			//设置/获取transfer选项面板数据
			data: function(data) {
				var options = this.options;
				if (data) {
					if (_.isArray(data)) {
                        this.$leftList.siblings('.oas-transfer-list-head').find('.title').text(data[0].title);
                        this.$rightList.siblings('.oas-transfer-list-head').find('.title').text(data[1].title);

						this._preRenderData(data);
					} else {
						console.log(this.uiName + '("data")方法的参数不是一个数组');
					}
				} else {
					return [this.lList.data, this.rList.data];
				}
				this._refresh();
			},
            destroy : function() {
                this.$el.unbind('.' + this.uiName).removeData(this.uiName);
                this.$el.remove();
                this.$el.off("click.oasTransfer");
                this.$el.off("keyup.oasTransfer");

                for(var i=0,len=oasTransfer.allTransfer.length;i<len;i++) {
                    if(oasTransfer.allTransfer[i]===this) {
                        oasTransfer.allTransfer.splice(i,1);
                    }
                }
            }
		}
    });
    var oasTransfer = {};
	oasTransfer.allTransfer = [];
}
},{"./no_data.tpl":94,"./transfer.tpl":95,"./transfer_item.tpl":96}],94:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"42880c5c1a73674d501a95c889b058f9"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/transfer/no_data','<div class="oas-no-data"> <span class="oas-no-dataImg"></span> <span class="oas-no-dataTip">对不起，暂无数据</span> </div>');
},{"../../../lib/runtime/runtime":7}],95:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"cb97965abc57d3f397678b824fefb6b9"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/transfer/transfer',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,options=$data.options,$each=$utils.$each,item=$data.item,$index=$data.$index,$out='';$out+='<div class="oas-transfer-list to-right" data-direction="to-right" style="width:';
$out+=$escape(options.width);
$out+='px;"> <div class="oas-transfer-list-head"> <span class="title" title="';
$out+=$escape(options.fences[0].title);
$out+='">';
$out+=$escape(options.fences[0].title);
$out+='</span> ';
if(options.businessBtn){
$out+=' <button title="';
$out+=$escape(options.businessBtn);
$out+='" class="btn btn-default">';
$out+=$escape(options.businessBtn);
$out+='</button> ';
}
$out+=' </div> ';
if(options.showSearch){
$out+=' <div class="oas-transfer-list-search form-clear"> <input type="text" class="form-control" placeholder="';
$out+=$escape(options.searchPlaceholder);
$out+='"> <i class="search-icon oasicon oasicon-search"></i> </div> ';
}
$out+=' <div class="oas-transfer-list-body" style="height:';
$out+=$escape(options.height - 80);
$out+='px"> <ul class="oas-transfer-item-wrap"> </ul> </div> <div class="oas-transfer-list-foot"> ';
if(options.direction == 'bi'){
$out+=' <label class="select-opt beauty-check"> <input type="checkbox" value="" disabled> <span>共 ';
$out+=$escape(options.fences[0].data.length);
$out+=' 个元素</span> </label> ';
}else{
$out+=' <span>共 <i class="sta ';
$out+=$escape(options.TreeDataLen);
$out+='">';
if(!options.isTree){
$out+=' ';
$out+=$escape(options.fences[0].data.length);
$out+=' ';
}else{
$out+=' ';
$out+=$escape(options.TreeDataLen);
$out+=' ';
}
$out+='</i> 个元素</span> <i class="all on">全部</i> ';
}
$out+=' </div> </div> <!-- ';
if(options.direction == 'bi'){
$out+='options.height';
}else{
$out+='options.height';
}
$out+=' --> <div class="oas-transfer-operation" style="padding: ';
if(options.direction == 'bi'){
$out+=$escape(options.height/2 -33);
}else{
$out+=$escape(options.height/2 -14);
}
$out+='px 10px 0"> ';
if(options.direction == 'bi'){
$out+=' <button class="btn btn-info to-right to-switch disabled" disabled="disabled" data-direction="to-right"> ';
if(options.transferBtn[0]){
$out+='<span class="transfer-btn" title="';
$out+=$escape(options.transferBtn[0]);
$out+='">';
$out+=$escape(options.transferBtn[0]);
$out+='</span>';
}
$out+=' <i class="oasicon oasicon-arrow-right"></i> </button> <button class="btn btn-info to-left to-switch disabled" disabled="disabled" data-direction="to-left"> <i class="oasicon oasicon-arrow-left"></i> ';
if(options.transferBtn[1]){
$out+='<span class="transfer-btn" title="';
$out+=$escape(options.transferBtn[1]);
$out+='">';
$out+=$escape(options.transferBtn[1]);
$out+='</span>';
}
$out+=' </button> ';
}else{
$out+=' <i class="arrow"></i> ';
}
$out+=' </div> <div class="oas-transfer-list to-left" data-direction="to-left" style="width:';
$out+=$escape(options.width);
$out+='px;"> <div class="oas-transfer-list-head"> <span class="title" title="';
$out+=$escape(options.fences[1].title);
$out+='">';
$out+=$escape(options.fences[1].title);
$out+='</span> </div> ';
if(options.showSearch){
$out+=' <div class="oas-transfer-list-search form-clear"> <input type="text" class="form-control" placeholder="';
$out+=$escape(options.searchPlaceholder);
$out+='"> <i class="search-icon oasicon oasicon-search"></i> </div> ';
}
$out+=' <div class="oas-transfer-list-body" style="height:';
$out+=$escape(options.height - 80);
$out+='px"> <ul class="oas-transfer-item-wrap"> <!-- ';
if(options.fences && options.fences.length){
$out+=' ';
$each(options.fences[1].data,function(item,$index){
$out+=' ';
if(options.direction == 'bi'){
$out+=' <li class="oas-transfer-item bi" data-label="';
$out+=$escape(item.label);
$out+='"> <label> <input type="checkbox" value="';
$out+=$escape(item.label);
$out+='" ';
if(item.disabled){
$out+='disabled';
}
$out+='> <span>';
$out+=$escape(item.label);
$out+='</span> </label> </li> ';
}
$out+=' ';
});
$out+=' ';
}
$out+=' --> </ul> </div> <div class="oas-transfer-list-foot"> ';
if(options.direction === 'bi'){
$out+=' <label class="select-opt beauty-check"> <input type="checkbox" value="" disabled> <span>共 ';
$out+=$escape(options.fences[1].data.length);
$out+=' 个元素</span> </label> ';
}else{
$out+=' <span>已选择 <i class="sta">0</i> 个元素</span> <i class="clear">清空</i> ';
}
$out+=' </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],96:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"ae63fb85d3862c762d4da252ae83f4d5"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/transfer/transfer_item',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,data=$data.data,$each=$utils.$each,item=$data.item,$index=$data.$index,ori=$data.ori,$escape=$utils.$escape,$out='';if(data && data.length){
$out+=' ';
$each(data,function(item,$index){
$out+=' ';
if(ori === 'uni'){
$out+=' <li class="oas-transfer-item uni" data-id="';
$out+=$escape(item.id);
$out+='" data-label="';
$out+=$escape(item.label);
$out+='"> <span title="';
$out+=$escape(item.label);
$out+='">';
$out+=$escape(item.label);
$out+='</span> <i class="rm-item oasicon oasicon-fail"></i> </li> ';
}else{
$out+=' <li class="oas-transfer-item bi" data-id="';
$out+=$escape(item.id);
$out+='" data-label="';
$out+=$escape(item.label);
$out+='"> <label class="beauty-check"> <input type="checkbox" value="';
$out+=$escape(item.label);
$out+='" ';
if(item.disabled){
$out+='disabled';
}
$out+=' ';
if(item.checked){
$out+='checked';
}
$out+='> <span title="';
$out+=$escape(item.label);
$out+='">';
$out+=$escape(item.label);
$out+='</span> </label> </li> ';
}
$out+=' ';
});
$out+=' ';
}else{
$out+=' <div class="oas-no-data"> <span class="oas-no-dataImg"></span> <span class="oas-no-dataTip">无数据</span> </div> ';
}
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],97:[function(require,module,exports){

var selectTpl = require("./select.tpl"),
	multiItemTpl = require("./multipleItem.tpl");

module.exports = function(){
	var oasTreeSelectArr = [];
	$.oasUiFactory("oasTreeSelect", {
		VERSION: '1.0.0',
		options: { 
			// 是否支持多选 （当设置treeCheckable时自动变为true） 
			isMultiple: false,
			// 是否禁用select 
			disabled: false,
			// select宽度
			width: 250,
			// 选项面板高度
			height: 181,
			// 对齐方式
			align: 'left',
			// 选项面板相对于select偏移的x, y
			offset: [0, 6],
			// 选择框默认提示文字 
			placeholder: '请选择',
			// 搜索框默认文字
			searchPlaceHolder: '请输入',
			// 是否有根节点
			root: null,
			//树的数据集合:[{icon:"",label:"",id:"",pid:"",checked:false,selected:false,disabled:false,isAdd:false,isEdit:true,isDelete:true;hasChild:true;}]
			data: [],
			//树数据的数据形式，“array”为一维数组形式，“tree”树形形式; 
			dataType:"array",
			// 单选默认选中的节点
			selectId: '',
			// 多选默认选中的id
			checkedIds:[],
			// 树父子节点的是否存在关联关系
			isRel: true,
			// 树有大小两种无数据样式0:小样式，1：大样式
			noDataStyle:0,
			// 组件初始化展示方式:0:展示一级菜单其余全部收起；1:全部展开，显示所有节点;2:收起全部
			showType: 1,
			// 是否支持搜索
			isSearch: false,
			// 是否大数据 
			bigData: false,
			// 获取数据url,`通过url获取数据时使用` 
			url: null,
			//初始化时是否全部折叠(大数据模式下该属性失效)
			isInitOpen: true,
		},
		_create: function(){
			this._preRenderData();
			oasTreeSelectArr.push(this.$el);
		},
		
		_preRenderData: function() {
			var that = this,
				options = this.options;	

			// 树组件初始化属性
			options.tree = {
				root: options.root,
				data: options.data,
				dataType:options.dataType,
				checkType: options.isMultiple ? 'checkbox' : null,//
				checkedIds:options.checkedIds, 
				noDataStyle:options.noDataStyle,
				checkboxEffect: options.isRel ? { "Y": "ps", "N": "ps" } : {"Y":"", "N":""},
				placeHolder: options.searchPlaceHolder,
				showType: options.showType,
				height: this._getTreeHeight(),
				isSearch: options.isSearch,
				bigData: options.bigData,
				url: options.url,
				isInitOpen: options.isInitOpen,
				icon: options.icon
			}

			this._initData = $.extend(true, {}, this.options, {chosen: null, chosenArray : []});
			
			//整合render、selected项数据
			this._processData(this._initData);
			// 初始化dom
			this._createDom();
			// 暂存hd高度,用于改变dropdown定位位置
			this.hdHeight = this.$select_el.find('.select-hd').height();	
		},
		_processData: function(data){
			this._renderData = $.extend(true, {}, data); // clone InitData
		},
		 // 远程获取数据
        // _initModel: function(){
		// 	var that = this,
		// 		options = this.options;
		// 	if(that.options.url === '' ) {
		// 		that._iCall('data',[options.data]);
		// 		return;
		// 	}

		// 	that._model = oasisl.baseModel.extend({
		// 		statics: {
		// 			baseUrl: that.options.url
		// 		}
		// 	});
		// 	that._model.list().then(function(res){
		// 		if(res.code === 0){
        //             options.tree.data = res.data;
		// 		}
		// 		that._iCall('data',[options.data]);
		// 	});
		// },
		// 创建dom
		_createDom: function() {
			var that = this,
				options = this.options;
			
			this.$el.addClass('oas-select oas-tree-select dropdown').empty().html(selectTpl(this._renderData));
			this.$select_el = this.$el;
			this.$treeWrap = this.$select_el.find('.select-bd');
			this.$placeHolder = this.$select_el.find('.select-placeholder');

			this.$select_el.css({
				width: options.width
			});
			// this._initModel();
			//初始化选项面板
			this._dropDown();

			// 多选清除事件
			this.$select_el.find('.select-hd').on('click','.oas-select-multiple-delete',function(){
				if(that._renderData.disabled || $(this).parent().hasClass('disabled')) {
					return;
				}
				var $self = $(this);
				var obj = {
					id: $self.parents('li').attr('data-id'),
					pid: $self.parents('li').attr('data-pid'),
					label: $self.parents('li').attr('data-label')
				}
				// 树取消勾选
				// 若已选项为空，则显示placeholder
				if($self.parents('li').siblings('li').length === 0){
					that.$placeHolder.show();
				}
				$self.parents('li').remove();

				if(that.options.isRel) {
					var allCidsArr = that.$select_el.find('.select-bd').oasTree('searchAllCidsById',obj.id);
					var allParsArr = that.$select_el.find('.select-bd').oasTree('searchAllPidsById',obj.id); // 关联节点，清除的同时父节点也要反选
					allCidsArr = allCidsArr.concat(allParsArr);
					allCidsArr.push(obj.id);
					that.$select_el.find('.select-bd').oasTree('checkedByIds',allCidsArr,false);
					
				} else {
					that.$select_el.find('.select-bd').oasTree('changeCheckedStatus',obj.id,false);
				}

				var cHeadH = that.$select_el.find('.select-hd').outerHeight();
				if(that.hdHeight !== cHeadH){
					that.$select_el.find('.oas-select-bd').css('top',cHeadH + 6);
					that.hdHeight = cHeadH;
				}

				_.remove(that._renderData.chosenArray, function(n) {
					// return n.label == obj.label;
					return n.id == obj.id;
				});
				
				return false;
			})
			// 单选清除事件
			this.$select_el.find('.select-hd').on('click','.clear-icon',function(){
				if(that._renderData.disabled) {
					return;
				}
				var $self = $(this);
				$self.siblings('.select-value').text('');
				that.$select_el.find('li > a').removeClass('current');
				$self.hide();	
				that._renderData.chosen = null;		
				return false;
			})	
		},
		// 获取树内容高度
		_getTreeHeight: function() {
			var treeHeight = this.options.height;
			if(this.options.isSearch) {
				treeHeight -= 40;
			} 
			return treeHeight;
		},
		// 初始化已选项渲染
		_initCheckedNodes: function() {
			var options = this.options;
			if(options.isMultiple) {
				this._renderData.chosenArray = this.$select_el.find('.select-bd').oasTree('getCheckedNodes');
				this._renderData.chosenArray && this.$select_el.find('.select-hd .oas-select-multiple-ul').empty().html(multiItemTpl({data: this._renderData.chosenArray}));
				this._renderData.chosenArray.length	? this.$placeHolder.hide() : this.$placeHolder.show();
			} else {
				this.$select_el.find('.select-bd').oasTree('selectNode',options.selectId);
			}
		},
		//调用dropdown初始化select选项面板
		_dropDown: function() {
			var that = this,
				options = this.options,
				align = options.align, // 对齐方式
				headerH, // head高度
				dropStyle = {};

			if (this._renderData.disabled) {
				this.$select_el.addClass('disabled');
				return;
			}

			this.$select_el.find('.select-hd').oasDropdown({
				isClickable : true,
				miss: true,
				offset: options.offset
			});
			// 初始化树data
			this.$treeWrap.data('oasTree') ? this.$treeWrap.oasTree('data', this._renderData.data) : this.$treeWrap.empty().oasTree(this.options.tree)
				.on("select.oasTree",function(ev,node){
					var $self = $(self);
					if (node.disabled || options.isMultiple) { 
						return false;
					}
					that.$placeHolder.hide();
					that._select(node);
					that.$select_el.find('.select-value').html(node.label);
				}).on("checkChange.oasTree",function(e,node,checkedNodes){
					options = that.options;
					if (node.disabled) { 
						return false;
					}

					var checkedNodes = $(this).oasTree('getCheckedNodes');

					that._initData.chosenArray = that._renderData.chosenArray = checkedNodes;  // 已选节点
					that._mergeData();
					// this._initCheckedNodes();

					that.$select_el.find('.select-hd .oas-select-multiple-ul').empty().html(multiItemTpl({data: that._renderData.chosenArray}));
					checkedNodes.length && that.$placeHolder.hide();
					that._select();

					// 当input高度发生变化时，调整面板的位置top值。
					var cHeadH = that.$select_el.find('.select-hd').outerHeight();
					if(that.hdHeight !== cHeadH){
						that.$select_el.find('.oas-select-bd').css('top',cHeadH + 6);
						that.hdHeight = cHeadH;
					}
				}).on("search.oasTree",function(e, nodes) {
					that._emit('search', [nodes]);
				});
			this._mergeData(); // 归并数据
			this._initCheckedNodes(); // 初始化选中状态

			headerH = this.$select_el.find('.select-hd').outerHeight();
			// dropdowm位置设置
			dropStyle = {
				width: this.options.width,
				maxHeight: this.options.height,
				left: +this.options.offset[0] ? 0 - this.options.offset[0] : 0,
				top: +this.options.offset[1] ? + this.options.offset[1] + headerH : headerH
			}
			if (align == 'right') {
				dropStyle.left = 'inherit';
				dropStyle.right = +this.options.offset[0] ? 0 - (+this.options.offset[0]) : 0;
			}

			this.$select_bd = this.$select_el.find('.oas-select-bd').css(dropStyle);

			// 设置searchinput
			this.$select_el.find('.searchInput').css({
				width: this.options.width - 30
			})
	
			this.$select_el.find('.select-hd').on('show.oasDropdown',function(ev,$el) {
				// 触发打开事件
				$el.find('.oasicon-desc').removeClass('oasicon-desc').addClass('oasicon-asc');
				that._emit('open',[that.$select_el]);
			});
			this.$select_el.find('.select-hd').on('hide.oasDropdown',function(ev,$el) {
				$el.find('.oasicon-asc').removeClass('oasicon-asc').addClass('oasicon-desc');
				that._emit('close',[that.$select_el]);
			});
		},
		_mergeData: function() {
			var that = this;
			var ace_id = this.$select_el.find('.select-bd').oasTree('getChildListById',-1);// 当前顶级节点
			if(this.options.isRel) {
				_.forEach(ace_id, function(n) {
					that._dealTreeLayer(n.id);// 获取应渲染的节点集合
				}) 
			} 
		},
		//销毁选项面板
		_destroyDropDown: function() {
			if (this.$select_el.find('.select-hd').data('oasDropdown')) {
				this.$select_el.oasTreeSelect('close');
				this.$select_el.find('.select-hd').oasDropdown('destroy');
				if(this.$treeWrap.data('oasTree')) {
					this.$treeWrap.unbind('.oasTree').removeData('oasTree');
				}
			}
		},
		// 设置选中项
		_select: function(obj) {
			var list = this._renderData.list,
				chosenBak = null;
			if(!this.options.isMultiple && arguments.length){
				chosenBak = $.extend(true, {}, this._renderData.chosen);
				this._renderData.chosen = obj;
				//选项变化事件
				if (!chosenBak || chosenBak.id !== this._renderData.chosen.id) {
					this._emit('change', [this.$select_el, this._renderData.chosen]);
				} 
				this._emit('select', [this.$select_el, this._renderData.chosen]); 
			} else {
				this._emit('change', [this.$select_el, this._renderData.chosenArray]);
			}
		},
		
		_reload: function() {
			//销毁选项面板
			this._destroyDropDown();
			this._dropDown();
		},
		// 多选关联节点递归合并
		_dealTreeLayer: function(pid) {
			var that = this;
			var childList = this.$select_el.find('.select-bd').oasTree('getChildListById',pid);
			if(!childList) {  // 若是根节点则return
				return;
			}
			// 所有选中的pid分组集合
			_.forEach(childList, function(eachChild, index) {
				that._dealTreeLayer(eachChild.id);
			});

			var currCheckNode = _.filter(this._renderData.chosenArray,{'pid': pid}); // 已选pid的所有子节点
			if(currCheckNode) {
				if(childList.length == currCheckNode.length) {
					this._renderData.chosenArray = _.reject(this._renderData.chosenArray, {pid: pid});
				} else {
					this._renderData.chosenArray = _.reject(this._renderData.chosenArray, {id: pid});
				}
			}
		},
		events: {
			//指定绑定事件的元素
			'target': function() {
				if (this.options.container) {
					return $(this.options.container).find('.' + this.randomClass);
				}else{
					return this.$select_el;
				}
			},
			'mouseover .select-hd': function(self, e) {
				var $self = $(self);
				//??
				if(this.options.isMultiple || $('.select-value').text() == '') {
					return;
				}
				$self.find('.clear-icon').show().siblings('.drop-icon').hide();
			},
			'mouseout .select-hd': function(self, e) {
				var $self = $(self);
				$self.find('.clear-icon').hide().siblings('.drop-icon').show();
			}
		},
		invoke: {
			//重置select选项面板,!!
			reset: function() {
				this._renderData = this._initData;
				this._reload();
			},
			destroy: function() {
				this.$el.unbind('.' + this.uiName).removeData(this.uiName);
				for(var i=0,len=oasTreeSelectArr.length;i<len;i++) {
                    if(oasTreeSelectArr[i]===this.$el) {
                        oasTreeSelectArr.splice(i,1);
						this.$el.remove();
                    }
                }
			},
			//打开select选项面板
			open: function() {
				if (this.$select_el.find('.select-hd').data('oasDropdown')) {
					this.$select_el.find('.select-hd').oasDropdown('open');
				} else {
					console.warn('disabled状态下不可操作面板');
				}				
			},
			//关闭select选项面板
			close: function() {
				if (this.$select_el.find('.select-hd').data('oasDropdown')) {
					this.$select_el.find('.select-hd').oasDropdown('close');
				} else {
					console.warn('disabled状态下不可操作面板');
				}
			},
			//设置select选项面板数据
			data: function(data) {
				var options = this.options;
				if (data) {
					if (_.isArray(data)) {
						console.log(this._renderData)
						this._renderData.data = data;
						this._dropDown();
					} else {
						console.warn(this.uiName + '("data")方法的参数不是一个数组');
					}
				} else {
					console.warn(this.uiName + 'data只能设置select选项面板数据');
					return;
				}
			},
			//无参数时返回选中的select数据，有参数时设置参数数据为选中状态
			selectNode: function(nodeId) {
				if (_.isString(nodeId) && !this.options.isMultiple) {
					this.$select_el.find('.select-bd').oasTree('selectNode',nodeId);
				} else {
					console.warn('仅适用于单选模式');
				}
			},
			//设置select是否可用
			disabled: function(disable) {
				if (disable) {
					this._renderData.disabled = true;
					this.$select_el.addClass('disabled');
					this.$treeWrap.oasTree('disable',true);
				} else {
					this._renderData.disabled = false;
					this.$select_el.removeClass('disabled');
				}
				this._reload();
			},
			//获取选中的节点
			getChosenNodes : function(){
				if(this.options.isMultiple){
					return this._renderData.chosenArray;
				}else{
					return this._renderData.chosen;
				}
			},
			// 设置某节点的状态 status true为选中，false为取消选中| id(String),status(boolean)
			changeCheckedStatus: function(id, status) {
				this.$treeWrap.oasTree('changeCheckedStatus',id, status);
			},
			// 通过id数组批量修改节点状态 status true为选中，false为取消选中| ids(array),status(boolean)
			checkedByIds: function(idArr, status) {
				this.$treeWrap.oasTree('checkedByIds',idArr, status);
			},
			// 修改全部节点的状态 status true为选中，false为取消选中| status(boolean)
			checkedAll: function(status) {
				this.$treeWrap.oasTree('checkedAll', status);
			},
			// 返回渲染后的树节点集合(只有根节点其中childList中包含子节点,tree的形式)
			getAllTreeNodes: function() {
				return this.$treeWrap.oasTree('getAllTreeNodes');
			},
			// 返回渲染后的树节点集合(array的形式)  
			getAllTreeNode: function() {
				return this.$treeWrap.oasTree('getAllTreeNode');
			},
			// 根据id返回树节点
			getNodeById: function(id) {
				return this.$treeWrap.oasTree('getNodeById',id);
			},
			// 获取父节点与子节点的映射  
			getPid2ChildList: function() {
				return this.$treeWrap.oasTree('getPid2ChildList');
			},
			// 通过id获取子节点
			getChildListById: function(id) {
				return this.$treeWrap.oasTree('getChildListById',id);
			},
			// 查找所有上级节点id
			getAllPidsById: function(id) {
				return this.$treeWrap.oasTree('searchAllPidsById',id);
			},
			// 返回节点对应的所有上级父节点
			getAllparentsById: function(id) {
				return this.$treeWrap.oasTree('searchAllparentsById',id);
			},
			// 子节点id到父节点集合（含父节点的节点）
			getId2ParentList: function(id) {
				return this.$treeWrap.oasTree('getId2ParentList',id);
			},
			// 通过id查找所有子节点id
			getAllCidsById: function(id) {
				return this.$treeWrap.oasTree('searchAllCidsById',id);
			},
			// 通过id查找所有子节点
			getAllchildsById: function(id) {
				return this.$treeWrap.oasTree('searchAllchildsById',id);
			},
			// 获取id到子节点的映射
			getId2ChildsList: function(id) {
				return this.$treeWrap.oasTree('getId2ChildsList',id);
			},
			// 根据搜索的label 查找所有需要展示的节点id
			searchShowIds: function(id) {
				return this.$treeWrap.oasTree('searchShowIds',id);
			},
			// 根据id设置某个节点的展开关闭
			setNodeClosedById: function(id) {
				return this.$treeWrap.oasTree('setNodeClosedById',id);
			},
			searchRender: function(id) {
				this.$treeWrap.find('.searchInput').val(id);
				return this.$treeWrap.oasTree('search',id);
			}
		}
	});
}
},{"./multipleItem.tpl":98,"./select.tpl":99}],98:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"8ce3a924b2088badf2c482dbf8246170"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/treeSelect/multipleItem',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$each=$utils.$each,data=$data.data,$value=$data.$value,$index=$data.$index,$escape=$utils.$escape,$out='';$each(data,function($value,$index){
$out+=' <li class="oas-select-multiple-input-selected ';
if($value.disabled){
$out+='disabled';
}
$out+='" data-label=\'';
$out+=$escape($value.label);
$out+='\' data-pid=\'';
$out+=$escape($value.pid);
$out+='\' data-id=\'';
$out+=$escape($value.id);
$out+='\'> ';
$out+=$escape($value.label);
$out+=' <i class="oasicon oasicon-delete oas-select-multiple-delete"></i> </li> ';
});
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],99:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"b75c9ec0c4099e7783217c9bbfc868ab"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/treeSelect/select',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,disabled=$data.disabled,chosen=$data.chosen,isMultiple=$data.isMultiple,$escape=$utils.$escape,placeholder=$data.placeholder,$out='';$out+='<div class="select-hd';
if(disabled){
$out+=' disabled';
}
$out+=' ';
if(chosen){
$out+=' selected';
}
$out+=' ';
if(isMultiple){
$out+=' multiple-hd';
}
$out+='" role="button" data-target="#" > ';
if(isMultiple){
$out+=' <ul class="oas-select-multiple-ul clearfix"></ul> ';
}else{
$out+=' <span class="select-value">';
if(chosen){
$out+=$escape(chosen.label);
}
$out+='</span> <a class ="oasicon oasicon-desc drop-icon"></a> <a class ="oasicon oasicon-fail clear-icon"></a> ';
}
$out+=' <span class="select-placeholder">';
$out+=$escape(placeholder);
$out+='</span> </div> <div class="oas-select-bd dropdown-menu" role="menu"> <div class="select-bd"> </div> </div>';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],100:[function(require,module,exports){
var treeTpl     = require("./tree.tpl"),
    treeRootTpl = require("./tree_root.tpl");
    treeRootRenderTpl = require("./tree_root_render.tpl");
module.exports = function(){
    var oasTree = {
        VERSION: '1.0.0',
        options: {
            // 根节点
            root: null,
            //树的数据集合:[{icon:"",label:"",id:"",pid:"",checked:false,selected:false,disabled:false,isAdd:false,isEdit:true,isDelete:true;hasChild:true;}]
            data: [],
            //树数据的数据形式，“array”为一维数组形式，“tree”树形形式; 
            dataType:"array",
            //是否有checkbox:null、"checkbox"、"radio"
            checkType: null,
            //整个树disable
            disable:false,
            //所有被选中的节点id的集合
            checkedIds:[],
            //部分勾选节点是否返回,true:返回，false：不返回 (是否返回所有上层父节点 该功能结合勾选的多种模式使用)
            returnPartChecked:false,
            //树有大小两种无数据样式0:小样式，1：大样式
            noDataStyle:0,
            //Y 属性定义 checkbox 被勾选后的情况； N 属性定义 checkbox 取消勾选后的情况； "Y": "p" 勾选全部子节点父节点被选中"N":"P" 取消一个子节点父节点取消勾选 ;"Y": "s" 勾选父节点子节点被勾选 ,"N":"s" 取消父节点勾选子节点被取消勾选 ; "Y": "z" 勾选一个子节点父节点被勾选，"N":"z" 取消所有子节点的勾选父节点取消勾选
            checkboxEffect: { "Y": "ps", "N": "ps" },
            //树组件的高度,默认“auto”  只能是数字形式 需要为容器添加overflow属性
            height: "auto",
            //树组件的宽度,默认“auto”  只能是数字形式 需要为容器添加overflow属性
            width: "auto",
            //初始化时是否全部折叠(大数据模式下该属性失效)
            isInitOpen: true,
            // 是否支持搜索
            isSearch: false,
            //是否大数据 
            bigData: false,
            url: null,
            icon: $.noop(),
            modelTpl: null
        },
        // 节点默认字段
        nodeField:{
            checkType: null,
            disabled: false,
            label: '',
            nlevel: 0,
            isEdit: false,
            isAdd: false,
            isDelete: false,
            checked: false,
            hasChild: false,
            isParent: false
        },
        _create: function(){
            this._definInitData();
            this._initModel();
        },
        
        /**
         * 操作
         */
        // 初始化模型
        _initModel: function(){
            // 获取加载模型
            var loadModel = this._loaderController();
            loadModel.apply(this);
        },
        /**
         * [_dataLoad 直接传入data加载模式]
         * @DateTime  2017-06-29
         * @copyright [copyright]
         * @license   [license]
         * @version   [version]
         * @return    {[type]}    [description]
         */
        _dataLoad: function(){
            this._dataLoadInitData();
            this._dealInitData();
            this._createRootDom(this._renderData);
            this._createDom(this._renderData);
            // 设置宽高
            this._setTreeWH();

            var that = this;
            
            $('.searchInput').on('keyup', _.debounce(function(){
                var label = $(this).val();
                var showIds = that._iCall('search',[label]);
                that._emit('search',[showIds]);
            }, 300))
        },
        // _searchInputDo: ,
        /**
         * [_onceLoad url一次加载模式]
         * @DateTime  2017-07-01
         * @copyright [copyright]
         * @license   [license]
         * @version   [version]
         * @param     {[type]}    $url [description]
         * @return    {[type]}         [description]
         */
        _onceLoad: function($url){
            this._onceLoadInitData();

            var that = this,
                url  = '';
            if($url === undefined){
                url = that.options.url;
            }else{
                url = $url;
            }
            this._model.tpl.baseUrl = url;
            that._model.list().then(function(res){
                if(res.meta.status === 0){
                    // 创建节点
                    that.options.data = res.data;
                    that._dealInitData();
                    that._createRootDom(that._renderData);
                    that._createDom(that._renderData);
                    // 设置宽高
                    that._setTreeWH();

                    $('.searchInput').on('keyup', _.debounce(function(){
                        var label = $(this).val();
                        var showIds = that._iCall('search',[label]);
                        that._emit('search',[showIds]);
                    }, 300))
                }
            });
        },
        _createRootDom: function(data){
            var $el = this.$el,
                //  nodata: 是否有数据；verticalLine控制竖直线的样式；showHorizontalLine 控制水平线的样式
                temp = {
                    hasRoot: false,
                    nodata: false,
                    root: this.bakRoot,
                    noDataStyle: this.options.noDataStyle,
                    isSearch: this.options.isSearch,
                    verticalLine:'',
                    showHorizontalLine:false
                };

            // 如果有自己诶按显示数字线，若第一个子节点不包含子节点则显示长竖直线，
            // 如果第一个子节点是父节点且没有更节点只有一个子节点则显示横线
            if(this.bakRoot != null && !$.isEmptyObject(this.bakRoot)){
                temp.hasRoot = true;
                if(data.length > 0){
                    temp.verticalLine += 'show';
                    if( data[0].isParent === false ){
                        temp.verticalLine += ' lg';
                    }
                    if( data[0].isParent === false && data.length === 1){
                        temp.showHorizontalLine = true;
                    }
                }
            }
            // 根节点渲染
            if(data.length === 0){
                temp.nodata = true;
                $el.empty().append(treeRootTpl(temp)).addClass("oas-tree");
                return;
            }else{
                $el.empty().append(treeRootTpl(temp)).addClass("oas-tree");
            }
        },
        _renderRootDom: function(data){
            var $el = this.$el,
                //  nodata: 是否有数据；verticalLine控制竖直线的样式；showHorizontalLine 控制水平线的样式
                temp = {
                    hasRoot: false,
                    nodata: false,
                    root: this.bakRoot,
                    noDataStyle: this.options.noDataStyle,
                    isSearch: this.options.isSearch,
                    verticalLine:'',
                    showHorizontalLine:false
                };

            // 如果有自己诶按显示数字线，若第一个子节点不包含子节点则显示长竖直线，
            // 如果第一个子节点是父节点且没有更节点只有一个子节点则显示横线
            if(this.bakRoot != null && !$.isEmptyObject(this.bakRoot)){
                temp.hasRoot = true;
                if(data.length > 0){
                    temp.verticalLine += 'show';
                    if( data[0].isParent === false ){
                        temp.verticalLine += ' lg';
                    }
                    if( data[0].isParent === false && data.length === 1){
                        temp.showHorizontalLine = true;
                    }
                }
            }
            // 根节点渲染
            if(data.length === 0){
                temp.nodata = true;
                $el.find('.treeContainer').empty().append(treeRootRenderTpl(temp));
                return;
            }else{
                $el.find('.treeContainer').empty().append(treeRootRenderTpl(temp));
            }
        },
        //创建树子节点
        _createDom: function(data) {
            var $el = this.$el;
            for (var i = 0; i < data.length; i++) {
                this._loopNodes(data[i],0, this.bigData);
            }
            if(this.bigData) {
                this._appendHtml($el.find(".oastree-nodes"), this.nodesString);
            } else {
                $el.find(".oastree-nodes").append(this.nodesString.join(''));
            }           
        },
        // node节点数组转化为
        _nodes2DomString: function(nodeArray){
            var stringArray = [];
            for(var i=0; i<nodeArray.length;i++){
                var spanStatus = '';
                i === nodeArray.length-1 ? (spanStatus = 'bottom-docu') : (spanStatus = 'center-docu');
                var iconClass = this._getIconClass(nodeArray[i]);
                stringArray.push(treeTpl({
                    $node: nodeArray[i],
                    $spanStatus: spanStatus,
                    $iconClass : iconClass
                }));
            }
            return stringArray;
        },
        //递归树节点
        _loopNodes:function(node,isSelf, isBigData){
            if(!isSelf){
                this.nodeLevel = 0;
                node.level = this.nodeLevel;
            }
            node.isOpen = !isBigData;
            var spanStatus = this._getSpanStatus(node);
            var iconClass = this._getIconClass(node);
            this.nodesString.push(treeTpl({
                $node: node,
                $spanStatus: spanStatus,
                $iconClass : iconClass
            }));
            if(node.childList && node.childList.length > 0){
                this.nodeLevel ++;
                for (var i = 0; i < node.childList.length; i++) {
                    node.childList[i].level = this.nodeLevel;
                    node.childList[i].isFirstNode = (i == 0 ) ? true : false;
                    node.childList[i].isLastNode = (i == node.childList.length - 1) ? true : false;
                }
                if(!isBigData) {
                    for (var j = 0; j < node.childList.length; j++) {
                        this._loopNodes(node.childList[j],1);
                    }
                }
            }
            this.nodesString.push("</ul></li>");
        },
        _setTreeWH: function(){
            var $el = this.$el;
            _.isNumber(this.options.width) ? $el.find('.treeContainer').width(this.options.width) : undefined;
            _.isNumber(this.options.height) ? $el.find('.treeContainer').height(this.options.height) : undefined;
            if($el.find('.searchInput').length>0){
                $el.find('.searchInput').width(this.options.width-22);
            }
        },
        _appendHtml: function(container, html) {

            var start = 0,
                len = html.length,
                nowHtml,
                time = 0;

            while(time*1000 < len) {

                nowHtml = html.slice(time * 1000, 1000 * ++time);

                (function(container, nowHtml) {

                    setTimeout(function() {

                        container.append(nowHtml);

                    },time * 100)

                })(container, nowHtml)

            }

        },
        /**
         * 数据定义
         */
        _definInitData: function(){
            // 记录被select nodeId
            this.selectedNodeId = "";
            // 记录被checked 所有节点
            this.checkedNodes = [];
            // 存放树形 结构被转化成数组的数据
            this.arrayTypeData = [];
            // 存放每个节点的html字符串
            this.nodesString = [];
            // 用于记录 key value 格式 便于查找、操作
            this.kvNodes = {};
            // 放置用于渲染的数组
            this._renderData = [];
            // node的层级标识
            this.nodeLevel = 0;
            // 是否启用大数据加载模式
            this.bigData = this.options.bigData;
            // 为了适应非分页情况 初始化页数
            this.isFirstPage = true;
            this.isLastPage = true;
            // 第一次初始化标识
            this.firstInit = true;

            this.triggerFlag = false;
            this.triggerValue = undefined;
            // 记录被checked的节点 
            this.onceCheckChangeNodes = [];

            if(!!this.options.url){
                this._initOasModel();
            }
            
        },
        _initOasModel: function(){
            var that = this,
		    	modelTpl = this.options.modelTpl,
                _tpls;
            if(!that.options.url) return;
		    that._model = oasisl.baseModel.extend({
		        statics: {
		            baseUrl: that.options.url
		        }
		    });
            _tpls = this._model.tpl = {};
		    /**
		     * this.model.tpl 缓存改模型的模版
		     * 包含：create，update，detail
		     */
            if(this.options.modelTpl === null){
                return ;
            }
		    if(_.isObject(modelTpl)){
		        for (var action in modelTpl) {
		            $tplDom = $('#' + modelTpl[action]);
		            _tpls[action] = {
		                tpl: template.compile($tplDom.html()),
		                width: $tplDom.attr('width'),
		                height: $tplDom.attr('height')
		            }
		        }
		    }else{
		        /** String时 */
		        _tpls.create = _tpls.detail = _tpls.update = {
		            tpl: template.compile($('#' + modelTpl).html()),
		            width: $('#' + modelTpl).attr('width'),
		            height: $('#' + modelTpl).attr('height')
		        }
		    }
        },
        _dealInitData: function(){
            this.bakRoot = $.extend(true,{},this.options.root);
            this.bakData  =  $.extend(true,[],this.options.data);
            this._dealBakRoot();
            this._dealBakData();
        },
        _dealBakRoot: function(){
            // 是否禁用
           if(!$.isEmptyObject(this.bakRoot) && this.options.disable){
               this.bakRoot.disabled = true;
           } 
        },
        _dealBakData: function(){
            //统一数据为数组形式 
            var dataConverter = this._dataTypeController();
            dataConverter.apply(this);
            // 将node数组转化为标准形式
            this._nodes2standard(this.bakData);
            // 处理禁用
            this._dealDisabled();
            // 处理是否打开
            this._dealIsInitOpen();
            // 为所有节点添加勾选状态
            this._concatChecked();
            // 记录被选中的节点到  checkedNodes
            this._dealCheckedNodes();
            // 记录选中的节点
            this._dealSelected();
            // 记录节点类型
            this._dealCheckType();
            // 记录是否为父节点
            this._dealIsParent();
            // 记录初始化增删改的数据
            this._dealAddDelEdit();
            //  记录初始化icon
            this._dealInitIcon();
            // 生成key value格式数据
            this._generateKv();
            // 准备渲染的数据
            this._preRenderData();
            // 添加区别第一还是最后一个Node的字段
            this._addIsFirstOrlastNode();
        },
        _dealBakDataBySearch: function(){
            //统一数据为数组形式 
            var dataConverter = this._dataTypeController();
            dataConverter.apply(this);
            // 将node数组转化为标准形式
            this._nodes2standard(this.bakData);
            // 处理禁用
            this._dealDisabled();
            // 处理是否打开
            this._dealIsInitOpen();
            // 为所有节点添加勾选状态
            this._concatChecked();
            // 记录被选中的节点到  checkedNodes
            this._dealCheckedNodes();
            // 记录选中的节点
            this._dealSelected();
            // 记录节点类型
            this._dealCheckType();
            // 记录是否为父节点
            this._dealIsParent();
            // 记录初始化增删改的数据
            this._dealAddDelEdit();
            //  记录初始化icon
            this._dealInitIcon();
            // 生成key value格式数据 搜索时不需要重新生成kvNode
            // this._generateKv();
            // 准备渲染的数据
            this._preRenderDataBak();
            // 添加区别第一还是最后一个Node的字段
            this._addIsFirstOrlastNodeBak();
        },
        _nodes2standard: function(array){
            for(var i = 0; i < array.length; i++){
                array[i] = this._node2standard(array[i]);
            }
        },
        _node2standard: function(node){
            var nodeRoot = $.extend(true,{},node);
            for( key in this.nodeField ){
                if(key === 'checkType'){
                    nodeRoot.checkType = nodeRoot[key] || this.options.checkType;
                }else if(key === 'disabled'){
                    nodeRoot.disabled = nodeRoot[key] || this.options.disable;
                }else if(key === 'icon' && this.options.icon !== undefined){
                    nodeRoot.icon = nodeRoot[key] || this.options.icon(nodeRoot);
                }else{
                    nodeRoot[key] = nodeRoot[key] || this.nodeField[key];
                }
            }
            return nodeRoot;
        },
        // 将转换后的数据封装到bakData
        _tidyData: function(){
            var data = this.bakData;
            this._tree2Array(data);
            //子节点已没有必要存在
            _.forEach(this.arrayTypeData,function(node,i){
                delete node.childList;
            });
            this.bakData = this.arrayTypeData;
        },
        //树形数据转换成数组
        _tree2Array: function(data){
            for (var i = 0; i < data.length; i++) {
                this.arrayTypeData.push(data[i]);
                if(data[i].childList && data[i].childList.length > 0){
                    this._tree2Array(data[i].childList);
                }
            }
        },
        // 处理选checked
        _concatChecked: function(){
            var that = this;
            _.forEach(that.bakData,function(node,i){
                _.forEach(that.options.checkedIds,function(checkedNodeId,j){
                    if(node.id === checkedNodeId){
                        node.checked = true;
                        return false;
                    }
                })
            })
        },
        // 处理禁用
        _dealDisabled: function(){
            if(this.options.disable){
                _.forEach(this.bakData,function(node,i){
                    node.disabled = true;
                })
            }
        },
        // 记录初始化打开
        _dealIsInitOpen: function(){
            if(this.options.isInitOpen){
                _.forEach(this.bakData,function(node,i){
                    node.isInitOpen = true;
                })
            }
        },
        // 记录selected
        _dealSelected: function(){
            var that = this;
            _.forEach(this.bakData, function(node, i) {
                if(node.selected && that.selectedNodeId === ""){
                    that.selectedNodeId = "" +node.id;
                }
            })
        },
        // 记录checkType
        _dealCheckType: function(){
            var that = this;
            _.forEach(this.bakData, function(node, i) {
                node.checkType = that.options.checkType;
            })
        },
        // 记录是否父节点
        _dealIsParent: function(){
            var pids = _.pluck(this.bakData, 'pid');
            _.forEach(this.bakData, function(node, i) {
                _.indexOf(pids, node.id) != -1 ? node.hasChild = true : node.hasChild = false ;
                node.isParent = false;
                node.hasChild === true ? (node.isParent = true) : (node.isParent = false);
            })
        },
        // 处理增删改
        _dealAddDelEdit: function(){
            var that = this;
            _.forEach(this.bakData, function(node, i) {
                node.isAdd = that.options.modelTpl && that.options.modelTpl.create && node.isAdd;
                node.isEdit = that.options.modelTpl && that.options.modelTpl.create && node.isEdit;
                node.isDelete = that.options.modelTpl && !!node.isDelete; 
            })
        },
        // 记录初始化icon
        _dealInitIcon: function(){
            var that = this;
            _.forEach(this.bakData, function(node, i) {
                if(that.options.icon !== undefined){
                    node.icon = that.options.icon(node);
                }else if(node.icon === undefined){
                    node.icon = "";
                }
            })
        },
        // 保存checkedNodes
        _dealCheckedNodes: function(){
            var that = this;
            _.forEach(this.bakData, function(node, i) {
                if(node.checked){
                    _.remove(that.checkedNodes,{id:node.id});
                    that.checkedNodes.push(node);
                }
            })
        },
        _dataLoadInitData: function(){
            // 每次单次加载都要清空前一次的数据
            this.nodesString = [];
            // 若为树结构需要初始化
            this.arrayTypeData = [];
        },
        // 单词加载初始化数据
        _onceLoadInitData:function(){
            // url单次加载 必须是array 
            this.options.dataType = "array";
            // 每次单次加载都要清空前一次的数据
            this.nodesString = [];
        },
        // 为分一次分页查询 重置必要数据
        _eachfenyeReset: function(){
            // 清空nodeString
            this.nodesString = [];
        },
        _fenyeReset:function(){
            this._model.condition.page = 1;
        },
        // 生成key value形式
        _generateKv: function(){
            var that = this;
            that.kvNodes = {};
            _.forEach(this.bakData, function(node, i) {
                node.childList === undefined ? (node.childList = []) : undefined;
                that.kvNodes['' + node.id] = node;
            })
        },
        _preRenderData: function(){
            this._renderData = this._transformTozTreeFormat();
        },
        _preRenderDataBak: function(){
            this._renderDataBak = this._transformTozTreeFormat();
        },
        // 为第一个 和最后一个元素添加标识
        _addIsFirstOrlastNode: function(){
            for (var i = 0; i < this._renderData.length; i++) {
                this._renderData[i].isFirstNode = (i == 0  && this.isFirstPage) ? true : false;
                this._renderData[i].isLastNode = (i == this._renderData.length - 1  && this.isLastPage) ? true : false;
            }
        },
        // 为第一个 和最后一个元素添加标识(搜索时调用)
        _addIsFirstOrlastNodeBak: function(){
            for (var i = 0; i < this._renderDataBak.length; i++) {
                this._renderDataBak[i].isFirstNode = (i == 0  && this.isFirstPage) ? true : false;
                this._renderDataBak[i].isLastNode = (i == this._renderDataBak.length - 1  && this.isLastPage) ? true : false;
            }
        },
        // 处理树的核心方法
        _transformTozTreeFormat: function() {
            var sNodes = this.bakData;
            var i,l;
            var r = [];
            var tmpMap = [];
            for (i=0, l=sNodes.length; i<l; i++) {
                tmpMap[sNodes[i]["id"]] = sNodes[i];
            }
            for (i=0, l=sNodes.length; i<l; i++) {
                // 是否有子节点
                if (tmpMap[sNodes[i]["pid"]] && sNodes[i]["id"] != sNodes[i]["pid"]) {
                    tmpMap[sNodes[i]["pid"]].isParent = true;
                    if (!tmpMap[sNodes[i]["pid"]]["childList"]){
                        tmpMap[sNodes[i]["pid"]]["childList"] = [];
                    }
                    tmpMap[sNodes[i]["pid"]]["childList"].push(sNodes[i]);
                } else {
                    r.push(sNodes[i]);
                }
            }
            return r;
        },
        // 获取展开关闭那边的样式
        _getSpanStatus: function(node){
            var spanStatus = '';
            if(node.isParent){
                if(node.level == 0 && node.isFirstNode){
                    if(this._renderData.length > 1){
                        spanStatus = (node.isOpen && node.isInitOpen) === true ? 'roots-open' : 'roots-close';
                    }else{
                        spanStatus = (node.isOpen && node.isInitOpen) === true ? 'root-open' : 'root-close';
                    }
                }else{
                    if(node.isLastNode === true){
                        spanStatus = (node.isOpen && node.isInitOpen) === true ? 'bottom-open' : 'bottom-close';
                    }else{
                        spanStatus = (node.isOpen && node.isInitOpen) === true ? 'center-open' : 'center-close';
                    }
                }
            }else{
                if(node.isLastNode === true){
                    spanStatus = (node.isFirstNode && node.level == 0) ? 'root-docu' : 'bottom-docu';
                }else if(node.isFirstNode && node.level ==0){
                    spanStatus = 'roots-docu';
                }else{
                    spanStatus = 'center-docu';
                }
            }
            return spanStatus;
        },
        // 分页情况下获取展开关闭那边的样式
        _getFenyeSpanStatus: function(node){
            var spanStatus = '';
            if(node.hasChild){
                // 第一层 第一个节点具有根节点样式
                if(node.level == 0 && node.isFirstNode && this.firstInit ===true){
                   spanStatus = (this._renderData.length > 1 ) ? 'roots-close': 'root-close';
                }else{
                    spanStatus = (node.isLastNode === true ) ? 'bottom-close': 'center-close';
                }
            }else{
                if(node.isLastNode === true){
                    spanStatus = (node.isFirstNode && node.level == 0) ? 'root-docu' : 'bottom-docu';
                }else if(node.isFirstNode && node.level ==0){
                    spanStatus = 'roots-docu';
                }else{
                    spanStatus = 'center-docu';
                }
            }
            return spanStatus;
        },
        // 获取图片样式
        _getIconClass: function(node){
            var iconClass = '';
            node.level == 0 ? iconClass += ' node-top ' : 0; 
            if(node.isParent === true){
                iconClass += ' bigger ';
                (!!node.icon === true && node.icon.length >0) ? iconClass += (' oasicon ' + node.icon) : iconClass += ' oasicon oasicon-folder';
            }else{
                (!!node.icon === true && node.icon.length >0) ? iconClass += (' oasicon ' + node.icon)  : iconClass += ' oasicon oasicon-details';
            }
            return iconClass;
        },
        // 获取父节点
        _getParentNode:function(id){
            return this.kvNodes[''+this.kvNodes[''+id].pid];
        },
        // 新增方法用于保持顺序搜索后的顺序。搜索后是乱序的所以获取搜索后需要展示节点的id集合，在原数据集中删除不需要展示的节点重新渲染则顺序正确。
        _getSearchData: function(renderData,searchInfo){
            var resultIds = this._getSearchDataId(renderData,searchInfo);
            var allIds = _.map(renderData, 'id');
            var deleteIds = _.difference(allIds,resultIds );
            for(var i = 0; i < deleteIds.length; i++){
                _.remove(renderData, function(n) {
                    return n.id === deleteIds[i];
                });
            }
            return renderData;
        },
        _getSearchDataId: function(renderData,searchInfo){
            this.result = [];
             for(var i = 0; i < renderData.length;i++){
                if (renderData[i]['label'].indexOf(searchInfo)>-1) {
                    this.result.push(renderData[i].id);
                    this._loopParent(renderData[i])
                }
            }
            this.result = _.uniq(this.result);
			return this.result;
        },
        _loopParent:function(node){
            if(this.kvNodes[node.pid]){
                if(_.findIndex(this.result,{id:this.kvNodes[node.pid].id}) == -1){
                    // 搜锁时要使用childrenList，故不删除
                    // delete this.kvNodes[node.pid].childList;
                    this.result.push(this.kvNodes[node.pid].id);
                    this._loopParent(this.kvNodes[node.pid]);
                }  
            }
        },
        _appendNodes: function(container, nodeList) {
            var start = 0,
                len = nodeList.length,
                list,
                time = 0;
                that = this;
            while(time*1000 < len) {
                list = nodeList.slice(time * 1000, 1000 * ++time);
                (function(container, list) {
                    setTimeout(function() {
                        var htmlNow = [];
                        list.forEach(function(node) {
                            var spanStatus = that._getSpanStatus(node);
                            var iconClass = that._getIconClass(node);
                            htmlNow.push(treeTpl({
                                $node: node,
                                $spanStatus: spanStatus,
                                $iconClass : iconClass
                            }));
                            htmlNow.push('</li></ul></div>');
                        })
                        container.append(htmlNow.join(''));
                    },time * 100)   
                })(container, list);
            }
        },
        _judgeParentNode:function(pid){
            var pNode = this.kvNodes[''+pid];
            if(!pNode || !pNode.childList || pNode.childList.length === 0){
                return;
            }
            var childrenNotDisabled = [];
            var childrenCheckeds = 0;
            _.forEach(pNode.childList,function(node,i){
                if(!node.disabled){
                    childrenNotDisabled.push(node);
                    node.checked ? childrenCheckeds++ : undefined;
                }
            })
            if(childrenCheckeds === childrenNotDisabled.length){
                pNode.checked = true;
                if(!_.find(this.checkedNodes,{id:pid})){
                    this.onceCheckChangeNodes.push(pNode);
                }
                _.remove(this.checkedNodes,{id:pid});
                this.checkedNodes.push(pNode);
                this.$el.find('li[nodeid="' + pid + '"]>.beauty-check>input[type=checkbox]').prop("checked",true);
                this._judgeParentNode(pNode.pid);
            }else if(childrenCheckeds < childrenNotDisabled.length){
                if(pNode.checked){
                    pNode.checked = false;
                    _.remove(this.checkedNodes,{id:pid});
                    this.onceCheckChangeNodes.push(pNode);
                    this.$el.find('li[nodeid="' + pid + '"]>.beauty-check>input[type=checkbox]').prop("checked",false);
                    this._judgeParentNode(pNode.pid);
                }
                
            }
        },
        _judgeParentNodeByZ: function(pid){
            var pNode = this.kvNodes[''+pid];
            if(!pNode || !pNode.childList || pNode.childList.length === 0){
                return;
            }
            // 可用节点数
            var childrenNotDisabled = [];
            // 勾选节点数
            var childrenCheckeds = 0;
            _.forEach(pNode.childList,function(node,i){
                if(!node.disabled){
                    childrenNotDisabled.push(node);
                    node.checked ? childrenCheckeds++ : undefined;
                }
            })
            if(childrenCheckeds === 0){
                if(pNode.checked){
                    pNode.checked = false;
                    _.remove(this.checkedNodes,{id:pid});
                    this.onceCheckChangeNodes.push(pNode);
                    this.$el.find('li[nodeid="' + pid + '"]>.beauty-check>input[type=checkbox]').prop("checked",false);
                    this._judgeParentNodeByZ(pNode.pid);
                }
                
            }else{
               pNode.checked = true;
               if(!_.find(this.checkedNodes,{id:pid})){
                   this.onceCheckChangeNodes.push(pNode);
               }
               _.remove(this.checkedNodes,{id:pid});
               this.checkedNodes.push(pNode);
               this.$el.find('li[nodeid="' + pid + '"]>.beauty-check>input[type=checkbox]').prop("checked",true);
               this._judgeParentNodeByZ(pNode.pid); 
            }
            
        },
        _makeChildrenDone:function(pNode,status){
            var that = this;
            //  nodeid = xxx 下面的所有checkbox
            this.$el.find('li[nodeid="' + pNode.id + '"]>.beauty-check>input[type=checkbox]').prop('checked', status);
            _.forEach(pNode.childList, function(node, i) {
                if(!node.disabled){
                    if(node.checked !== status) {
                        that.onceCheckChangeNodes.push(node);
                        if(status) {
                            that.checkedNodes.push(node)
                        } else {
                            _.remove(that.checkedNodes,{id:node.id})
                        }
                    }
                    node.checked = status;
                    if(node.isParent && node.childList && node.childList.length > 0){
                        that._makeChildrenDone(node,status);
                    }else{
                        // 如果没有子节点了 则在此处改变当前节点的状态
                        that.$el.find('li[nodeid="' + node.id + '"]>.beauty-check>input[type=checkbox]').prop('checked', status); 
                    }
                }
            });        
        },
        // 准备好 options.data对树进行加载
        _onceLoadByData: function(){
            this._onceLoadInitData();
            this._dealInitData();
            this._createRootDom(this._renderData);
            this._createDom(this._renderData);
        },
        _findGrandSons: function(searchInfo){
            var showIds = this._iCall('searchShowIds',[searchInfo]),
                grandSon = [];

            // 找出最后面的节点，即该节点的所有孙子节点都不在需要展示的集合
            for(var k = 0; k < showIds.length; k++){
                var cIds = this._iCall('searchAllCidsById',[showIds[k]]);
                if( !oasisl.util.hasSameElement(cIds,showIds) ){
                    grandSon.push(showIds[k]);
                }
            }

            return grandSon;
        },
        /**
         * [setHighLightLabel 高亮匹配到的文字]
         * @DateTime  2017-07-14
         * @copyright [copyright]
         * @license   [license]
         * @version   [version]
         * @param     {[type]}    searchInfo [需要高亮的文字]
         * @param     {[type]}    nodeids    [需要文字高亮的节点id的集合]
         * @return    {[type]}               [description]
         */
        setHighLightLabel: function(searchInfo,nodeIds){
            var $el = this.$el,
                highLabel = '<i class="highLabel">'+searchInfo+'</i>';
            for(var i = 0;i < nodeIds.length; i++){
                var newLabel = '',
                    nodeLabel = $el.find('li[nodeid="'+nodeIds[i]+'"] >a >.nodeLabel').html(),
                    array = nodeLabel.split(searchInfo);
                for(var j =0 ;j < array.length;j++){
                    newLabel += array[j];
                    j === (array.length - 1) ? undefined: newLabel += highLabel;
                }
                $el.find('li[nodeid="'+nodeIds[i]+'"] >a >.nodeLabel').html(newLabel);
            }
        },
        /**
         * 控制器
         */
        /**
         * [_loaderController 加载模式选择器]
         * @DateTime  2017-06-29
         * @copyright [copyright]
         * @license   [license]
         * @version   [version]
         * @return    {[type]}    [description]
         */
        _loaderController: function(){
            // 加载模式选择器
            if(!!this.options.url === false){
                return this._dataLoad;
            }else{
                return this._onceLoad;
            } 
        },
        
        /**
         * [dataType 数据类型控制器]
         * @DateTime  2017-06-29
         * @copyright [copyright]
         * @license   [license]
         * @version   [version]
         * @return    {[type]}    [description]
         */
        _dataTypeController: function(){
            if(this.options.dataType === "tree"){
                return this._tidyData;
            }else{
                return function(){};
            }
        },
        events: {
            //指定绑定事件的元素
            'target': function() {
                return this.$el;
            },
            // 展开关闭按钮
            'click li>span': function(self, evt) {
                var className = $(self)[0].className;
                if(className.indexOf("docu") != -1){
                    return false;
                }
                if(className.indexOf("open") != -1){
                    $(self).removeClass(className).addClass(className.split("-")[0] + "-close");
                    //  分页模式 删除子节点 ； 非分页，隐藏子节点
                    $(self).closest('li').find('>ul').hide();                     
                }
                if(className.indexOf("close") != -1){
                    $(self).removeClass(className).addClass(className.split("-")[0] + "-open");
                    $(self).closest('li').find('>ul').show();

                    // 大数据情况 第一次进来获取，以后隐藏
                    if(this.bigData) {
                        var data = this.kvNodes,
                            $li = $(self).closest('li'),
                            pid = $li.attr('nodeid'),
                            node = data[pid],
                            $ul = $li.find('ul'),
                            html = [];

                        node.childList.forEach(function(one, i, list) {
                            one.isFirstNode = (i == 0) ? true : false;
                            one.isLastNode = (i == list.length - 1) ? true : false;
                        })
                        if(node && !$li.data('hasRendered')) {
                            this._appendNodes($ul, node.childList);
                            $li.data('hasRendered', true);
                        }
                    }
                }
            },
            'click li>a': function(self, evt) {
                if($(self).closest("li").hasClass("node-disabled")){
                    return;
                }
                this.$el.find("a").removeClass("current");
                $(self).addClass("current");
                this.selectedNodeId = $(self).closest("li").attr("nodeid");
                this._emit('select',[this._iCall("getSelectedNode")]);
            },
            'click .oastree-root>a': function(self, evt) {
                if($(self).closest(".oastree-root").hasClass("node-disabled")){
                    return;
                }
                this.$el.find("a").removeClass("current");
                $(self).addClass("current");
                this.selectedNodeId = "";
                this._emit('select',[this.bakRoot]);
            },
            'dblclick .oastree-root>a': function(self, evt) {
                if(this._renderData.length === 0){
                    return;
                }
                this.$el.find(".oastree-nodes").toggle();
                this.$el.find(".oastree-root>span").toggleClass("show");
                
            },
            'click li .beauty-check>input[type=checkbox]': function(self, evt) {
                var node = this.kvNodes[$(self).closest("li").attr("nodeid")],
                    status = $(self).prop("checked"),
                    arrayCheckedNodesOldIds = _.pluck($.extend(true,[],this._iCall("getCheckedNodes")), 'id');
                
                if(this.triggerFlag){
                    status = this.triggerValue;
                }
                this.onceCheckChangeNodes = [];
                // 选中
                if(status){
                    node.checked = true;
                    if(!_.find(this.checkedNodes,{id:node.id})){
                        this.onceCheckChangeNodes.push(node);
                    }
                    _.remove(this.checkedNodes,{id:node.id});
                    this.checkedNodes.push(node);
                    if(this.options.checkboxEffect.Y.indexOf("p") > -1){
                        this._judgeParentNode(node.pid);
                    }
                    if(this.options.checkboxEffect.Y.indexOf("z") > -1){
                        this._judgeParentNodeByZ(node.pid);
                    }
                    if(this.options.checkboxEffect.Y.indexOf("s") > -1){
                        node.isParent ? this._makeChildrenDone(node,status) : undefined;
                    }
                }else{
                    node.checked = false;
                    _.remove(this.checkedNodes,{id:node.id});
                    this.onceCheckChangeNodes.push(node);
                    if(this.options.checkboxEffect.N.indexOf("p") > -1){
                        this._judgeParentNode(node.pid);
                    }
                    if(this.options.checkboxEffect.N.indexOf("z") > -1){
                        this._judgeParentNodeByZ(node.pid);
                    }
                    if(this.options.checkboxEffect.N.indexOf("s") > -1){
                        node.isParent ? this._makeChildrenDone(node,status) : undefined;
                    }
                }
                var checkedNodesBak = $.extend(true,[],this.checkedNodes);
                if(checkedNodesBak.length > arrayCheckedNodesOldIds.length){
                    this._emit('checkChange',[node,_.remove(checkedNodesBak, function(n) {
                        return _.indexOf(arrayCheckedNodesOldIds, n.id) == -1;
                    })]);
                }else{
                    var ids = _.map(checkedNodesBak, 'id');
                    ids = _.difference(arrayCheckedNodesOldIds,ids);
                    var array = [];
                    for(var j=0; j < ids.length;j++){
                        array.push(this.kvNodes[ids[j]]);
                    }
                    this._emit('checkChange',[node,array]);
                }
                this.triggerFlag = false;
                this.triggerValue = undefined;
                //TODO 此处有疑问，跑完之后为什么还要在勾选一次节点
                // return false;
            },
            'click li>input[type=radio]': function(self, evt) {
                var node = this.kvNodes[$(self).closest("li").attr("nodeid")],
                    status = $(self).prop("checked");
                if(this.checkedNodes.length === 1){
                    if(this.checkedNodes[0].id !== node.id){
                        _.remove(this.checkedNodes,{id:this.checkedNodes[0].id});
                        this.checkedNodes.push(node);
                        this._emit('checkChange',[node,this._iCall("getCheckedNodes")]);
                    }
                }else{
                    this.checkedNodes.length = 0;
                    this.checkedNodes.push(node);
                    this._emit('checkChange',[node,this._iCall("getCheckedNodes")]);
                }
            },
            //新增子节点
            'click li a>i.oasicon-add':function(self,evt){
                evt.stopPropagation();
                var that = this,
                parentId = $(self).closest("li").attr("nodeid");
			    setTimeout(function(){
			         that._iCall('createModel',[parentId]);
			    }, 0);
            },
            //编辑节点
            'click li a>i.oasicon-edit':function(self,evt){
                evt.stopPropagation();
                var that = this,
                    nodeId = $(self).closest("li").attr("nodeid");
			    setTimeout(function(){
			         that._iCall('updateModel',[nodeId]);
			    }, 0);
            },
            //删除节点
            'click li a>i.oasicon-delete':function(self,evt){
                var that = this,
                    nodeId =$(self).closest("li").attr("nodeid");
                dialog.confirm('确定要删除该条记录吗？', function(){
		            that._iCall('deleteNode', [nodeId, function(res){
		                that._emit('afterDeleteModel', [res]);
		            }]);
                });
            }
        },
        invoke: {
            //重置树节点数据 data的结构{data:xxx,url:xxx}
            data: function(data) {
                this.kvNodes = {};
                if(!!data.url === true){
                    $('.oastree-nodes li').remove();
                    this._onceLoad(data.url);
                }else{                    
                    this.options.data = data;
                    this._dataLoad();
                }
            },
            //不改变options.data情况下的重绘树 用于类似 搜索之类的
            dataBybakData: function(data) {
                this._dataLoadInitData();
                this.$el.find('.oastree-nodes li').remove();
                this.bakRoot = $.extend(true,{},this.options.root);
                this.bakData  =  $.extend(true,[],data);
                this._dealBakRoot();
                this._dealBakDataBySearch();
                this._renderRootDom(this._renderDataBak);
                this._createDom(this._renderDataBak);
            },
            createModel: function(parentId){//传入触发元素的jquery对象
                var that = this,
                    createTpl = this._model.tpl.create;
                var d = dialog.open({
                    title: '添加节点',
                    btn: ['确定', '取消'],
                    content: createTpl.tpl({}),
                    area: [createTpl.width, createTpl.height],
                    yes: function(index){
                        var $form = $('#layui-layer'+ index).find('form');
                        if(!$form.valid()) return;
                        var obj = oasisl.form.objectify($($form));
                        obj = $.extend(true, {}, obj);
                        obj.parentId = parentId;
                        that._iCall('addNode', [obj, function(res){
                            if(res.meta.status === 0){
                                dialog.close(index);
                            }
                            that._emit('afterCreateModel', [res]);
                        }]);
                    }
                });
            },
            updateModel: function(nodeId){
                var node = this.kvNodes[nodeId],
                    that = this,
                    updateTpl = this._model.tpl.update;
                var d = dialog.open({
                    title: '修改节点',
                    btn: ['确定', '取消'],
                    content: updateTpl.tpl(node),
                    area: [updateTpl.width, updateTpl.height],
                    yes: function(index){
                        var $form = $('#layui-layer'+ index).find('form');
                        if(!$form.valid()) return;
                        var obj = oasisl.form.objectify($($form));
                        obj = $.extend(true, {}, obj);
                        obj.id = nodeId;
                        that._iCall('editNode', [obj, function(res){
                            if(res.meta.status === 0){
                                dialog.close(index);
                            }
                            that._emit('afterUpdateModel', [res]);
                        }]);
                    }
                });
            },
            //增加子节点  save返回被添加节点的相关信息{}
            addNode:function(node, callback){
                var $el = this.$el,
                    that = this,
                    parentId = node.parentId;
                if(!!this.options.url === true){
                    this._model.save(node).then(function(res){
                        if(res.meta.status === 0) {
                            var node = that.kvNodes['' + parentId];
                            node.isParent = true;
                            that.options.data = res.data;
                            dialog.msg(res.meta.message, {icon: 1});
                            that._onceLoadByData();                                
                        }else{
                            dialog.msg(res.meta.message, {icon: 2});
                        }
                        callback && callback(res);
                    });
                }else{
                    var newData=this.options.data,
                        nodeObj = that._node2standard(node);
                    newData.push(nodeObj);
                    this.options.data=newData;
                    this._dataLoad();
                    callback && callback();
                }
            },
            //批量增加子节点[{},{}]
            addNodes:function(objs){
                var $el = this.$el,
                    that = this;
                var newData=this.options.data;                     
                objs.forEach(function(v,i){
                    var nodeObj = that._node2standard(v);
                    newData.push(nodeObj);
                });
                this.options.data=newData;

                if(!!this.options.url === true){//一次加载数据
                    this._onceLoadByData();
                }else{//直接传数据            
                    this._dataLoad();    
                }
            },

            //删除节点
            deleteNode:function(nodeId, callback){
                var $el = this.$el,
                    that = this,
                    node = {};
                    node.id = nodeId,
                    newData=that.options.data;
                newData.forEach(function(v,i){
                    if (v.id==nodeId) {
                        _.remove(newData, v);
                    }

                });
                !function getNeedDeleteNodes(id){
                    var currentId, delArr = [];
                    newData.forEach(function(v,i){
                        if(v.pid==id){                     
                        delArr.push(v)
                        }
                    });
                    delArr.forEach(function(v) {
                    _.remove(newData, v);
                    getNeedDeleteNodes(v.id);
                    });

                }(nodeId);
                this.options.data=newData;
                if(!!this.options.url === true){//一次加载数据
                    this._model.destory(node).then(function(res){
                        if(res.meta.status === 0) {
                            that.options.data = res.data;
                            that._onceLoadByData();
                            dialog.msg(res.meta.message, {icon: 1});
                        }else{
                            dialog.msg(res.meta.message, {icon: 2});
                        }
                        callback && callback(res);
                    });
                }else{//直接传数据            
                    this._dataLoad();    
                    callback && callback();
                }
            },
            //编辑节点
            editNode:function(node, callback){
                var $el = this.$el,
                    that = this;
                if(!!this.options.url === true){
                    var data = this._node2standard(node);
                    this._model.update(data).then(function(res){
                        if(res.meta.status === 0) {
                            that.options.data = res.data;
                            that._onceLoadByData();
                            dialog.msg(res.meta.message, {icon: 1});
                        }else{
                            dialog.msg(res.meta.message, {icon: 2});
                        }
                        callback && callback(res);
                    });
                }else{//直接传数据     
                    var newData=this.options.data;
                    newData.forEach(function(v,i){
                        if(v.id==node.id){
                            v.label=node.label;                      
                        }
                    });
                    this.options.data=newData;       
                    this._dataLoad();   
                    callback && callback(); 
                }
            },
            //获取树中被选中的节点
            getSelectedNode:function(){
                if(this.options.root && this.$el.find('.oastree-root>a').hasClass("current")){
                    return this.options.root;
                }else{
                    return this.kvNodes[''+this.selectedNodeId] ? this.kvNodes[''+this.selectedNodeId] : null;
                }
            },
            //获取树中被勾选的节点集合
            getCheckedNodes:function(){
                var that = this;
                if(this.options.returnPartChecked){
                    var partChecked = $.extend(true,[],this.checkedNodes);
                    var getRelatedParents = function(node){
                        var parentNode = that._getParentNode(node.id);
                        if(parentNode){
                            // _.remove(partChecked,{id:parentNode.id});
                            partChecked.push(parentNode);
                            getRelatedParents(parentNode);
                        }
                    }
                    _.forEach(this.checkedNodes,function(node,i){
                        getRelatedParents(node);
                    });
                    return _.uniq(partChecked, 'id');
                }else{
                    return this.checkedNodes;
                }
            },
            //选中树的某个节点,如果想选中根节点请传"root"
            selectNode:function(id){
                if(id === "" || id === null || id === undefined){
                    return;
                }
                if(this.selectedNodeId !== ""){
                    this.$el.find('li[nodeid="' + this.selectedNodeId + '"]>a').removeClass("current");
                }
                if(id === "root" && this.options.root){
                    this.selectedNodeId = "";
                    this.$el.find('.oastree-root>a').addClass("current");
                    this._emit('select',[this.options.root]);
                }else{
                    this.selectedNodeId = id+"";
                    this.$el.find('li[nodeid="' + id + '"]>a').addClass("current");
                    this._emit('select',[this._iCall("getSelectedNode")]);
                }
                
            },
            //改变某个节点的checked状态
            changeCheckedStatus:function(id,status){
                var arrayCheckedNodesOldIds = _.pluck($.extend(true,[],this._iCall("getCheckedNodes")), 'id');
                if(id === "" || id === null || id === undefined || this.kvNodes[''+id].disabled === true){
                    return;
                }
                var node_input = this.$el.find('li[nodeid="' + id + '"]>.beauty-check>input[type=checkbox]');
                var currStatus = node_input.prop("checked");
                if(currStatus !== status){
                    if(this.options.checkType === "checkbox"){
                        // this.triggerFlag = true;~
                        // this.triggerValue = status;
                        // node_input.trigger("click");
                        node_input.prop('checked',status);
                        this.kvNodes[''+id].checked = status;
                        status === true ? this.checkedNodes.push(this.kvNodes[''+id]):_.remove(this.checkedNodes,{id:id});
                        var checkedNodesBak = $.extend(true,[],this.checkedNodes);
                        // this._emit('checkChange',[this.kvNodes[''+id],_.remove(checkedNodesBak, function(n) {
                        //     return _.indexOf(arrayCheckedNodesOldIds, n.id) == -1;
                        // })]);


                        if(checkedNodesBak.length > arrayCheckedNodesOldIds.length){
                            this._emit('checkChange',[this.kvNodes[''+id],_.remove(checkedNodesBak, function(n) {
                                return _.indexOf(arrayCheckedNodesOldIds, n.id) == -1;
                            })]);
                        }else{
                            var ids = _.map(checkedNodesBak, 'id');
                            ids = _.difference(arrayCheckedNodesOldIds,ids);
                            var array = [];
                            for(var j=0; j < ids.length;j++){
                                array.push(this.kvNodes[ids[j]]);
                            }
                            this._emit('checkChange',[this.kvNodes[''+id],array]);
                        }
                    }else if(this.options.checkType === "radio"){
                        node_input.prop("checked",status);
                        this.checkedNodes.length = 0;
                        if(status){
                            this.checkedNodes.push(this.kvNodes[''+id]);
                        }
                        // radio返回node和受改变节点的集合是同一个
                        this._emit('checkChange',[this._iCall("getCheckedNodes"),this._iCall("getCheckedNodes")]);
                    }
                    node_input.prop('checked',status);
                }
            },
            changeCheckedStatusByClick: function(id,status){
                var node_input = this.$el.find('li[nodeid="' + id + '"]>.beauty-check>input[type=checkbox]');
                
                // node_input.prop('checked',status);
                node_input.trigger('click');
                node_input.prop('checked',status);
            },
            // array 为id数组
            checkedByIds:function(array,status){
                for(var i=0;i<array.length;i++){
                   this.invoke.changeCheckedStatus.call(this,array[i],status);
                }
            },
            checkedAll:function(status){
                var array = _.keys(this.kvNodes);
                for(var i=0;i<array.length;i++){
                    this.invoke.changeCheckedStatus.call(this,array[i],status);
                }
            },
            //使整棵树禁用或不禁用
            disable:function(status){
                this.options.disable = status;
                if(!!this.options.url === true){//一次加载数据
                    this._onceLoadByData();
                }else{//直接传数据            
                    this._dataLoad();    
                }
            },
            //返回渲染后的树节点集合(只有根节点其中childList中包含子节点)
            getAllTreeNodes:function(){
                return this._renderData;
            },
            //返回渲染后的树节点集合
            getAllTreeNode:function(){
                var array = [];
                _.forEach(this.kvNodes,function(node,i){
                    array.push(node);
                });
                return array;
            },
            //根据id返回树节点
            getNodeById:function(id){
                return this.kvNodes['' + id] ? this.kvNodes['' + id] : null;
            },
            // 获取父节点与子节点的映射
            getPid2ChildList: function(){
                var data = $.extend(true,{},this.kvNodes);
                //子节点已没有必要存在
                _.forEach(data,function(node,i){
                    delete node.childList;
                });
                data = _.values(data);
                var groupedByparents = _.groupBy(data,'pid');
                var catsById = _.indexBy(data,'id');
                _.each(_.omit(groupedByparents,''),function(childList,parentId){
                    if(parentId !== '-1'){
                        catsById[''+parentId].childList = childList;
                    }
                })
                _.each(catsById,function(cat){
                    cat.isParent = !_.isEmpty(cat.childList);
                });
                return groupedByparents;
            },
            getChildListById: function(id){
                var pid2childList = this._iCall('getPid2ChildList');
                return pid2childList[id] ? pid2childList[id] : null;
            },
            // 查找所有上级节点id
            searchAllPidsById: function(id){
                // 所有父节点id
                var that = this,
                    allpid = [],
                    kvNodes = $.extend(true,{},this.kvNodes);
                function loopAddpid(id){
                    if(id !== '-1'){
                        allpid.push(id);
                        loopAddpid(that.kvNodes['' + id].pid);
                    }
                }
                loopAddpid(id);
                // 删除第一个id，次id为用于搜索的id
                allpid = _.drop(allpid);
                return allpid;
            },
            // 返回节点对应的所有上级父节点
            searchAllparentsById: function(id){
                var kvNodes = $.extend(true,{},this.kvNodes),
                    // 所有父节点id
                    allParentsNode = [];
                var allpid = this._iCall('searchAllPidsById',[id]);
                for(var i = 0;i < allpid.length; i++){
                    allParentsNode.push(kvNodes[allpid[i]]);
                }
                return allParentsNode;
            },
            // 子节点id到父节点集合（含父节点的节点）
            getId2ParentList: function(){
                var kvNodes = $.extend(true,{},this.kvNodes),
                    id2PListObj = {};
                for(key in kvNodes){
                   var pNodeArray = this._iCall('searchAllparentsById',[key]);
                   id2PListObj[''+key] = pNodeArray; 
                }
                return id2PListObj;
            },
            // 查找所有子节点id
            searchAllCidsById: function(id){
                // 所有父节点id
                var that = this,
                    allCids = [],
                    kvNodes = $.extend(true,{},this.kvNodes);

                function loopAddcid(id){
                    for(var i = 0;i < that.kvNodes['' + id].childList.length; i++){
                        allCids.push(that.kvNodes['' + id].childList[i].id);
                        if(that.kvNodes['' + id] && that.kvNodes['' + id].childList && that.kvNodes['' + id].childList.length > 0){
                            loopAddcid(that.kvNodes['' + id].childList[i].id);
                        }
                    }
                }
                loopAddcid(id);
                return allCids;
            },
            // 返回节点对应的所有子节点
            searchAllchildsById: function(id){
                var kvNodes = $.extend(true,{},this.kvNodes),
                    // 所有父节点id
                    allchildsNode = [];
                var allCids = this._iCall('searchAllCidsById',[id]);
                for( var i = 0;i < allCids.length; i++ ){
                    allchildsNode.push(kvNodes[allCids[i]]);
                }
                return allchildsNode;
            },
            // 查找所有下级子节点（含子节点的子节点）
            getId2ChildsList: function(){
                var kvNodes = $.extend(true,{},this.kvNodes),
                    id2CListObj = {};
                for(key in kvNodes){
                   var cNodeArray = this._iCall('searchAllchildsById',[key]);
                   id2CListObj[''+key] = cNodeArray; 
                }
                return id2CListObj;
            },         
            // 根据搜索的label 查找所有需要展示的节点id
            searchShowIds: function(searchInfo){
                var kvNodes = $.extend(true,{},this.kvNodes),
                    labelIds =[],
                    showIds = [];
                //在labelIds中存放所有的含有value值的节点的id 
                _.forIn(kvNodes,function(value,key){
                    var label = value.label;
                    if(label.indexOf(searchInfo) !== -1){
                        labelIds.push(key);
                    }
                });

                for(var i = 0; i < labelIds.length; i++){
                    var pIds = this._iCall('searchAllPidsById',[labelIds[i]]);
                    showIds = _.union( showIds, labelIds, pIds);
                }
                return showIds;
            },
            setNodeClosedById: function(id){
                var $el = this.$el,
                    $self = $el.find('li[nodeid="'+id+'"] >span'),
                    className = $self[0].className;
                if(className.indexOf("docu") != -1){
                    return false;
                }
                $self.removeClass(className).addClass(className.split("-")[0] + "-close");
                //  分页模式 删除子节点 ； 非分页，隐藏子节点
                $self.closest('li').find('>ul').hide();                     
            },
            search: function(searchInfo){
                var renderData = $.extend(true,[],this._renderData),
                    data = $.extend(true,[],this.options.data),
                    kvNodesBak = $.extend(true,{},this.kvNodes);
                var result = this._getSearchData(data,searchInfo);
                this._iCall('dataBybakData',[result]);
                var showIds = _.map(result, 'id');
                //  为匹配到的设置高亮
                searchInfo.trim() !== '' ? this.setHighLightLabel(searchInfo,showIds) : undefined;
                return showIds;
            }
        }
    };
    $.oasUiFactory("oasTree", oasTree);
}
},{"./tree.tpl":101,"./tree_root.tpl":102,"./tree_root_render.tpl":103}],101:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"1f58b91aec206ab82dce6e283f866544"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/tree/tree',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,$node=$data.$node,$spanStatus=$data.$spanStatus,$iconClass=$data.$iconClass,$each=$utils.$each,$value=$data.$value,$index=$data.$index,$out='';$out+='<!-- <li class="level';
$out+=$escape($node.level);
if($node.disabled){
$out+=' node-disabled';
}
$out+='" nodeid="';
$out+=$escape($node.id);
$out+='" pid="';
$out+=$escape($node.pid);
$out+='"> <span class="';
$out+=$escape($spanStatus);
$out+='"></span> ';
if($node.checkType !== null){
$out+=' <label class="beauty-check"> <input ';
if($node.checkType == 'radio'){
$out+='name="oastree-radio"';
}
$out+=' ';
if($node.checked){
$out+='checked="checked"';
}
$out+=' ';
if($node.disabled){
$out+='disabled="disabled"';
}
$out+=' type="';
if($node.checkType == 'checkbox'){
$out+='checkbox';
}else if($node.checkType == 'radio'){
$out+='radio';
}
$out+='" class="';
if($node.checkType == null){
$out+='chk-hide';
}
$out+='"> <span>checkbox默认状态</span> </label> ';
}
$out+=' <a href="javascript:;" class="';
if($node.selected){
$out+='current';
}
$out+='"> <i class="';
$out+=$escape($iconClass);
$out+='"></i> <span class="nodeLabel ';
if($node.isParent){
$out+='bigger';
}
$out+='">';
$out+=$escape($node.label);
$out+='</span> ';
if($node.isAdd === true){
$out+='<i class="oasicon oasicon-add" title="新增"></i>';
}
$out+=' ';
if($node.isEdit === true){
$out+=' <i class="oasicon oasicon-edit" title="编辑"></i>';
}
$out+=' ';
if($node.isDelete === true){
$out+=' <i class="oasicon oasicon-delete" title="删除"></i>';
}
$out+=' ';
if($node.extendIcons !== undefined){
$out+=' ';
$each($node.extendIcons,function($value,$index){
$out+=' <i class=" ';
$out+=$escape($value.iconClass);
$out+='" title="';
$out+=$escape($value.title);
$out+='"></i> ';
});
$out+=' ';
}
$out+=' </a> <ul class="';
if(!$node.isParent){
$out+='ul-hide';
}
if(!$node.isLastNode){
$out+=' line';
}
$out+='" style="display: ';
if(!$node.isInitOpen){
$out+='none';
}else{
$out+='list-item';
}
$out+=';"> --> <li class="level';
$out+=$escape($node.level);
if($node.disabled){
$out+=' node-disabled';
}
$out+='" nodeid="';
$out+=$escape($node.id);
$out+='" pid="';
$out+=$escape($node.pid);
$out+='"> <span class="';
$out+=$escape($spanStatus);
$out+='"></span> ';
if($node.checkType !== null){
$out+=' <label class="beauty-check"> <input ';
if($node.checkType == 'radio'){
$out+='name="oastree-radio"';
}
$out+=' ';
if($node.checked){
$out+='checked="checked"';
}
$out+=' ';
if($node.disabled){
$out+='disabled="disabled"';
}
$out+=' type="';
if($node.checkType == 'checkbox'){
$out+='checkbox';
}else if($node.checkType == 'radio'){
$out+='radio';
}
$out+='" class="';
if($node.checkType == null){
$out+='chk-hide';
}
$out+='"> <span></span> </label> ';
}
$out+=' <a href="javascript:;" class="';
if($node.selected){
$out+='current';
}
$out+='"> <i class="';
$out+=$escape($iconClass);
$out+='"></i> <span class="nodeLabel ';
if($node.isParent){
$out+='bigger';
}
$out+='">';
$out+=$escape($node.label);
$out+='</span> ';
if($node.isAdd === true){
$out+='<i class="oasicon oasicon-add" title="新增"></i>';
}
$out+=' ';
if($node.isEdit === true){
$out+=' <i class="oasicon oasicon-edit" title="编辑"></i>';
}
$out+=' ';
if($node.isDelete === true){
$out+=' <i class="oasicon oasicon-delete" title="删除"></i>';
}
$out+=' ';
if($node.extendIcons !== undefined){
$out+=' ';
$each($node.extendIcons,function($value,$index){
$out+=' <i class=" ';
$out+=$escape($value.iconClass);
$out+='" title="';
$out+=$escape($value.title);
$out+='"></i> ';
});
$out+=' ';
}
$out+=' </a> <ul class="';
if(!$node.isParent){
$out+='ul-hide';
}
if(!$node.isLastNode){
$out+=' line';
}
$out+='" style="display: ';
if(!$node.isInitOpen){
$out+='none';
}else{
$out+='list-item';
}
$out+=';"> ';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],102:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"b6ed86c8b002c5cb5404a3a8119f2371"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/tree/tree_root',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,verticalLine=$data.verticalLine,showHorizontalLine=$data.showHorizontalLine,$out='';if($data.isSearch){
$out+=' <input type="text" class="form-control searchInput" placeholder="请输入"> ';
}
$out+=' <div class="treeContainer"> ';
if($data.hasRoot && !$data.nodata){
$out+=' <div class="oastree-root';
if($data.root.disabled == true){
$out+=' node-disabled';
}
$out+='"> <a href="javascript:;" class="';
if($data.root.selected){
$out+='current';
}
$out+='"> <i class="';
if($data.root.icon && $data.root.icon.length > 0){
$out+=$escape($data.root.icon);
}else{
$out+='oasicon oasicon-folder';
}
$out+='"></i> <span class="nodeLabel">';
$out+=$escape($data.root.label);
$out+='</span></a> <span class="';
$out+=$escape(verticalLine);
$out+='">';
if(showHorizontalLine === true ){
$out+='<i></i>';
}
$out+='</span> </div> ';
}
$out+=' ';
if($data.nodata){
$out+=' <div class="oas-no-data';
if($data.noDataStyle == 0){
$out+=' oas-min-style';
}
$out+='"> <span class="oas-no-dataImg"></span><span class="oas-no-dataTip">对不起，暂无数据</span></div> ';
}else{
$out+=' <ul class="oastree-nodes"></ul> ';
}
$out+=' ';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],103:[function(require,module,exports){
/*TMODJS:{"version":1,"md5":"af628ce017bb974e17f533f22d6facee"}*/
var template=require('../../../lib/runtime/runtime');module.exports=template('E:/ued/oasisl2.0/oasisl/src/js/oasisl/components/tree/tree_root_render',function($data,$filename
/**/) {
'use strict';var $utils=this,$helpers=$utils.$helpers,$escape=$utils.$escape,verticalLine=$data.verticalLine,showHorizontalLine=$data.showHorizontalLine,$out='';if($data.hasRoot && !$data.nodata){
$out+=' <div class="oastree-root';
if($data.root.disabled == true){
$out+=' node-disabled';
}
$out+='"> <a href="javascript:;" class="';
if($data.root.selected){
$out+='current';
}
$out+='"> <i class="';
if($data.root.icon && $data.root.icon.length > 0){
$out+=$escape($data.root.icon);
}else{
$out+='oasicon oasicon-folder';
}
$out+='"></i> <span class="nodeLabel">';
$out+=$escape($data.root.label);
$out+='</span></a> <span class="';
$out+=$escape(verticalLine);
$out+='">';
if(showHorizontalLine === true ){
$out+='<i></i>';
}
$out+='</span> </div> ';
}
$out+=' ';
if($data.nodata){
$out+=' <div class="oas-no-data';
if($data.noDataStyle == 0){
$out+=' oas-min-style';
}
$out+='"> <span class="oas-no-dataImg"></span><span class="oas-no-dataTip">对不起，暂无数据</span></div> ';
}else{
$out+=' <ul class="oastree-nodes"></ul> ';
}
$out+=' ';
return new String($out);
});
},{"../../../lib/runtime/runtime":7}],104:[function(require,module,exports){
/*! jQuery Cookie Plugin v1.4.1
 * $.cooke('name'); $.cookie('name', 'value'); $.cookie('name', 'value', {expires:2, path:'/', domain:'', secure:true|false}); $.removeCookie(key, {...});
 */
;
(function(a) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], a)
    } else {
        if (typeof exports === "object") {
            a(jQuery)
        } else {
            a(jQuery)
        }
    }
}(function(f) {
    var a = /\+/g;

    function d(i) {
        return b.raw ? i : encodeURIComponent(i)
    }
    function g(i) {
        return b.raw ? i : decodeURIComponent(i)
    }
    function h(i) {
        return d(b.json ? JSON.stringify(i) : String(i))
    }
    function c(i) {
        if (i.indexOf('"') === 0) {
            i = i.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\")
        }
        try {
            i = decodeURIComponent(i.replace(a, " "));
            return b.json ? JSON.parse(i) : i
        } catch (j) {}
    }
    function e(j, i) {
        var k = b.raw ? j : c(j);
        return f.isFunction(i) ? i(k) : k
    }
    var b = f.cookie = function(q, p, v) {
        if (p !== undefined && !f.isFunction(p)) {
            v = f.extend({}, b.defaults, v);
            if (typeof v.expires === "number") {
                var r = v.expires,
                    u = v.expires = new Date();
                u.setTime(+u + r * 86400000)
            }
            return (document.cookie = [d(q), "=", h(p), v.expires ? "; expires=" + v.expires.toUTCString() : "", v.path ? "; path=" + v.path : "", v.domain ? "; domain=" + v.domain : "", v.secure ? "; secure" : ""].join(""))
        }
        var w = q ? undefined : {};
        var s = document.cookie ? document.cookie.split("; ") : [];
        for (var o = 0, m = s.length; o < m; o++) {
            var n = s[o].split("=");
            var j = g(n.shift());
            var k = n.join("=");
            if (q && q === j) {
                w = e(k, p);
                break
            }
            if (!q && (k = e(k)) !== undefined) {
                w[j] = k
            }
        }
        return w
    };
    b.defaults = {};
    f.removeCookie = function(j, i) {
        if (f.cookie(j) === undefined) {
            return false
        }
        f.cookie(j, "", f.extend({}, i, {
            expires: -1
        }));
        return !f.cookie(j)
    }
}));
},{}],105:[function(require,module,exports){
/*
 * Metadata - jQuery plugin for parsing metadata from elements
 *
 * Copyright (c) 2006 John Resig, Yehuda Katz, J�örn Zaefferer, Paul McLanahan
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 * Revision: $Id: jquery.metadata.js 4187 2007-12-16 17:15:27Z joern.zaefferer $
 *
 */

/**
 * Sets the type of metadata to use. Metadata is encoded in JSON, and each property
 * in the JSON will become a property of the element itself.
 *
 * There are three supported types of metadata storage:
 *
 *   attr:  Inside an attribute. The name parameter indicates *which* attribute.
 *          
 *   class: Inside the class attribute, wrapped in curly braces: { }
 *   
 *   elem:  Inside a child element (e.g. a script tag). The
 *          name parameter indicates *which* element.
 *          
 * The metadata for an element is loaded the first time the element is accessed via jQuery.
 *
 * As a result, you can define the metadata type, use $(expr) to load the metadata into the elements
 * matched by expr, then redefine the metadata type and run another $(expr) for other elements.
 * 
 * @name $.metadata.setType
 *
 * @example <p id="one" class="some_class {item_id: 1, item_label: 'Label'}">This is a p</p>
 * @before $.metadata.setType("class")
 * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
 * @desc Reads metadata from the class attribute
 * 
 * @example <p id="one" class="some_class" data="{item_id: 1, item_label: 'Label'}">This is a p</p>
 * @before $.metadata.setType("attr", "data")
 * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
 * @desc Reads metadata from a "data" attribute
 * 
 * @example <p id="one" class="some_class"><script>{item_id: 1, item_label: 'Label'}</script>This is a p</p>
 * @before $.metadata.setType("elem", "script")
 * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
 * @desc Reads metadata from a nested script element
 * 
 * @param String type The encoding type
 * @param String name The name of the attribute to be used to get metadata (optional)
 * @cat Plugins/Metadata
 * @descr Sets the type of encoding to be used when loading metadata for the first time
 * @type undefined
 * @see metadata()
 */

(function($) {

$.extend({
	metadata : {
		defaults : {
			type: 'class',
			name: 'validate',
			cre: /({.*})/,
			single: 'validate'
		},
		setType: function( type, name ){
			this.defaults.type = type;
			this.defaults.name = name;
		},
		get: function( elem, opts ){
			var settings = $.extend({},this.defaults,opts);
			// check for empty string in single property
			if ( !settings.single.length ) settings.single = 'metadata';
			
			var data = $.data(elem, settings.single);
			// returned cached data if it already exists
			if ( data ) return data;
			
			data = "{}";
			
			if ( settings.type == "class" ) {
				var m = settings.cre.exec( elem.className );
				if ( m )
					data = m[1];
			} else if ( settings.type == "elem" ) {
				if( !elem.getElementsByTagName )
					return undefined;
				var e = elem.getElementsByTagName(settings.name);
				if ( e.length )
					data = $.trim(e[0].innerHTML);
			} else if ( elem.getAttribute != undefined ) {
				var attr = elem.getAttribute( settings.name );
				if ( attr )
					data = attr;
			}
			
			if ( data.indexOf( '{' ) <0 )
			data = "{" + data + "}";
			
	
			data = eval("(" + data + ")");
			
			$.data( elem, settings.single, data );
			return data;
		}
	}
});

/**
 * Returns the metadata object for the first member of the jQuery object.
 *
 * @name metadata
 * @descr Returns element's metadata object
 * @param Object opts An object contianing settings to override the defaults
 * @type jQuery
 * @cat Plugins/Metadata
 */
$.fn.metadata = function( opts ){
	return $.metadata.get( this[0], opts );
};

})(jQuery);

//使用 metadate元素验证 validate 属性
$.metadata.setType("attr", "validate");

/*!
 * jQuery Validation Plugin v1.13.1
 *
 * http://jqueryvalidation.org/
 *
 * Copyright (c) 2014 Jörn Zaefferer
 * Released under the MIT license
 */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		define( ["jquery"], factory );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

$.extend($.fn, {
	// http://jqueryvalidation.org/validate/
	validate: function( options ) {

		// if nothing is selected, return nothing; can't chain anyway
		if ( !this.length ) {
			if ( options && options.debug && window.console ) {
				console.warn( "Nothing selected, can't validate, returning nothing." );
			}
			return;
		}

		// check if a validator for this form was already created
		var validator = $.data( this[ 0 ], "validator" );
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr( "novalidate", "novalidate" );

		validator = new $.validator( options, this[ 0 ] );
		$.data( this[ 0 ], "validator", validator );

		if ( validator.settings.onsubmit ) {

			this.validateDelegate( ":submit", "click", function( event ) {
				if ( validator.settings.submitHandler ) {
					validator.submitButton = event.target;
				}
				// allow suppressing validation by adding a cancel class to the submit button
				if ( $( event.target ).hasClass( "cancel" ) ) {
					validator.cancelSubmit = true;
				}

				// allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
				if ( $( event.target ).attr( "formnovalidate" ) !== undefined ) {
					validator.cancelSubmit = true;
				}
			});

			// validate the form on submit
			this.submit( function( event ) {
				if ( validator.settings.debug ) {
					// prevent form submit to be able to see console output
					event.preventDefault();
				}
				function handle() {
					var hidden, result;
					if ( validator.settings.submitHandler ) {
						if ( validator.submitButton ) {
							// insert a hidden input as a replacement for the missing submit button
							hidden = $( "<input type='hidden'/>" )
								.attr( "name", validator.submitButton.name )
								.val( $( validator.submitButton ).val() )
								.appendTo( validator.currentForm );
						}
						result = validator.settings.submitHandler.call( validator, validator.currentForm, event );
						if ( validator.submitButton ) {
							// and clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						if ( result !== undefined ) {
							return result;
						}
						return false;
					}
					return true;
				}

				// prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			});
		}

		return validator;
	},
	// http://jqueryvalidation.org/valid/
	valid: function() {
		var valid, validator;

		if ( $( this[ 0 ] ).is( "form" ) ) {
			valid = this.validate().form();
		} else {
			valid = true;
			validator = $( this[ 0 ].form ).validate();
			this.each( function() {
				valid = validator.element( this ) && valid;
			});
		}
		return valid;
	},
	// attributes: space separated list of attributes to retrieve and remove
	removeAttrs: function( attributes ) {
		var result = {},
			$element = this;
		$.each( attributes.split( /\s/ ), function( index, value ) {
			result[ value ] = $element.attr( value );
			$element.removeAttr( value );
		});
		return result;
	},
	// http://jqueryvalidation.org/rules/
	rules: function( command, argument ) {
		var element = this[ 0 ],
			settings, staticRules, existingRules, data, param, filtered;

			settings = $.data( element.form, "validator" ).settings;
		if ( command ) {
			
			staticRules = settings.rules;
			existingRules = $.validator.staticRules( element );
			switch ( command ) {
			case "add":
				$.extend( existingRules, $.validator.normalizeRule( argument ) );
				// remove messages from rules, but allow them to be set separately
				delete existingRules.messages;
				staticRules[ element.name ] = existingRules;
				if ( argument.messages ) {
					settings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );
				}
				break;
			case "remove":
				if ( !argument ) {
					delete staticRules[ element.name ];
					return existingRules;
				}
				filtered = {};
				$.each( argument.split( /\s/ ), function( index, method ) {
					filtered[ method ] = existingRules[ method ];
					delete existingRules[ method ];
					if ( method === "required" ) {
						$( element ).removeAttr( "aria-required" );
					}
				});
				return filtered;
			}
		}

		data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.metadataRules(element),
			$.validator.classRules( element ),
			$.validator.attributeRules( element ),
			$.validator.dataRules( element ),
			$.validator.staticRules( element )
		), element );

		
		// make sure required is at front
		if ( data.required ) {
			param = data.required;
			delete data.required;
			data = $.extend( { required: param }, data );
			$( element ).attr( "aria-required", "true" );
		}

		// make sure remote is at back
		if ( data.remote ) {
			param = data.remote;
			delete data.remote;
			data = $.extend( data, { remote: param });
		}

		return data;
	}
});

// Custom selectors
$.extend( $.expr[ ":" ], {
	// http://jqueryvalidation.org/blank-selector/
	blank: function( a ) {
		return !$.trim( "" + $( a ).val() );
	},
	// http://jqueryvalidation.org/filled-selector/
	filled: function( a ) {
		return !!$.trim( "" + $( a ).val() );
	},
	// http://jqueryvalidation.org/unchecked-selector/
	unchecked: function( a ) {
		return !$( a ).prop( "checked" );
	}
});

// constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

//http://jqueryvalidation.org/jQuery.validator.format/
$.validator.format = function( source, params ) {
	if ( arguments.length === 1 ) {
		return function() {
			var args = $.makeArray( arguments );
			args.unshift( source );
			return $.validator.format.apply( this, args );
		};
	}
	if ( arguments.length > 2 && params.constructor !== Array  ) {
		params = $.makeArray( arguments ).slice( 1 );
	}
	if ( params.constructor !== Array ) {
		params = [ params ];
	}
	$.each( params, function( i, n ) {
		source = source.replace( new RegExp( "\\{" + i + "\\}", "g" ), function() {
			return n;
		});
	});
	return source;
};

$.extend( $.validator, {

	defaults: {
		formOnlyName: true,
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		validClass: "valid",
		errorElement: "label",
		focusCleanup: false,
		focusInvalid: true,
		errorContainer: $( [] ),
		errorLabelContainer: $( [] ),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		checkHidden: false,
		onfocusin: function( element ) {
			this.lastActive = element;

			// Hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup ) {
				if ( this.settings.unhighlight ) {
					this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				}
				this.hideThese( this.errorsFor( element ) );
			}
		},
		onfocusout: function( element ) {
			if ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {
				this.element( element );
			}
		},

		onchange: function(element){
			this.element( element );
		},
		onkeyup: function( element, event ) {
			if ( event.which === 9 && this.elementValue( element ) === "" ) {
				return;
			} else if ( element.name in this.submitted || element === this.lastElement ) {
				this.element( element );
			}
		},
		onclick: function( element ) {
			// click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted ) {
				this.element( element );

			// or option elements, check parent select in that case
			} else if ( element.parentNode.name in this.submitted ) {
				this.element( element.parentNode );
			}
		},
		highlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).addClass( errorClass ).removeClass( validClass );
			} else {
				$( element ).addClass( errorClass ).removeClass( validClass );
			}
		},
		unhighlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).removeClass( errorClass ).addClass( validClass );
			} else {
				$( element ).removeClass( errorClass ).addClass( validClass );
			}
		}
	},

	// http://jqueryvalidation.org/jQuery.validator.setDefaults/
	setDefaults: function( settings ) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "请输入值！",
		remote: "请检查该值的正确性！",
		email: "请输入正确格式的Email地址！",
		url: "请输入正确格式的URL地址！",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date ( ISO ).",
		number: "请输入数字！",
		digits: "请输入整型数字！",
		creditcard: "Please enter a valid credit card number.",
		equalTo: "两次输入的值不一致！",
		isIP: "Please enter a valid ip.",
		isMAC: "Please enter a valid mac.",
		isCnDateTime: "请输入正确格式的日期(YYYY-MM-DD HH:mm:ss)！",
		isChineseDate: "请输入正确格式的日期(yyyy年MM月dd)！",
		isIdCard: "Please enter a valid idcard number.",
		isMobile: "Please enter a valid monile number.",
		isSpecialStr: "Please enter a valid string.",
		isQQ:"请输入一个正确的QQ号",
		maxlength: $.validator.format("输入的字符长度超出了 {0} 位！"),
		minlength: $.validator.format("请输入至少 {0} 位长度的字符！"),
		rangelength: $.validator.format("请输入 {0} - {1} 位长度的字符！"),
		range: $.validator.format("请输入 {0} - {1} 范围之间的值！"),
		max: $.validator.format("请输入不大于 {0} 的值！"),
		min: $.validator.format("请输入不小于 {0} 的值！"),
		invalidChar: $.validator.format("信息中含有非法字符 {0}"),
		compareTime: $.validator.format("日期比较不满足比较运算符{1}"),
		date: $.validator.format("日期格式不正确！格式为：{0}"),
		compareTo: $.validator.format("不满足比较运算符{1}"),
		regExp: "输入的信息不匹配定义的规则！",
		CNRangeLength: $.validator.format("请输入{0}-{1}个字符或{0}-{3}个汉字！"),
		postalcode: "请输入正确的邮政编码！",
		IP: "请输入正确的IP地址！",
		MAC: "请输入正确的MAC地址(以 - 分隔)！",
		telephone: "请输入正确的固定电话号码！格式：区号-号码",
		mobile: "请输入正确的手机号码！",
		dateCN: "请输入正确格式的日期(yyyy-MM-dd)！",
		chinese: "请输入中文字符！",
		validChar: "输入信息中含有非法字符 ` ' \" ~ ^ ",
		IDCard: "请输入正确的身份证号码！",
		accept: "输入的信息不匹配定义的规则！"

	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $( this.settings.errorLabelContainer );
			this.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );
			this.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = ( this.groups = {} ),
				rules;
			$.each( this.settings.groups, function( key, value ) {
				if ( typeof value === "string" ) {
					value = value.split( /\s/ );
				}
				$.each( value, function( index, name ) {
					groups[ name ] = key;
				});
			});
			rules = this.settings.rules;
			
			$.each( rules, function( key, value ) {
				rules[ key ] = $.validator.normalizeRule( value );
			});

			function delegate( event ) {
				var validator = $.data( this[ 0 ].form, "validator" ),
					eventType = "on" + event.type.replace( /^validate/, "" ),
					settings = validator.settings;
				if ( settings[ eventType ] ) {

					if((this.next('.oas-select').size() > 0 && this.is( settings.ignore ))||(!this.is( settings.ignore ))){
						settings[ eventType ].call( validator, this[ 0 ], event );
					}
					
				}
			}
			$( this.currentForm )
				.validateDelegate( ":text, [type='password'], [type='file'], select, textarea, " +
					"[type='number'], [type='search'] ,[type='tel'], [type='url'], " +
					"[type='email'], [type='datetime'], [type='date'], [type='month'], " +
					"[type='week'], [type='time'], [type='datetime-local'], " +
					"[type='range'], [type='color'], [type='radio'], [type='checkbox']",
					"focusin focusout keyup change", delegate)
				// Support: Chrome, oldIE
				// "select" is provided as event.target when clicking a option
				.validateDelegate("select, option, [type='radio'], [type='checkbox']", "click", delegate);


			// 兼容oasis的select
			$(this.currentForm).find('select').change(function(e){
				delegate.call($(this), e);
			});

			if ( this.settings.invalidHandler ) {
				$( this.currentForm ).bind( "invalid-form.validate", this.settings.invalidHandler );
			}

			// Add aria-required to any Static/Data/Class required fields before first validation
			// Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
			$( this.currentForm ).find( "[required], [data-rule-required], .required" ).attr( "aria-required", "true" );
		},

		// http://jqueryvalidation.org/Validator.form/
		form: function() {
			this.checkForm();
			$.extend( this.submitted, this.errorMap );
			this.invalid = $.extend({}, this.errorMap );
			if ( !this.valid() ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ]);
			}
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {
				this.check( elements[ i ] );
			}
			return this.valid();
		},

		// http://jqueryvalidation.org/Validator.element/
		element: function( element ) {
			var cleanElement = this.clean( element ),
				checkElement = this.validationTargetFor( cleanElement ),
				result = true;

			this.lastElement = checkElement;

			if ( checkElement === undefined ) {
				delete this.invalid[ cleanElement.name ];
			} else {
				this.prepareElement( checkElement );
				this.currentElements = $( checkElement );

				result = this.check( checkElement ) !== false; 
				if ( result ) {
					delete this.invalid[ checkElement.name ];
				} else {
					this.invalid[ checkElement.name ] = true;
				}
			}
			// Add aria-invalid status for screen readers
			$( element ).attr( "aria-invalid", !result );

			if ( !this.numberOfInvalids() ) {
				// Hide error containers on last error
				this.toHide = this.toHide.add( this.containers );
			}
			this.showErrors();
			return result;
		},

		// http://jqueryvalidation.org/Validator.showErrors/
		showErrors: function( errors ) {
			if ( errors ) {
				// add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = [];
				for ( var name in errors ) {
					this.errorList.push({
						message: errors[ name ],
						element: this.findByName( name )[ 0 ]
					});
				}
				// remove items from success list
				this.successList = $.grep( this.successList, function( element ) {
					return !( element.name in errors );
				});
			}
			if ( this.settings.showErrors ) {
				this.settings.showErrors.call( this, this.errorMap, this.errorList );
			} else {
				this.defaultShowErrors();
			}
		},

		// http://jqueryvalidation.org/Validator.resetForm/
		resetForm: function() {
			if ( $.fn.resetForm ) {
				$( this.currentForm ).resetForm();
			}
			this.submitted = {};
			this.lastElement = null;
			this.prepareForm();
			this.hideErrors();
			this.elements()
					.removeClass( this.settings.errorClass )
					.removeData( "previousValue" )
					.removeAttr( "aria-invalid" );
		},

		numberOfInvalids: function() {
			return this.objectLength( this.invalid );
		},

		objectLength: function( obj ) {
			/* jshint unused: false */
			var count = 0,
				i;
			for ( i in obj ) {
				count++;
			}
			return count;
		},

		hideErrors: function() {
			this.hideThese( this.toHide );
		},

		hideThese: function( errors ) {
			errors.not( this.containers ).text( "" );
			this.addWrapper( errors ).hide();
		},

		valid: function() {
			return this.size() === 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if ( this.settings.focusInvalid ) {
				try {
					$( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [])
					.filter( ":visible" )
					.focus()
					// manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger( "focusin" );
				} catch ( e ) {
					// ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive && $.grep( this.errorList, function( n ) {
				return n.element.name === lastActive.name;
			}).length === 1 && lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {},
				$tempElemets,
				settings = this.settings;

			// select all valid inputs inside the form (no submit or reset buttons)
			$tempElemets = $( this.currentForm )
			.find( "input, select, textarea" )
			.not( ":submit, :reset, :image, [disabled]" )
			.filter( function() {
				if ( !this.name && validator.settings.debug && window.console ) {
					console.error( "%o has no name assigned", this );
				}

				// select only the first element for each name, and only those with rules specified
				if ( (this.name in rulesCache && settings.formOnlyName) || !validator.objectLength( $( this ).rules() ) ) {
					return false;
				}

				rulesCache[ this.name ] = true;
				return true;
			});
			return $tempElemets;
		},

		clean: function( selector ) {
			return $( selector )[ 0 ];
		},

		errors: function() {
			var errorClass = this.settings.errorClass.split( " " ).join( "." );
			return $( this.settings.errorElement + "." + errorClass, this.errorContext );
		},

		reset: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $( [] );
			this.toHide = $( [] );
			this.currentElements = $( [] );
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor( element );
		},

		elementValue: function( element ) {
			var val,
				$element = $( element ),
				type = element.type;

			if ( type === "radio" || type === "checkbox" ) {
				return $( "input[name='" + element.name + "']:checked" ).val();
			} else if ( type === "number" && typeof element.validity !== "undefined" ) {
				return element.validity.badInput ? false : $element.val();
			}

			val = $element.val();
			if ( typeof val === "string" ) {
				return val.replace(/\r/g, "" );
			}
			return val;
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );
            if(!element) return;
			var rules = $( element ).rules(),
				rulesCount = $.map( rules, function( n, i ) {
					return i;
				}).length,
				dependencyMismatch = false,
				val = this.elementValue( element ),
				result, method, rule;

			for ( method in rules ) {
				rule = { method: method, parameters: rules[ method ] };
				try {

					if(method === "messages") return;

					result = $.validator.methods[ method ].call( this, val, element, rule.parameters );

					// if a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result === "dependency-mismatch" && rulesCount === 1 ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result === "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor( element ) );
						return;
					}

					if ( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch ( e ) {
					if ( this.settings.debug && window.console ) {
						console.log( "Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e );
					}
					throw e;
				}
			}
			if ( dependencyMismatch ) {
				return;
			}
			if ( this.objectLength( rules ) ) {
				this.successList.push( element );
			}
			return true;
		},

		// return the custom message for the given element and validation method
		// specified in the element's HTML5 data attribute
		// return the generic message if present and no method specific message is present
		customDataMessage: function( element, method ) {
			return $( element ).data( "msg" + method.charAt( 0 ).toUpperCase() +
				method.substring( 1 ).toLowerCase() ) || $( element ).data( "msg" );
		},

		// return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[ name ];
			return m && ( m.constructor === String ? m : m[ method ]);
		},

		// return the first defined argument, allowing empty strings
		findDefined: function() {
			for ( var i = 0; i < arguments.length; i++) {
				if ( arguments[ i ] !== undefined ) {
					return arguments[ i ];
				}
			}
			return undefined;
		},

		getAttrMessage: function(element, method){
			var messages = $(element).rules().messages;
			return (messages && messages[method]) ?  messages[method] : undefined;
		},

		defaultMessage: function( element, method ) {
			return this.findDefined(
				this.getAttrMessage( element, method ),
				this.customMessage( element.name, method ),
				this.customDataMessage( element, method ),
				// title is never undefined, so handle empty string as undefined
				!this.settings.ignoreTitle && element.title || undefined,
				$.validator.messages[ method ],
				"<strong>Warning: No message defined for " + element.name + "</strong>"
			);
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule.method ),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message === "function" ) {
				message = message.call( this, rule.parameters, element );
			} else if ( theregex.test( message ) ) {
				message = $.validator.format( message.replace( theregex, "{$1}" ), rule.parameters );
			}
			this.errorList.push({
				message: message,
				element: element,
				method: rule.method
			});

			this.errorMap[ element.name ] = message;
			this.submitted[ element.name ] = message;
		},

		addWrapper: function( toToggle ) {
			if ( this.settings.wrapper ) {
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			}
			return toToggle;
		},

		defaultShowErrors: function() {
			var i, elements, error;
			for ( i = 0; this.errorList[ i ]; i++ ) {
				error = this.errorList[ i ];
				if ( this.settings.highlight ) {
					this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				}
				this.showLabel( error.element, error.message );
			}
			if ( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if ( this.settings.success ) {
				for ( i = 0; this.successList[ i ]; i++ ) {
					this.showLabel( this.successList[ i ] );
				}
			}
			if ( this.settings.unhighlight ) {
				for ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {
					this.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not( this.invalidElements() );
		},

		invalidElements: function() {
			return $( this.errorList ).map(function() {
				return this.element;
			});
		},

		showLabel: function( element, message ) {
			var place, group, errorID,
				error = this.errorsFor( element ),
				elementID = this.idOrName( element ),
				describedBy = $( element ).attr( "aria-describedby" );
			if ( error.length ) {
				// refresh error/success class
				error.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );
				// replace message on existing label
				error.html( message );
			} else {
				// create error element
				error = $( "<" + this.settings.errorElement + ">" )
					.attr( "id", elementID + "-error" )
					.addClass( this.settings.errorClass )
					.html( message || "" );

				// Maintain reference to the element to be placed into the DOM
				place = error;
				if ( this.settings.wrapper ) {
					// make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					place = error.hide().show().wrap( "<" + this.settings.wrapper + "/>" ).parent();
				}
				if ( this.labelContainer.length ) {
					this.labelContainer.append( place );
				} else if ( this.settings.errorPlacement ) {
					this.settings.errorPlacement( place, $( element ) );
				} else {
					place.insertAfter( element );
				}

				// Link error back to the element
				if ( error.is( "label" ) ) {
					// If the error is a label, then associate using 'for'
					error.attr( "for", elementID );
				} else if ( error.parents( "label[for='" + elementID + "']" ).length === 0 ) {
					// If the element is not a child of an associated label, then it's necessary
					// to explicitly apply aria-describedby

					errorID = error.attr( "id" ).replace( /(:|\.|\[|\])/g, "\\$1");
					// Respect existing non-error aria-describedby
					if ( !describedBy ) {
						describedBy = errorID;
					} else if ( !describedBy.match( new RegExp( "\\b" + errorID + "\\b" ) ) ) {
						// Add to end of list if not already present
						describedBy += " " + errorID;
					}
					$( element ).attr( "aria-describedby", describedBy );

					// If this element is grouped, then assign to all elements in the same group
					group = this.groups[ element.name ];
					if ( group ) {
						$.each( this.groups, function( name, testgroup ) {
							if ( testgroup === group ) {
								$( "[name='" + name + "']", this.currentForm )
									.attr( "aria-describedby", error.attr( "id" ) );
							}
						});
					}
				}
			}
			if ( !message && this.settings.success ) {
				error.text( "" );
				if ( typeof this.settings.success === "string" ) {
					error.addClass( this.settings.success );
				} else {
					this.settings.success( error, element );
				}
			}
			this.toShow = this.toShow.add( error );
		},

		errorsFor: function( element ) {
			var name = this.idOrName( element ),
				describer = $( element ).attr( "aria-describedby" ),
				selector = "label[for='" + name + "'], label[for='" + name + "'] *";

			// aria-describedby should directly reference the error element
			if ( describer ) {
				selector = selector + ", #" + describer.replace( /\s+/g, ", #" );
			}
			return this
				.errors()
				.filter( selector );
		},

		idOrName: function( element ) {
			return this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );
		},

		validationTargetFor: function( element ) {
			// If radio/checkbox, validate first element in group instead
			var _self = this;
			if ( this.checkable( element ) ) {
				element = this.findByName( element.name );
			}

			return $( element ).filter(function(){
				if($(this).is('select') && $(this).next('.oas-select').size() > 0){
					return true;
				}else if(_self.settings.ignore&&$(this).is(':hidden')){
					return false;
				}
				return true
			})[0];

			// Always apply ignore filter
			// return $( element )( this.settings.ignore )[ 0 ];
		},

		checkable: function( element ) {
			return ( /radio|checkbox/i ).test( element.type );
		},

		findByName: function( name ) {
			return $( this.currentForm ).find( "[name='" + name + "']" );
		},

		getLength: function( value, element ) {
			switch ( element.nodeName.toLowerCase() ) {
			case "select":
				return $( "option:selected", element ).length;
			case "input":
				if ( this.checkable( element ) ) {
					return this.findByName( element.name ).filter( ":checked" ).length;
				}
			}
			return value.length;
		},

		depend: function( param, element ) {
			return this.dependTypes[typeof param] ? this.dependTypes[typeof param]( param, element ) : true;
		},

		dependTypes: {
			"boolean": function( param ) {
				return param;
			},
			"string": function( param, element ) {
				return !!$( param, element.form ).length;
			},
			"function": function( param, element ) {
				return param( element );
			}
		},

		optional: function( element ) {
			var val = this.elementValue( element );
			return !$.validator.methods.required.call( this, val, element ) && "dependency-mismatch";
		},

		startRequest: function( element ) {
			if ( !this.pending[ element.name ] ) {
				this.pendingRequest++;
				this.pending[ element.name ] = true;
			}
		},

		stopRequest: function( element, valid ) {
			this.pendingRequest--;
			// sometimes synchronization fails, make sure pendingRequest is never < 0
			if ( this.pendingRequest < 0 ) {
				this.pendingRequest = 0;
			}
			delete this.pending[ element.name ];
			if ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {
				$( this.currentForm ).submit();
				this.formSubmitted = false;
			} else if (!valid && this.pendingRequest === 0 && this.formSubmitted ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ]);
				this.formSubmitted = false;
			}
		},

		previousValue: function( element ) {
			return $.data( element, "previousValue" ) || $.data( element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, "remote" )
			});
		}

	},

	classRuleSettings: {
		required: { required: true },
		email: { email: true },
		url: { url: true },
		date: { date: true },
		dateISO: { dateISO: true },
		number: { number: true },
		digits: { digits: true },
		creditcard: { creditcard: true }
	},

	addClassRules: function( className, rules ) {
		if ( className.constructor === String ) {
			this.classRuleSettings[ className ] = rules;
		} else {
			$.extend( this.classRuleSettings, className );
		}
	},

	classRules: function( element ) {
		var rules = {},
			classes = $( element ).attr( "class" );

		if ( classes ) {
			$.each( classes.split( " " ), function() {
				if ( this in $.validator.classRuleSettings ) {
					$.extend( rules, $.validator.classRuleSettings[ this ]);
				}
			});
		}
		return rules;
	},

	attributeRules: function( element ) {
		var rules = {},
			$element = $( element ),
			type = element.getAttribute( "type" ),
			method, value;

		for ( method in $.validator.methods ) {

			// support for <input required> in both html5 and older browsers
			if ( method === "required" ) {
				value = element.getAttribute( method );
				// Some browsers return an empty string for the required attribute
				// and non-HTML5 browsers might have required="" markup
				if ( value === "" ) {
					value = true;
				}
				// force non-HTML5 browsers to return bool
				value = !!value;
			} else {
				value = $element.attr( method );
			}

			// convert the value to a number for number inputs, and for text for backwards compability
			// allows type="date" and others to be compared as strings
			if ( /min|max/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {
				value = Number( value );
			}

			if ( value || value === 0 ) {
				rules[ method ] = value;
			} else if ( type === method && type !== "range" ) {
				// exception: the jquery validate 'range' method
				// does not test for the html5 'range' type
				rules[ method ] = true;
			}
		}

		// maxlength may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
		if ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {
			delete rules.maxlength;
		}

		return rules;
	},

	dataRules: function( element ) {
		var method, value,
			rules = {}, $element = $( element );
		for ( method in $.validator.methods ) {
			value = $element.data( "rule" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );
			if ( value !== undefined ) {
				rules[ method ] = value;
			}
		}
		return rules;
	},
	
	metadataRules: function(element) {
		if (!$.metadata) return {};
		var meta = $.data(element.form, 'validator').settings.meta;
		return meta ? $(element).metadata()[meta] : $(element).metadata();
	},


	staticRules: function( element ) {
		var rules = {},
			validator = $.data( element.form, "validator" );

		if ( validator.settings.rules ) {
			rules = $.validator.normalizeRule( validator.settings.rules[ element.name ] ) || {};
		}
		return rules;
	},

	normalizeRules: function( rules, element ) {
		
		// handle dependency check
		$.each( rules, function( prop, val ) {
			// ignore rule when param is explicitly false, eg. required:false
			if ( val === false ) {
				delete rules[ prop ];
				return;
			}
			if ( val.param || val.depends ) {
				var keepRule = true;
				switch ( typeof val.depends ) {
				case "string":
					keepRule = !!$( val.depends, element.form ).length;
					break;
				case "function":
					keepRule = val.depends.call( element, element );
					break;
				}
				if ( keepRule ) {
					rules[ prop ] = val.param !== undefined ? val.param : true;
				} else {
					delete rules[ prop ];
				}
			}
		});

		// evaluate parameters
		$.each( rules, function( rule, parameter ) {
			rules[ rule ] = $.isFunction( parameter ) ? parameter( element ) : parameter;
		});

		// clean number parameters
		$.each([ "minlength", "maxlength" ], function() {
			if ( rules[ this ] ) {
				rules[ this ] = Number( rules[ this ] );
			}
		});
		$.each([ "rangelength", "range" ], function() {
			var parts;
			if ( rules[ this ] ) {
				if ( $.isArray( rules[ this ] ) ) {
					rules[ this ] = [ Number( rules[ this ][ 0 ]), Number( rules[ this ][ 1 ] ) ];
				} else if ( typeof rules[ this ] === "string" ) {
					parts = rules[ this ].replace(/[\[\]]/g, "" ).split( /[\s,]+/ );
					rules[ this ] = [ Number( parts[ 0 ]), Number( parts[ 1 ] ) ];
				}
			}
		});

		if ( $.validator.autoCreateRanges ) {
			// auto-create ranges
			if ( rules.min != null && rules.max != null ) {
				rules.range = [ rules.min, rules.max ];
				delete rules.min;
				delete rules.max;
			}
			if ( rules.minlength != null && rules.maxlength != null ) {
				rules.rangelength = [ rules.minlength, rules.maxlength ];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function( data ) {
		if ( typeof data === "string" ) {
			var transformed = {};
			$.each( data.split( /\s/ ), function() {
				transformed[ this ] = true;
			});
			data = transformed;
		}
		return data;
	},

	// http://jqueryvalidation.org/jQuery.validator.addMethod/
	addMethod: function( name, method, message ) {
		$.validator.methods[ name ] = method;
		$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];
		if ( method.length < 3 ) {
			$.validator.addClassRules( name, $.validator.normalizeRule( name ) );
		}
	},

	methods: {

		// http://jqueryvalidation.org/required-method/
		required: function( value, element, param ) {
			// check if dependency is met
			if ( !this.depend( param, element ) ) {
				return "dependency-mismatch";
			}
			if ( element.nodeName.toLowerCase() === "select" ) {
				// could be an array for select-multiple or a string, both are fine this way

				var val = $( element ).val();
				return val && val.length > 0;
			}
			if ( this.checkable( element ) ) {
				return this.getLength( value, element ) > 0;
			}
			return $.trim( value ).length > 0;
		},

		// http://jqueryvalidation.org/email-method/
		email: function( value, element ) {
			// From http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#e-mail-state-%28type=email%29
			// Retrieved 2014-01-14
			// If you have a problem with this implementation, report a bug against the above spec
			// Or use custom methods to implement your own email validation
			return this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );
		},

		// http://jqueryvalidation.org/url-method/
		url: function( value, element ) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
			return this.optional( element ) || /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test( value );
		},

		// http://jqueryvalidation.org/date-method/
		date: function( value, element ) {
			return this.optional( element ) || !/Invalid|NaN/.test( new Date( value ).toString() );
		},

		// http://jqueryvalidation.org/dateISO-method/
		dateISO: function( value, element ) {
			return this.optional( element ) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test( value );
		},

		// http://jqueryvalidation.org/number-method/
		number: function( value, element ) {
			return this.optional( element ) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test( value );
		},

		// http://jqueryvalidation.org/digits-method/
		digits: function( value, element ) {
			return this.optional( element ) || /^\d+$/.test( value );
		},

		// http://jqueryvalidation.org/creditcard-method/
		// based on http://en.wikipedia.org/wiki/Luhn/
		creditcard: function( value, element ) {
			if ( this.optional( element ) ) {
				return "dependency-mismatch";
			}
			// accept only spaces, digits and dashes
			if ( /[^0-9 \-]+/.test( value ) ) {
				return false;
			}
			var nCheck = 0,
				nDigit = 0,
				bEven = false,
				n, cDigit;

			value = value.replace( /\D/g, "" );

			// Basing min and max length on
			// http://developer.ean.com/general_info/Valid_Credit_Card_Types
			if ( value.length < 13 || value.length > 19 ) {
				return false;
			}

			for ( n = value.length - 1; n >= 0; n--) {
				cDigit = value.charAt( n );
				nDigit = parseInt( cDigit, 10 );
				if ( bEven ) {
					if ( ( nDigit *= 2 ) > 9 ) {
						nDigit -= 9;
					}
				}
				nCheck += nDigit;
				bEven = !bEven;
			}

			return ( nCheck % 10 ) === 0;
		},

		// http://jqueryvalidation.org/minlength-method/
		minlength: function( value, element, param ) {
			value = value.replace(/[^\x00-\xff]/g,'xxx');
			var length = $.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || length >= param;
		},

		// http://jqueryvalidation.org/maxlength-method/
		maxlength: function( value, element, param ) {
			value = value.replace(/[^\x00-\xff]/g,'xxx');
			var length = $.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || length <= param;
		},

		// http://jqueryvalidation.org/rangelength-method/
		rangelength: function( value, element, param ) {
			value = value.replace(/[^\x00-\xff]/g,'xxx');
			var length = $.isArray( value ) ? value.length : this.getLength( value, element );
			return this.optional( element ) || ( length >= param[ 0 ] && length <= param[ 1 ] );
		},

		// http://jqueryvalidation.org/min-method/
		min: function( value, element, param ) {
			return this.optional( element ) || value >= param;
		},

		// http://jqueryvalidation.org/max-method/
		max: function( value, element, param ) {
			return this.optional( element ) || value <= param;
		},

		// http://jqueryvalidation.org/range-method/
		range: function( value, element, param ) {
			return this.optional( element ) || ( value >= param[ 0 ] && value <= param[ 1 ] );
		},

		// http://jqueryvalidation.org/equalTo-method/
		equalTo: function( value, element, param ) {
			// bind to the blur event of the target in order to revalidate whenever the target field is updated
			// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
			var target = $( param );
			if ( this.settings.onfocusout ) {
				target.unbind( ".validate-equalTo" ).bind( "blur.validate-equalTo", function() {
					$( element ).valid();
				});
			}
			return value === target.val();
		},

		// http://jqueryvalidation.org/remote-method/
		remote: function( value, element, param ) {
			if ( this.optional( element ) ) {
				return "dependency-mismatch";
			}

			var previous = this.previousValue( element ),
				validator, data;

			if (!this.settings.messages[ element.name ] ) {
				this.settings.messages[ element.name ] = {};
			}
			previous.originalMessage = this.settings.messages[ element.name ].remote;
			this.settings.messages[ element.name ].remote = previous.message;

			param = typeof param === "string" && { url: param } || param;

			if ( previous.old === value ) {
				return previous.valid;
			}

			previous.old = value;
			validator = this;
			this.startRequest( element );
			data = {};
			data[ element.name ] = value;
			$.ajax( $.extend( true, {
				url: param,
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				async:false,
				context: validator.currentForm,
				success: function( response ) {
					var valid,errors, message, submitted;
					if(typeof response === 'object'){
						if(response.meta && response.meta.status == 0){
							valid = true;
						}else{
							valid = false;
						}
					}else{
						valid = response === true || response === "true";
					}
					

					validator.settings.messages[ element.name ].remote = previous.originalMessage;
					if ( valid ) {
						submitted = validator.formSubmitted;
						validator.prepareElement( element );
						validator.formSubmitted = submitted;
						validator.successList.push( element );
						delete validator.invalid[ element.name ];
						validator.showErrors();
					} else {
						errors = {};
						message = response || validator.defaultMessage( element, "remote" );
						if(typeof response === 'object'){
							message = validator.settings.messages[ element.name ].remote;
						}
						errors[ element.name ] = previous.message = $.isFunction( message ) ? message( value ) : message;
						validator.invalid[ element.name ] = true;
						validator.showErrors( errors );
					}
					previous.valid = valid;
					validator.stopRequest( element, valid );
				}
			}, param ) );
			return "pending";
		},
		
		//ip校验
		isIP: function(value, element) {   
		    return this.optional(element) || (/^((25[0-5]|2[0-4]\d|1?\d?\d)\.){3}(25[0-5]|2[0-4]\d|1?\d?\d)$/.test(value));
		},
		
		//Mac地址校验
		isMAC: function(value, element) {   
		    return this.optional(element) || (/^[A-F\d]{2}[:-][A-F\d]{2}[:-][A-F\d]{2}[:-][A-F\d]{2}[:-][A-F\d]{2}[:-][A-F\d]{2}$/.test(value));
		},
		//扩展时间验证
		isCnDateTime: function(value,element){
			var ereg = /^\d{4}-\d{2}-\d{2}\s\d{2}\:\d{2}\:\d{2}$/;
			return ereg.test(value) && moment(value,'YYYY-MM-DD HH:mm:ss').isValid();
		},
		//扩展中文日期验证
		isChineseDate: function(value,element){
			var ereg = /^\d{4}年\d{2}月\d{2}日$/;
			return ereg.test(value) && moment(value,'YYYY年MM月DD').isValid();
		},
		//身份证校验
		isIdCard: function(value, element) {   
			var area={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"};  
			var Y,JYM; 
			var S,M; 
			var result = true;
			var idcard_array = new Array(); 
			idcard_array = value.split(""); 
			//地区检验 
			if(area[parseInt(value.substr(0,2))]==null){
				result = false; 
			}
			//身份号码位数及格式检验 
			switch(value.length){ 
				case 15: 
					if ( (parseInt(value.substr(6,2))+1900) % 4 == 0 || ((parseInt(value.substr(6,2))+1900) % 100 == 0 && (parseInt(value.substr(6,2))+1900) % 4 == 0 )){ 
						ereg=/^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$/;//测试出生日期的合法性 
					} else { 
						ereg=/^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$/;//测试出生日期的合法性 
					} 
					if (!ereg.test(value)) {
						result = false;
					}
					break; 
				case 18: 
				//18位身份号码检测 
				//出生日期的合法性检查  
				//闰年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9])) 
				//平年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8])) 
					var year = parseInt(value.substr(6,4));
					if ( year % 4 == 0 && year % 100 != 0 || year % 400 == 0){ 
						ereg=/^[1-9][0-9]{5}(19|20)[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$/;//闰年出生日期的合法性正则表达式  
					} else { 
						ereg=/^[1-9][0-9]{5}(19|20)[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$/;//平年出生日期的合法性正则表达式 
					} 
					if (ereg.test(value)) {//测试出生日期的合法性 
					//计算校验位 
						S = (parseInt(idcard_array[0]) + parseInt(idcard_array[10])) * 7 
						+ (parseInt(idcard_array[1]) + parseInt(idcard_array[11])) * 9 
						+ (parseInt(idcard_array[2]) + parseInt(idcard_array[12])) * 10 
						+ (parseInt(idcard_array[3]) + parseInt(idcard_array[13])) * 5 
						+ (parseInt(idcard_array[4]) + parseInt(idcard_array[14])) * 8 
						+ (parseInt(idcard_array[5]) + parseInt(idcard_array[15])) * 4 
						+ (parseInt(idcard_array[6]) + parseInt(idcard_array[16])) * 2 
						+ parseInt(idcard_array[7]) * 1  
						+ parseInt(idcard_array[8]) * 6   
						+ parseInt(idcard_array[9]) * 3 ; 
						Y = S % 11; 
						M = "F"; 
						JYM = "10X98765432"; 
						M = JYM.substr(Y,1);//判断校验位 
						if(!(M == idcard_array[17])){
							result = false; //检测ID的校验位 
						}  
					} else {
						result = false;
					}
					break; 
				default: 
					result = false; 
					break; 
			} 
		    return this.optional(element) || result;
		},
		
		//手机号校验
		isMobile: function(value, element) {   
		    return this.optional(element) || (/^(13[0-9]|14[0-9]|15[0-9]|17[0-9]|18[0-9])\d{8}$/.test(value));
		},
		
		//特殊字符
		isSpecialStr: function(value, element) {
		    return this.optional(element) || (/^[^\^\.<>%&';=?$":#!~\]\[{}\\/\|]*$/.test(value));
		},
		
		//特殊字符
		isQQ: function(value, element) {
		    return this.optional(element) || (/^[1-9][0-9]{4,11}$/.test(value));
		},

		/*
		 * 扩展jquery validator验证规则，添加网综之前使用的规则
		 * author: rbai
		 * 2015/03/09
		 */
		// 自定义验证输入的非法字符
		// invalidChar:"'`~^\""
		invalidChar: function(value, element, param){
			var reg = new RegExp("["+param+"]+");
			return this.optional(element) || !reg.test( value );
		},

		// 自定义日期格式，比较大小
		// ["#endTime", "<=", "yyyy-MM-dd"]
		compareTime: function(value, element, param){
			var oper = param[1] || ">", fmt = param[2] || "yyyy-MM-dd";
			return this.optional(element) ||  _compareTime_(value, $(param[0]).val(), oper, fmt);
		},

		// 自定义日期格式的日期验证
		date: function(value, element, param){
			var fDate = new Date( value ).format(param);
	
			return this.optional(element) || (value === fDate);
		},

		// 自定义大小比较
		// param[0] -- #ele, param[1] -- == != > < >= <= 等
		compareTo: function(value, element, param){
					var tEle = $(param[0]), oper = param[1];
			if( $.trim(value) !== "" && $.trim(tEle.val()) !== "" ){
				try{
					return (new Function("return "+ (value + oper + tEle.val()) +";"))();
				}catch(e){
					return false;
				}
			}else{
				return true;
			}
		},

		// 自定义正则匹配 
		regExp: function(value, element, param){
			param = typeof param == "string" ? new RegExp( param ) : param;
			return this.optional(element) || (param.test(value));
		},

		// 自定义正则匹配 
		accept: function(value, element, param){
			param = typeof param == "string" ? new RegExp( param ) : param;
			return this.optional(element) || (param.test(value));
		},

		// 1. 中文字节长度验证(在UTF8编码下一个汉字占 3 个字节)
		CNRangeLength: function(value, element, param){
			var byteLen = value.replace(/[^\x00-\xff]/g, '***').length;
			//param[-1]=3;
			param[3] = parseInt(param[1]/3, 10);
			return this.optional(element) || (byteLen >= param[0] && byteLen < param[1]);
		},

		// 2. 验证邮政编码
		postalcode: function(value, element){
			return this.optional(element) || (/^[1-9]\d{5}(?!\d)$/.test(value));
		},

		// 3. 验证IP
		IP: function(value, element){
			return this.optional(element) || (/^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)$/.test($.trim(value)));
		},

		// 4. 验证MAC，以-分隔
		MAC: function(value, element){
			return this.optional(element) || (/^([0-9a-fA-F]){2}(([\s-][0-9a-fA-F]{2}){5})$/.test($.trim(value)));
		},


		// 5. 验证固定电话号码
		telephone: function(value, element){
			return this.optional(element) || (/^(\d{3,4}-)\d{7,8}$/.test($.trim(value)));
		},

		// 6. 验证手机号码
		mobile: function(value, element){
			return this.optional(element) || (/^(13[0-9]|15[0-9]|18[0-9]|14[0-9]|17[0-9])\d{8}$/.test($.trim(value)));
		},

		// 7. 中文日期格式验证
		dateCN: function(value, element){
			var _dateReg = /^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$/ ;
			return this.optional(element) || (_dateReg.test($.trim(value)));
		},

		// 8. 只能输入中文
		chinese: function(value, element){
			value = value.replace(/(^\s*)|(\s*$)/g,"");
			return this.optional(element) || (/^[\u4e00-\u9fa5]+$/gi.test($.trim(value)));
		},

		// 9. 检测特殊字符 ' " ? & $ ~ ^ % 等
		validChar: function(value,element){
			// [`&~%\^\$\?\'\"]
			return this.optional(element) || (!(/[`~\^\'\"]+/g.test($.trim(value))));
		},

		//10. 验证身份证号码
		IDCard: function(value,element){
			return this.optional(element) || _checkIDCard_( $.trim(value) ) ;
		}
	}

});

$.format = function deprecated() {
	throw "$.format has been deprecated. Please use $.validator.format instead.";
};

// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

var pendingRequests = {},
	ajax;
// Use a prefilter if available (1.5+)
if ( $.ajaxPrefilter ) {
	$.ajaxPrefilter(function( settings, _, xhr ) {
		var port = settings.port;
		if ( settings.mode === "abort" ) {
			if ( pendingRequests[port] ) {
				pendingRequests[port].abort();
			}
			pendingRequests[port] = xhr;
		}
	});
} else {
	// Proxy ajax
	ajax = $.ajax;
	$.ajax = function( settings ) {
		var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
			port = ( "port" in settings ? settings : $.ajaxSettings ).port;
		if ( mode === "abort" ) {
			if ( pendingRequests[port] ) {
				pendingRequests[port].abort();
			}
			pendingRequests[port] = ajax.apply(this, arguments);
			return pendingRequests[port];
		}
		return ajax.apply(this, arguments);
	};
}

// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target

$.extend($.fn, {
	validateDelegate: function( delegate, type, handler ) {
		return this.bind(type, function( event ) {
			var target = $(event.target);
			if ( target.is(delegate) ) {
				return handler.apply(target, arguments);
			}
		});
	}
});
	
	// 验证身份证号码，用于 jQuery.validator.addMethod('IDCard', ...);
function _checkIDCard_( idcard ){
   var res = false;
 
   var areas = {11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",
	   			32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北",43:"湖南",44:"广东",
	   			45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",63:"青海",
	   			64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"
	 			};
		 
    // 检测出生日期合法性的方法
    var isValidDate = function(_date){
		var dateReg = /^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$/ ;
		if(dateReg.test(_date)){
			return true; 
		}else{
			return false;
		}
    }

    if(!(/(^\d{15}$)|(^\d{17}([0-9]|X|x)$)/).test(idcard)){
    	 //alert("您的身份证号码非法！\n\n请输入15位或18位身份证号码！");
    	 res = false;
    	 return false;
    }else{
    		// 地区检验
		 if(areas[idcard.substr(0,2)] == null || areas[idcard.substring(0,2)] == ""){ 
	    	//alert("您的身份证号码的前2位号码非法！请输入合法的身份证号码！");
			res = false;
			return false;
	     }else{
	    	 switch(idcard.length){
		   	 	 case 15:
		   	 	 	// 检测出生日期合法性
		   	 	 	if(!isValidDate(parseInt(idcard.substr(6,2),10)+1900+"-"+idcard.substr(8,2)+"-"+idcard.substr(10,2))){
		   	 	 		 //alert("您的15位身份证号码的“出生日期”非法！请输入合法的出生日期！");
		   	 	 		 res = false;	
		   	 	 		 return false;
		   	 	 	}else{
		   	 	 		 res = true;	
		   	 	 	}				   	 	 	
		   	 	 break;
		   	 	 
		   	 	 case 18:
		   	 	 	// 检测出生日期合法性
		   	 	 	if(!isValidDate(idcard.substr(6,4)+"-"+idcard.substr(10,2)+"-"+idcard.substr(12,2))){
		   	 	 		// alert("您的18位身份证号码的“出生日期”非法！请输入合法的出生日期！");
		   	 	 		 res = false;
		   	 	 		 return false;
		   	 	 	}
		   	 	 	// 检验校验码合法性
		   	 	 	 var idcard_arr = idcard.split("");
					 var S = (parseInt(idcard_arr[0],10) + parseInt(idcard_arr[10],10))*7 +
					         (parseInt(idcard_arr[1],10) + parseInt(idcard_arr[11],10))*9 +
							 (parseInt(idcard_arr[2],10) + parseInt(idcard_arr[12],10))*10 +
							 (parseInt(idcard_arr[3],10) + parseInt(idcard_arr[13],10))*5 +
							 (parseInt(idcard_arr[4],10) + parseInt(idcard_arr[14],10))*8 +
							 (parseInt(idcard_arr[5],10) + parseInt(idcard_arr[15],10))*4 +
							 (parseInt(idcard_arr[6],10) + parseInt(idcard_arr[16],10))*2 +
							  parseInt(idcard_arr[7],10)*1 +
							  parseInt(idcard_arr[8],10)*6 +
							  parseInt(idcard_arr[9],10)*3;
						
					  var Y = S % 11;
					  //校验码
					  var JYM = "10X98765432";
					  //计算出的校验位
					  if(JYM.substr(Y, 1) != idcard_arr[17]){
					  	//alert("您的18位身份证号码的最后一位号码非法！请输入合法的身份证号码！");
					  	res = false;
					  	return false;
					  }
		   	 	 	res =  true;
		   	 	 	
		   	 	 break;
	     	  }
	    }			
    }
	    
  return res;
}

function _compareTime_(t1, t2, oper, fmt){
	t1 = t1 || "0000-00-00", t2 = t2 || "0000-00-00";
	oper = oper || ">", fmt = fmt || "yyyy-MM-dd";
	var f = { 'yyyy':1, 'MM':2, 'dd':3, 'HH':4, 'mm':5, 'ss':6 };
	var x = [], f = fmt.replace(/(\w+)/g, function(a, b){
		return f[b];
	}).match(/\w+/g).sort(function(a, b){
		x.push(a - b);
		return a - b;
	});
	
	function _formatTime_(t){
		var i = 0; r = t.match(/\d+/g).sort(function(){
			return x[i++];
		});
		
		return new Date( r[0] +'/'+ r[1] +'/'+ r[2] +' '+ (r[3]||'00') +':'+ (r[4]||'00') +':'+ (r[5]||'00'));
	}
	
	switch( $.trim(oper) ){
		case '>':
			return _formatTime_(t1) > _formatTime_(t2);
			break;
		case '>=':
			return _formatTime_(t1) >= _formatTime_(t2);
			break;
		case '<':
			return _formatTime_(t1) < _formatTime_(t2);
			break;
		case '<=':
			return _formatTime_(t1) <= _formatTime_(t2);
			break;
		case '==':
		case '===':
			return _formatTime_(t1) === _formatTime_(t2);
			break;
		case '!=':
		case '!==':
			return _formatTime_(t1) !== _formatTime_(t2);
			break;
		default:
			return _formatTime_(t1) > _formatTime_(t2);
			break;
	}
}

/** 
	 * 格式化日期显示样式
	 * eg. new Date().format("yyyy-MM-dd"); 
	 */
	Date.prototype.format = function( format ){
		format = format || "yyyy-MM-dd HH:mm:ss";
		
		var fm = {
			"M+" : this.getMonth()+1,
			"d+" : this.getDate(),
			"H+" : this.getHours(),
			"m+" : this.getMinutes(),
			"s+" : this.getSeconds(),
			"q+" : Math.floor( (this.getMonth()+3)/3 ),
			"S"  : this.getMilliseconds()
		};
			
		if( /(y+)/.test( format ) ){
			format = format.replace( RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length) );
		}
		
		for( var f in fm ){
			if( new RegExp("("+ f +")").test( format ) ){
				format = format.replace( RegExp.$1, RegExp.$1.length == 1 ? fm[f] : ("00"+fm[f]).substr( (""+fm[f]).length ) );
			}
		}
		
		return format;
	}; 	

}));
},{}],106:[function(require,module,exports){

module.exports = (function(window, undefined){
"use strict";

var isLayui = window.layui && layui.define, win, ready = {
  getPath: function(){
    var js = document.scripts, script = js[js.length - 1], jsPath = script.src;
    if(script.getAttribute('merge')) return;
    return jsPath.substring(0, jsPath.lastIndexOf("/") + 1);
  }(),

  config: {}, end: {}, minIndex: 0, minLeft: [],
  btn: ['&#x786E;&#x5B9A;', '&#x53D6;&#x6D88;'],

  //五种原始层模式
  type: ['dialog', 'page', 'iframe', 'loading', 'tips']
};

//默认内置方法。
var layer = {
  v: '3.0.3',
  ie: function(){ //ie版本
    var agent = navigator.userAgent.toLowerCase();
    return (!!window.ActiveXObject || "ActiveXObject" in window) ? (
      (agent.match(/msie\s(\d+)/) || [])[1] || '11' //由于ie11并没有msie的标识
    ) : false;
  }(),
  index: (window.layer && window.layer.v) ? 100000 : 0,
  path: ready.getPath,
  config: function(options, fn){
    options = options || {};
    layer.cache = ready.config = $.extend({}, ready.config, options);
    layer.path = ready.config.path || layer.path;
    typeof options.extend === 'string' && (options.extend = [options.extend]);
    
    if(ready.config.path) layer.ready();
    
    if(!options.extend) return this;
    
    isLayui 
      ? layui.addcss('modules/layer/' + options.extend)
    : layer.link('skin/' + options.extend);
    
    return this;
  },
  
  //载入CSS配件
  link: function(href, fn, cssname){
    
    //未设置路径，则不主动加载css
    if(!layer.path) return;
    
    var head = $('head')[0], link = document.createElement('link');
    if(typeof fn === 'string') cssname = fn;
    var app = (cssname || href).replace(/\.|\//g, '');
    var id = 'layuicss-'+app, timeout = 0;
    
    link.rel = 'stylesheet';
    link.href = layer.path + href;
    link.id = id;
    
    if(!$('#'+ id)[0]){
      head.appendChild(link);
    }
    
    if(typeof fn !== 'function') return;
    
    //轮询css是否加载完毕
    (function poll() {
      if(++timeout > 8 * 1000 / 100){
        return window.console && console.error('layer.css: Invalid');
      };
      parseInt($('#'+id).css('width')) === 1989 ? fn() : setTimeout(poll, 100);
    }());
  },
  
  ready: function(callback){
    var cssname = 'skinlayercss', ver = '303';
    isLayui ? layui.addcss('modules/layer/default/layer.css?v='+layer.v+ver, callback, cssname)
    : layer.link('skin/default/layer.css?v='+layer.v+ver, callback, cssname);
    return this;
  },
  
  //各种快捷引用
  alert: function(content, options, yes){
    var type = typeof options === 'function';
    if(type) yes = options;
    return layer.open($.extend({
      content: content,
      yes: yes
    }, type ? {} : options));
  }, 
  
  confirm: function(content, options, yes, cancel){ 
    var type = typeof options === 'function';
    if(type){
      cancel = yes;
      yes = options;
    }
    return layer.open($.extend({
      content: content,
      btn: ready.btn,
      yes: yes,
      btn2: cancel
    }, type ? {} : options));
  },
  
  msg: function(content, options, end){ //最常用提示层
    var type = typeof options === 'function', rskin = ready.config.skin;
    var skin = (rskin ? rskin + ' ' + rskin + '-msg' : '')||'layui-layer-msg';
    var anim = doms.anim.length - 1;
    if(type) end = options;
    return layer.open($.extend({
      content: content,
      time: 3000,
      shade: false,
      skin: skin,
      title: false,
      closeBtn: false,
      btn: false,
      resize: false,
      end: end
    }, (type && !ready.config.skin) ? {
      skin: skin + ' layui-layer-hui',
      anim: anim
    } : function(){
       options = options || {};
       if(options.icon === -1 || options.icon === undefined && !ready.config.skin){
         options.skin = skin + ' ' + (options.skin||'layui-layer-hui');
       }
       return options;
    }()));  
  },
  
  load: function(icon, options){
    return layer.open($.extend({
      type: 3,
      icon: icon || 0,
      resize: false,
      shade: 0.01
    }, options));
  }, 
  
  tips: function(content, follow, options){
    return layer.open($.extend({
      type: 4,
      content: [content, follow],
      closeBtn: false,
      time: 3000,
      shade: false,
      resize: false,
      fixed: false,
      maxWidth: 210
    }, options));
  }
};

var Class = function(setings){  
  var that = this;
  that.index = ++layer.index;
  that.config = $.extend({}, that.config, ready.config, setings);
  document.body ? that.creat() : setTimeout(function(){
    that.creat();
  }, 30);
};

Class.pt = Class.prototype;

//缓存常用字符
var doms = ['layui-layer', '.layui-layer-title', '.layui-layer-main', '.layui-layer-dialog', 'layui-layer-iframe', 'layui-layer-content', 'layui-layer-btn', 'layui-layer-close'];
doms.anim = ['layui-anim', 'layui-anim-01', 'layui-anim-02', 'layui-anim-03', 'layui-anim-04', 'layui-anim-05', 'layui-anim-06'];

//默认配置
Class.pt.config = {
  type: 0,
  shade: 0.3,
  fixed: true,
  move: doms[1],
  title: '&#x4FE1;&#x606F;',
  offset: 'auto',
  area: 'auto',
  closeBtn: 1,
  time: 0, //0表示不自动关闭
  zIndex: 19891014, 
  maxWidth: 360,
  anim: 0,
  isOutAnim: true,
  icon: -1,
  moveType: 1,
  resize: true,
  scrollbar: true, //是否允许浏览器滚动条
  tips: 2
};

//容器
Class.pt.vessel = function(conType, callback){
  var that = this, times = that.index, config = that.config;
  var zIndex = config.zIndex + times, titype = typeof config.title === 'object';
  var ismax = config.maxmin && (config.type === 1 || config.type === 2);
  var titleHTML = (config.title ? '<div class="layui-layer-title" style="'+ (titype ? config.title[1] : '') +'">' 
    + (titype ? config.title[0] : config.title) 
  + '</div>' : '');
  
  config.zIndex = zIndex;
  callback([
    //遮罩
    config.shade ? ('<div class="layui-layer-shade" id="layui-layer-shade'+ times +'" times="'+ times +'" style="'+ ('z-index:'+ (zIndex-1) +'; background-color:'+ (config.shade[1]||'#000') +'; opacity:'+ (config.shade[0]||config.shade) +'; filter:alpha(opacity='+ (config.shade[0]*100||config.shade*100) +');') +'"></div>') : '',
    
    //主体
    '<div class="'+ doms[0] + (' layui-layer-'+ready.type[config.type]) + (((config.type == 0 || config.type == 2) && !config.shade) ? ' layui-layer-border' : '') + ' ' + (config.skin||'') +'" id="'+ doms[0] + times +'" type="'+ ready.type[config.type] +'" times="'+ times +'" showtime="'+ config.time +'" conType="'+ (conType ? 'object' : 'string') +'" style="z-index: '+ zIndex +'; width:'+ config.area[0] + ';height:' + config.area[1] + (config.fixed ? '' : ';position:absolute;') +'">'
      + (conType && config.type != 2 ? '' : titleHTML)
      + '<div id="'+ (config.id||'') +'" class="layui-layer-content'+ ((config.type == 0 && config.icon !== -1) ? ' layui-layer-padding' :'') + (config.type == 3 ? ' layui-layer-loading'+config.icon : '') +'">'
        + (config.type == 0 && config.icon !== -1 ? '<i class="layui-layer-ico layui-layer-ico'+ config.icon +'"></i>' : '')
        + (config.type == 1 && conType ? '' : (config.content||''))
      + '</div>'
      + '<span class="layui-layer-setwin">'+ function(){
        var closebtn = ismax ? '<a class="layui-layer-min" href="javascript:;"><cite></cite></a><a class="layui-layer-ico layui-layer-max" href="javascript:;"></a>' : '';
        config.closeBtn && (closebtn += '<a class="layui-layer-ico '+ doms[7] +' '+ doms[7] + (config.title ? config.closeBtn : (config.type == 4 ? '1' : '2')) +'" href="javascript:;"></a>');
        return closebtn;
      }() + '</span>'
      + (config.btn ? function(){
        var button = '';
        typeof config.btn === 'string' && (config.btn = [config.btn]);
        for(var i = 0, len = config.btn.length; i < len; i++){
          button += '<a class="'+ doms[6] +''+ i + (i===0 ? " btn btn-primary btn-sm" : " btn btn-default btn-sm") +'">'+ config.btn[i] +'</a>'
        }
        return '<div class="'+ doms[6] + (config.btnAlign ? (' layui-layer-btn-' + config.btnAlign) : '') +'">'+ button +'</div>'
      }() : '')
      + (config.resize ? '<span class="layui-layer-resize"></span>' : '')
    + '</div>'
  ], titleHTML, $('<div class="layui-layer-move"></div>'));
  return that;
};

//创建骨架
Class.pt.creat = function(){
  var that = this
  ,config = that.config
  ,times = that.index, nodeIndex
  ,content = config.content
  ,conType = typeof content === 'object'
  ,body = $('body');
  
  if(config.id && $('#'+config.id)[0])  return;

  if(typeof config.area === 'string'){
    config.area = config.area === 'auto' ? ['', ''] : [config.area, ''];
  }
  
  //anim兼容旧版shift
  if(config.shift){
    config.anim = config.shift;
  }
  
  if(layer.ie == 6){
    config.fixed = false;
  }
  
  switch(config.type){
    case 0:
      config.btn = ('btn' in config) ? config.btn : ready.btn[0];
      layer.closeAll('dialog');
    break;
    case 2:
      var content = config.content = conType ? config.content : [config.content, 'auto'];
      config.content = '<iframe scrolling="'+ (config.content[1]||'auto') +'" allowtransparency="true" id="'+ doms[4] +''+ times +'" name="'+ doms[4] +''+ times +'" onload="this.className=\'\';" class="layui-layer-load" frameborder="0" src="' + config.content[0] + '"></iframe>';
    break;
    case 3:
      delete config.title;
      delete config.closeBtn;
      config.icon === -1 && (config.icon === 0);
      layer.closeAll('loading');
    break;
    case 4:
      conType || (config.content = [config.content, 'body']);
      config.follow = config.content[1];
      config.content = config.content[0] + '<i class="layui-layer-TipsG"></i>';
      delete config.title;
      config.tips = typeof config.tips === 'object' ? config.tips : [config.tips, true];
      config.tipsMore || layer.closeAll('tips');
    break;
  }
  
  //建立容器
  that.vessel(conType, function(html, titleHTML, moveElem){
    body.append(html[0]);
    conType ? function(){
      (config.type == 2 || config.type == 4) ? function(){
        $('body').append(html[1]);
      }() : function(){
        if(!content.parents('.'+doms[0])[0]){
          content.data('display', content.css('display')).show().addClass('layui-layer-wrap').wrap(html[1]);
          $('#'+ doms[0] + times).find('.'+doms[5]).before(titleHTML);
        }
      }();
    }() : body.append(html[1]);
    $('.layui-layer-move')[0] || body.append(ready.moveElem = moveElem);
    that.layero = $('#'+ doms[0] + times);
    config.scrollbar || doms.html.css('overflow', 'hidden').attr('layer-full', times);
  }).auto(times);

  config.type == 2 && layer.ie == 6 && that.layero.find('iframe').attr('src', content[0]);

  //坐标自适应浏览器窗口尺寸
  config.type == 4 ? that.tips() : that.offset();
  if(config.fixed){
    win.on('resize', function(){
      that.offset();
      (/^\d+%$/.test(config.area[0]) || /^\d+%$/.test(config.area[1])) && that.auto(times);
      config.type == 4 && that.tips();
    });
  }
  
  config.time <= 0 || setTimeout(function(){
    layer.close(that.index)
  }, config.time);
  that.move().callback();
  
  //为兼容jQuery3.0的css动画影响元素尺寸计算
  if(doms.anim[config.anim]){
    that.layero.addClass(doms.anim[config.anim]);
  };
  
  //记录关闭动画
  if(config.isOutAnim){
    that.layero.data('isOutAnim', true);
  }
};

//自适应
Class.pt.auto = function(index){
  var that = this, config = that.config, layero = $('#'+ doms[0] + index);
  if(config.area[0] === '' && config.maxWidth > 0){
    //为了修复IE7下一个让人难以理解的bug
    if(layer.ie && layer.ie < 8 && config.btn){
      layero.width(layero.innerWidth());
    }
    layero.outerWidth() > config.maxWidth && layero.width(config.maxWidth);
  }
  var area = [layero.innerWidth(), layero.innerHeight()];
  var titHeight = layero.find(doms[1]).outerHeight() || 0;
  var btnHeight = layero.find('.'+doms[6]).outerHeight() || 0;
  function setHeight(elem){
    elem = layero.find(elem);
    elem.height(area[1] - titHeight - btnHeight - 2*(parseFloat(elem.css('padding-top'))|0));
  }
  switch(config.type){
    case 2: 
      setHeight('iframe');
    break;
    default:
      if(config.area[1] === ''){
        if(config.fixed && area[1] >= win.height()){
          area[1] = win.height();
          setHeight('.'+doms[5]);
        }
      } else {
        setHeight('.'+doms[5]);
      }
    break;
  }
  return that;
};

//计算坐标
Class.pt.offset = function(){
  var that = this, config = that.config, layero = that.layero;
  var area = [layero.outerWidth(), layero.outerHeight()];
  var type = typeof config.offset === 'object';
  that.offsetTop = (win.height() - area[1])/2;
  that.offsetLeft = (win.width() - area[0])/2;
  
  if(type){
    that.offsetTop = config.offset[0];
    that.offsetLeft = config.offset[1]||that.offsetLeft;
  } else if(config.offset !== 'auto'){
    
    if(config.offset === 't'){ //上
      that.offsetTop = 0;
    } else if(config.offset === 'r'){ //右
      that.offsetLeft = win.width() - area[0];
    } else if(config.offset === 'b'){ //下
      that.offsetTop = win.height() - area[1];
    } else if(config.offset === 'l'){ //左
      that.offsetLeft = 0;
    } else if(config.offset === 'lt'){ //左上角
      that.offsetTop = 0;
      that.offsetLeft = 0;
    } else if(config.offset === 'lb'){ //左下角
      that.offsetTop = win.height() - area[1];
      that.offsetLeft = 0;
    } else if(config.offset === 'rt'){ //右上角
      that.offsetTop = 0;
      that.offsetLeft = win.width() - area[0];
    } else if(config.offset === 'rb'){ //右下角
      that.offsetTop = win.height() - area[1];
      that.offsetLeft = win.width() - area[0];
    } else {
      that.offsetTop = config.offset;
    }
    
  }
 
  if(!config.fixed){
    that.offsetTop = /%$/.test(that.offsetTop) ? 
      win.height()*parseFloat(that.offsetTop)/100
    : parseFloat(that.offsetTop);
    that.offsetLeft = /%$/.test(that.offsetLeft) ? 
      win.width()*parseFloat(that.offsetLeft)/100
    : parseFloat(that.offsetLeft);
    that.offsetTop += win.scrollTop();
    that.offsetLeft += win.scrollLeft();
  }
  
  if(layero.attr('minLeft')){
    that.offsetTop = win.height() - (layero.find(doms[1]).outerHeight() || 0);
    that.offsetLeft = layero.css('left');
  }

  layero.css({top: that.offsetTop, left: that.offsetLeft});
};

//Tips
Class.pt.tips = function(){
  var that = this, config = that.config, layero = that.layero;
  var layArea = [layero.outerWidth(), layero.outerHeight()], follow = $(config.follow);
  if(!follow[0]) follow = $('body');
  var goal = {
    width: follow.outerWidth(),
    height: follow.outerHeight(),
    top: follow.offset().top,
    left: follow.offset().left
  }, tipsG = layero.find('.layui-layer-TipsG');
  
  var guide = config.tips[0];
  // config.tips[1] || tipsG.remove();
  
  goal.autoLeft = function(){
    if(goal.left + layArea[0] - win.width() > 0){
      goal.tipLeft = goal.left + goal.width - layArea[0];
      tipsG.css({right: 12, left: 'auto'});
    } else {
      goal.tipLeft = goal.left;
    };
  };
  
  //辨别tips的方位
  goal.where = [function(){ //上        
    goal.autoLeft();
    goal.tipTop = goal.top - layArea[1] - 10;
    tipsG.removeClass('layui-layer-TipsB').addClass('layui-layer-TipsT').css('border-right-color', config.tips[1]);
  }, function(){ //右
    goal.tipLeft = goal.left + goal.width + 10;
    goal.tipTop = goal.top;
    tipsG.removeClass('layui-layer-TipsL').addClass('layui-layer-TipsR').css('border-bottom-color', config.tips[1]); 
  }, function(){ //下
    goal.autoLeft();
    goal.tipTop = goal.top + goal.height + 10;
    tipsG.removeClass('layui-layer-TipsT').addClass('layui-layer-TipsB').css('border-right-color', config.tips[1]);
  }, function(){ //左
    goal.tipLeft = goal.left - layArea[0] - 10;
    goal.tipTop = goal.top;
    tipsG.removeClass('layui-layer-TipsR').addClass('layui-layer-TipsL').css('border-bottom-color', config.tips[1]);
  }];
  goal.where[guide-1]();
  
  /* 8*2为小三角形占据的空间 */
  if(guide === 1){
    goal.top - (win.scrollTop() + layArea[1] + 8*2) < 0 && goal.where[2]();
  } else if(guide === 2){
    win.width() - (goal.left + goal.width + layArea[0] + 8*2) > 0 || goal.where[3]()
  } else if(guide === 3){
    (goal.top - win.scrollTop() + goal.height + layArea[1] + 8*2) - win.height() > 0 && goal.where[0]();
  } else if(guide === 4){
     layArea[0] + 8*2 - goal.left > 0 && goal.where[1]()
  }

  layero.find('.'+doms[5]).css({
    'background-color': config.tips[1], 
    'padding-right': (config.closeBtn ? '30px' : '')
  });
  layero.css({
    left: goal.tipLeft - (config.fixed ? win.scrollLeft() : 0), 
    top: goal.tipTop  - (config.fixed ? win.scrollTop() : 0)
  });
}

//拖拽层
Class.pt.move = function(){
  var that = this
  ,config = that.config
  ,_DOC = $(document)
  ,layero = that.layero
  ,moveElem = layero.find(config.move)
  ,resizeElem = layero.find('.layui-layer-resize')
  ,dict = {};
  
  if(config.move){
    moveElem.css('cursor', 'move');
  }

  moveElem.on('mousedown', function(e){
    e.preventDefault();
    if(config.move){
      dict.moveStart = true;
      dict.offset = [
        e.clientX - parseFloat(layero.css('left'))
        ,e.clientY - parseFloat(layero.css('top'))
      ];
      ready.moveElem.css('cursor', 'move').show();
    }
  });
  
  resizeElem.on('mousedown', function(e){
    e.preventDefault();
    dict.resizeStart = true;
    dict.offset = [e.clientX, e.clientY];
    dict.area = [
      layero.outerWidth()
      ,layero.outerHeight()
    ];
    ready.moveElem.css('cursor', 'se-resize').show();
  });
  
  _DOC.on('mousemove', function(e){

    //拖拽移动
    if(dict.moveStart){
      var X = e.clientX - dict.offset[0]
      ,Y = e.clientY - dict.offset[1]
      ,fixed = layero.css('position') === 'fixed';
      
      e.preventDefault();
      
      dict.stX = fixed ? 0 : win.scrollLeft();
      dict.stY = fixed ? 0 : win.scrollTop();

      //控制元素不被拖出窗口外
      if(!config.moveOut){
        var setRig = win.width() - layero.outerWidth() + dict.stX
        ,setBot = win.height() - layero.outerHeight() + dict.stY;  
        X < dict.stX && (X = dict.stX);
        X > setRig && (X = setRig); 
        Y < dict.stY && (Y = dict.stY);
        Y > setBot && (Y = setBot);
      }
      
      layero.css({
        left: X
        ,top: Y
      });
    }
    
    //Resize
    if(config.resize && dict.resizeStart){
      var X = e.clientX - dict.offset[0]
      ,Y = e.clientY - dict.offset[1];
      
      e.preventDefault();
      
      layer.style(that.index, {
        width: dict.area[0] + X
        ,height: dict.area[1] + Y
      })
      dict.isResize = true;
      config.resizing && config.resizing(layero);
    }
  }).on('mouseup', function(e){
    if(dict.moveStart){
      delete dict.moveStart;
      ready.moveElem.hide();
      config.moveEnd && config.moveEnd(layero);
    }
    if(dict.resizeStart){
      delete dict.resizeStart;
      ready.moveElem.hide();
    }
  });
  
  return that;
};

Class.pt.callback = function(){
  var that = this, layero = that.layero, config = that.config;
  that.openLayer();
  if(config.success){
    if(config.type == 2){
      layero.find('iframe').on('load', function(){
        config.success(layero, that.index);
      });
    } else {
      config.success(layero, that.index);
    }
  }
  layer.ie == 6 && that.IE6(layero);
  
  //按钮
  layero.find('.'+ doms[6]).children('a').on('click', function(){
    var index = $(this).index();
    if(index === 0){
      if(config.yes){
        config.yes(that.index, layero)
      } else if(config['btn1']){
        config['btn1'](that.index, layero)
      } else {
        layer.close(that.index);
      }
    } else {
      var close = config['btn'+(index+1)] && config['btn'+(index+1)](that.index, layero);
      close === false || layer.close(that.index);
    }
  });
  
  //取消
  function cancel(){
    var close = config.cancel && config.cancel(that.index, layero);
    close === false || layer.close(that.index);
  }
  
  //右上角关闭回调
  layero.find('.'+ doms[7]).on('click', cancel);
  
  //点遮罩关闭
  if(config.shadeClose){
    $('#layui-layer-shade'+ that.index).on('click', function(){
      layer.close(that.index);
    });
  } 
  
  //最小化
  layero.find('.layui-layer-min').on('click', function(){
    var min = config.min && config.min(layero);
    min === false || layer.min(that.index, config); 
  });
  
  //全屏/还原
  layero.find('.layui-layer-max').on('click', function(){
    if($(this).hasClass('layui-layer-maxmin')){
      layer.restore(that.index);
      config.restore && config.restore(layero);
    } else {
      layer.full(that.index, config);
      setTimeout(function(){
        config.full && config.full(layero);
      }, 100);
    }
  });

  config.end && (ready.end[that.index] = config.end);
};

//for ie6 恢复select
ready.reselect = function(){
  $.each($('select'), function(index , value){
    var sthis = $(this);
    if(!sthis.parents('.'+doms[0])[0]){
      (sthis.attr('layer') == 1 && $('.'+doms[0]).length < 1) && sthis.removeAttr('layer').show(); 
    }
    sthis = null;
  });
}; 

Class.pt.IE6 = function(layero){
  //隐藏select
  $('select').each(function(index , value){
    var sthis = $(this);
    if(!sthis.parents('.'+doms[0])[0]){
      sthis.css('display') === 'none' || sthis.attr({'layer' : '1'}).hide();
    }
    sthis = null;
  });
};

//需依赖原型的对外方法
Class.pt.openLayer = function(){
  var that = this;
  
  //置顶当前窗口
  layer.zIndex = that.config.zIndex;
  layer.setTop = function(layero){
    var setZindex = function(){
      layer.zIndex++;
      layero.css('z-index', layer.zIndex + 1);
    };
    layer.zIndex = parseInt(layero[0].style.zIndex);
    layero.on('mousedown', setZindex);
    return layer.zIndex;
  };
};

ready.record = function(layero){
  var area = [
    layero.width(),
    layero.height(),
    layero.position().top, 
    layero.position().left + parseFloat(layero.css('margin-left'))
  ];
  layero.find('.layui-layer-max').addClass('layui-layer-maxmin');
  layero.attr({area: area});
};

ready.rescollbar = function(index){
  if(doms.html.attr('layer-full') == index){
    if(doms.html[0].style.removeProperty){
      doms.html[0].style.removeProperty('overflow');
    } else {
      doms.html[0].style.removeAttribute('overflow');
    }
    doms.html.removeAttr('layer-full');
  }
};

/** 内置成员 */

window.layer = layer;

//获取子iframe的DOM
layer.getChildFrame = function(selector, index){
  index = index || $('.'+doms[4]).attr('times');
  return $('#'+ doms[0] + index).find('iframe').contents().find(selector);  
};

//得到当前iframe层的索引，子iframe时使用
layer.getFrameIndex = function(name){
  return $('#'+ name).parents('.'+doms[4]).attr('times');
};

//iframe层自适应宽高
layer.iframeAuto = function(index){
  if(!index) return;
  var heg = layer.getChildFrame('html', index).outerHeight();
  var layero = $('#'+ doms[0] + index);
  var titHeight = layero.find(doms[1]).outerHeight() || 0;
  var btnHeight = layero.find('.'+doms[6]).outerHeight() || 0;
  layero.css({height: heg + titHeight + btnHeight});
  layero.find('iframe').css({height: heg});
};

//重置iframe url
layer.iframeSrc = function(index, url){
  $('#'+ doms[0] + index).find('iframe').attr('src', url);
};

//设定层的样式
layer.style = function(index, options, limit){
  var layero = $('#'+ doms[0] + index)
  ,contElem = layero.find('.layui-layer-content')
  ,type = layero.attr('type')
  ,titHeight = layero.find(doms[1]).outerHeight() || 0
  ,btnHeight = layero.find('.'+doms[6]).outerHeight() || 0
  ,minLeft = layero.attr('minLeft');
  
  if(type === ready.type[3] || type === ready.type[4]){
    return;
  }
  
  if(!limit){
    if(parseFloat(options.width) <= 260){
      options.width = 260;
    };
    
    if(parseFloat(options.height) - titHeight - btnHeight <= 64){
      options.height = 64 + titHeight + btnHeight;
    };
  }
  
  layero.css(options);
  btnHeight = layero.find('.'+doms[6]).outerHeight();
  
  if(type === ready.type[2]){
    layero.find('iframe').css({
      height: parseFloat(options.height) - titHeight - btnHeight
    });
  } else {
    contElem.css({
      height: parseFloat(options.height) - titHeight - btnHeight
      - parseFloat(contElem.css('padding-top'))
      - parseFloat(contElem.css('padding-bottom'))
    })
  }
};

//最小化
layer.min = function(index, options){
  var layero = $('#'+ doms[0] + index)
  ,titHeight = layero.find(doms[1]).outerHeight() || 0
  ,left = layero.attr('minLeft') || (181*ready.minIndex)+'px'
  ,position = layero.css('position');
  
  ready.record(layero);
  
  if(ready.minLeft[0]){
    left = ready.minLeft[0];
    ready.minLeft.shift();
  }
  
  layero.attr('position', position);
  
  layer.style(index, {
    width: 180
    ,height: titHeight
    ,left: left
    ,top: win.height() - titHeight
    ,position: 'fixed'
    ,overflow: 'hidden'
  }, true);

  layero.find('.layui-layer-min').hide();
  layero.attr('type') === 'page' && layero.find(doms[4]).hide();
  ready.rescollbar(index);
  
  if(!layero.attr('minLeft')){
    ready.minIndex++;
  }
  layero.attr('minLeft', left);
};

//还原
layer.restore = function(index){
  var layero = $('#'+ doms[0] + index), area = layero.attr('area').split(',');
  var type = layero.attr('type');
  layer.style(index, {
    width: parseFloat(area[0]), 
    height: parseFloat(area[1]), 
    top: parseFloat(area[2]), 
    left: parseFloat(area[3]),
    position: layero.attr('position'),
    overflow: 'visible'
  }, true);
  layero.find('.layui-layer-max').removeClass('layui-layer-maxmin');
  layero.find('.layui-layer-min').show();
  layero.attr('type') === 'page' && layero.find(doms[4]).show();
  ready.rescollbar(index);
};

//全屏
layer.full = function(index){
  var layero = $('#'+ doms[0] + index), timer;
  ready.record(layero);
  if(!doms.html.attr('layer-full')){
    doms.html.css('overflow','hidden').attr('layer-full', index);
  }
  clearTimeout(timer);
  timer = setTimeout(function(){
    var isfix = layero.css('position') === 'fixed';
    layer.style(index, {
      top: isfix ? 0 : win.scrollTop(),
      left: isfix ? 0 : win.scrollLeft(),
      width: win.width(),
      height: win.height()
    }, true);
    layero.find('.layui-layer-min').hide();
  }, 100);
};

//改变title
layer.title = function(name, index){
  var title = $('#'+ doms[0] + (index||layer.index)).find(doms[1]);
  title.html(name);
};

//关闭layer总方法
layer.close = function(index){
  var layero = $('#'+ doms[0] + index), type = layero.attr('type'), closeAnim = 'layer-anim-close';
  if(!layero[0]) return;
  var WRAP = 'layui-layer-wrap', remove = function(){
    if(type === ready.type[1] && layero.attr('conType') === 'object'){
      layero.children(':not(.'+ doms[5] +')').remove();
      var wrap = layero.find('.'+WRAP);
      for(var i = 0; i < 2; i++){
        wrap.unwrap();
      }
      wrap.css('display', wrap.data('display')).removeClass(WRAP);
    } else {
      //低版本IE 回收 iframe
      if(type === ready.type[2]){
        try {
          var iframe = $('#'+doms[4]+index)[0];
          iframe.contentWindow.document.write('');
          iframe.contentWindow.close();
          layero.find('.'+doms[5])[0].removeChild(iframe);
        } catch(e){}
      }
      layero[0].innerHTML = '';
      layero.remove();
    }
    typeof ready.end[index] === 'function' && ready.end[index]();
    delete ready.end[index];
  };
  
  if(layero.data('isOutAnim')){
    layero.addClass(closeAnim);
  }
  
  $('#layui-layer-moves, #layui-layer-shade' + index).remove();
  layer.ie == 6 && ready.reselect();
  ready.rescollbar(index); 
  if(layero.attr('minLeft')){
    ready.minIndex--;
    ready.minLeft.push(layero.attr('minLeft'));
  }
  
  if((layer.ie && layer.ie < 10) || !layero.data('isOutAnim')){
    remove()
  } else {
    // setTimeout(function(){
    //   remove();
    // }, 200);
    remove();
  }
};

//关闭所有层
layer.closeAll = function(type){
  $.each($('.'+doms[0]), function(){
    var othis = $(this);
    var is = type ? (othis.attr('type') === type) : 1;
    is && layer.close(othis.attr('times'));
    is = null;
  });
};

/** 

  拓展模块，layui开始合并在一起

 */

var cache = layer.cache||{}, skin = function(type){
  return (cache.skin ? (' ' + cache.skin + ' ' + cache.skin + '-'+type) : '');
}; 
 
//仿系统prompt
layer.prompt = function(options, yes){
  var style = '';
  options = options || {};
  
  if(typeof options === 'function') yes = options;
  
  if(options.area){
    var area = options.area;
    style = 'style="width: '+ area[0] +'; height: '+ area[1] + ';"';
    delete options.area;
  }
  var prompt, content = options.formType == 2 ? '<textarea class="layui-layer-input form-control"' + style +'>' + (options.value||'') +'</textarea>' : function(){
    return '<input type="'+ (options.formType == 1 ? 'password' : 'text') +'" class="layui-layer-input form-control" value="'+ (options.value||'') +'">';
  }();
  
  var success = options.success;
  delete options.success;
  
  return layer.open($.extend({
    type: 1
    ,btn: ['&#x786E;&#x5B9A;','&#x53D6;&#x6D88;']
    ,content: content
    ,skin: 'layui-layer-prompt' + skin('prompt')
    ,maxWidth: win.width()
    ,success: function(layero){
      prompt = layero.find('.layui-layer-input');
      prompt.focus();
      typeof success === 'function' && success(layero);
    }
    ,resize: false
    ,yes: function(index){
      var value = prompt.val();
      if(value === ''){
        prompt.focus();
      } else if(value.length > (options.maxlength||500)) {
        layer.tips('&#x6700;&#x591A;&#x8F93;&#x5165;'+ (options.maxlength || 500) +'&#x4E2A;&#x5B57;&#x6570;', prompt, {tips: 1});
      } else {
        yes && yes(value, index, prompt);
      }
    }
  }, options));
};

//tab层
layer.tab = function(options){
  options = options || {};
  
  var tab = options.tab || {}
  ,success = options.success;
  
  delete options.success;
  
  return layer.open($.extend({
    type: 1,
    skin: 'layui-layer-tab' + skin('tab'),
    resize: false,
    title: function(){
      var len = tab.length, ii = 1, str = '';
      if(len > 0){
        str = '<span class="layui-layer-tabnow">'+ tab[0].title +'</span>';
        for(; ii < len; ii++){
          str += '<span>'+ tab[ii].title +'</span>';
        }
      }
      return str;
    }(),
    content: '<ul class="layui-layer-tabmain">'+ function(){
      var len = tab.length, ii = 1, str = '';
      if(len > 0){
        str = '<li class="layui-layer-tabli xubox_tab_layer">'+ (tab[0].content || 'no content') +'</li>';
        for(; ii < len; ii++){
          str += '<li class="layui-layer-tabli">'+ (tab[ii].content || 'no  content') +'</li>';
        }
      }
      return str;
    }() +'</ul>',
    success: function(layero){
      var btn = layero.find('.layui-layer-title').children();
      var main = layero.find('.layui-layer-tabmain').children();
      btn.on('mousedown', function(e){
        e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;
        var othis = $(this), index = othis.index();
        othis.addClass('layui-layer-tabnow').siblings().removeClass('layui-layer-tabnow');
        main.eq(index).show().siblings().hide();
        typeof options.change === 'function' && options.change(index);
      });
      typeof success === 'function' && success(layero);
    }
  }, options));
};

//相册层
layer.photos = function(options, loop, key){
  var dict = {};
  options = options || {};
  if(!options.photos) return;
  var type = options.photos.constructor === Object;
  var photos = type ? options.photos : {}, data = photos.data || [];
  var start = photos.start || 0;
  dict.imgIndex = (start|0) + 1;
  
  options.img = options.img || 'img';
  
  var success = options.success;
  delete options.success;

  if(!type){ //页面直接获取
    var parent = $(options.photos), pushData = function(){
      data = [];
      parent.find(options.img).each(function(index){
        var othis = $(this);
        othis.attr('layer-index', index);
        data.push({
          alt: othis.attr('alt'),
          pid: othis.attr('layer-pid'),
          src: othis.attr('layer-src') || othis.attr('src'),
          thumb: othis.attr('src')
        });
      })
    };
    
    pushData();
    
    if (data.length === 0) return;
    
    loop || parent.on('click', options.img, function(){
      var othis = $(this), index = othis.attr('layer-index'); 
      layer.photos($.extend(options, {
        photos: {
          start: index,
          data: data,
          tab: options.tab
        },
        full: options.full
      }), true);
      pushData();
    })
    
    //不直接弹出
    if(!loop) return;
    
  } else if (data.length === 0){
    return layer.msg('&#x6CA1;&#x6709;&#x56FE;&#x7247;');
  }
  
  //上一张
  dict.imgprev = function(key){
    dict.imgIndex--;
    if(dict.imgIndex < 1){
      dict.imgIndex = data.length;
    }
    dict.tabimg(key);
  };
  
  //下一张
  dict.imgnext = function(key,errorMsg){
    dict.imgIndex++;
    if(dict.imgIndex > data.length){
      dict.imgIndex = 1;
      if (errorMsg) {return};
    }
    dict.tabimg(key)
  };
  
  //方向键
  dict.keyup = function(event){
    if(!dict.end){
      var code = event.keyCode;
      event.preventDefault();
      if(code === 37){
        dict.imgprev(true);
      } else if(code === 39) {
        dict.imgnext(true);
      } else if(code === 27) {
        layer.close(dict.index);
      }
    }
  }
  
  //切换
  dict.tabimg = function(key){
    if(data.length <= 1) return;
    photos.start = dict.imgIndex - 1;
    layer.close(dict.index);
    return layer.photos(options, true, key);
    setTimeout(function(){
      layer.photos(options, true, key);
    }, 200);
  }
  
  //一些动作
  dict.event = function(){
    dict.bigimg.hover(function(){
      dict.imgsee.show();
    }, function(){
      dict.imgsee.hide();
    });
    
    dict.bigimg.find('.layui-layer-imgprev').on('click', function(event){
      event.preventDefault();
      dict.imgprev();
    });  
    
    dict.bigimg.find('.layui-layer-imgnext').on('click', function(event){     
      event.preventDefault();
      dict.imgnext();
    });
    
    $(document).on('keyup', dict.keyup);
  };
  
  //图片预加载
  function loadImage(url, callback, error) {   
    var img = new Image();
    img.src = url; 
    if(img.complete){
      return callback(img);
    }
    img.onload = function(){
      img.onload = null;
      callback(img);
    };
    img.onerror = function(e){
      img.onerror = null;
      error(e);
    };  
  };
  
  dict.loadi = layer.load(1, {
    shade: 'shade' in options ? false : 0.9,
    scrollbar: false
  });

  loadImage(data[start].src, function(img){
    layer.close(dict.loadi);
    dict.index = layer.open($.extend({
      type: 1,
      id: 'layui-layer-photos',
      area: function(){
        var imgarea = [img.width, img.height];
        var winarea = [$(window).width() - 100, $(window).height() - 100];
        
        //如果 实际图片的宽或者高比 屏幕大（那么进行缩放）
        if(!options.full && (imgarea[0]>winarea[0]||imgarea[1]>winarea[1])){
          var wh = [imgarea[0]/winarea[0],imgarea[1]/winarea[1]];//取宽度缩放比例、高度缩放比例
          if(wh[0] > wh[1]){//取缩放比例最大的进行缩放
            imgarea[0] = imgarea[0]/wh[0];
            imgarea[1] = imgarea[1]/wh[0];
          } else if(wh[0] < wh[1]){
            imgarea[0] = imgarea[0]/wh[1];
            imgarea[1] = imgarea[1]/wh[1];
          }
        }
        
        return [imgarea[0]+'px', imgarea[1]+'px']; 
      }(),
      title: false,
      shade: 0.9,
      shadeClose: true,
      closeBtn: false,
      move: '.layui-layer-phimg img',
      moveType: 1,
      scrollbar: false,
      moveOut: true,
      //anim: Math.random()*5|0,
      isOutAnim: false,
      skin: 'layui-layer-photos' + skin('photos'),
      content: '<div class="layui-layer-phimg">'
        +'<img src="'+ data[start].src +'" alt="'+ (data[start].alt||'') +'" layer-pid="'+ data[start].pid +'">'
        +'<div class="layui-layer-imgsee">'
          +(data.length > 1 ? '<span class="layui-layer-imguide"><a href="javascript:;" class="layui-layer-iconext layui-layer-imgprev"></a><a href="javascript:;" class="layui-layer-iconext layui-layer-imgnext"></a></span>' : '')
          +'<div class="layui-layer-imgbar" style="display:'+ (key ? 'block' : '') +'"><span class="layui-layer-imgtit"><a href="javascript:;">'+ (data[start].alt||'') +'</a><em>'+ dict.imgIndex +'/'+ data.length +'</em></span></div>'
        +'</div>'
      +'</div>',
      success: function(layero, index){
        dict.bigimg = layero.find('.layui-layer-phimg');
        dict.imgsee = layero.find('.layui-layer-imguide,.layui-layer-imgbar');
        dict.event(layero);
        options.tab && options.tab(data[start], layero);
        typeof success === 'function' && success(layero);
      }, end: function(){
        dict.end = true;
        $(document).off('keyup', dict.keyup);
      }
    }, options));
  }, function(){
    layer.close(dict.loadi);
    layer.msg('&#x5F53;&#x524D;&#x56FE;&#x7247;&#x5730;&#x5740;&#x5F02;&#x5E38;<br>&#x662F;&#x5426;&#x7EE7;&#x7EED;&#x67E5;&#x770B;&#x4E0B;&#x4E00;&#x5F20;&#xFF1F;', {
      time: 30000, 
      btn: ['&#x4E0B;&#x4E00;&#x5F20;', '&#x4E0D;&#x770B;&#x4E86;'], 
      yes: function(){
        data.length > 1 && dict.imgnext(true,true);
      }
    });
  });
};

//主入口
ready.run = function(_$){
  $ = _$;
  win = $(window);
  doms.html = $('html');
  layer.open = function(deliver){
    var o = new Class(deliver);
    var $Calendar = $('#layui-layer'+ o.index).find('[oascalendar]');
    $Calendar.length>0&&$Calendar.oasCalendar({
      container: $('#layui-layer'+ o.index)
    });
    return o.index;
  };
};

//加载方式
// window.layui && layui.define ? (
//   layer.ready()
//   ,layui.define('jquery', function(exports){ //layui加载
//     layer.path = layui.cache.dir;
//     ready.run(layui.jquery);

//     //暴露模块
//     window.layer = layer;
//     exports('layer', layer);
//   })
// ) : (
//   (typeof define === 'function' && define.amd) ? define(['jquery'], function(){ //requirejs加载
//     ready.run(window.jQuery);
//     return layer;
//   }) : function(){ //普通script标签加载
//     ready.run(window.jQuery);
//     layer.ready();
//   }()
// );
    ready.run(window.jQuery);
    return layer;
})(window);

},{}],107:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.10.1 (Custom Build) lodash.com/license | Underscore.js 1.8.3 underscorejs.org/LICENSE
 * Build: `lodash modern -o ./lodash.js`
 */
;(function(){function n(n,t){if(n!==t){var r=null===n,e=n===w,u=n===n,o=null===t,i=t===w,f=t===t;if(n>t&&!o||!u||r&&!i&&f||e&&f)return 1;if(n<t&&!r||!f||o&&!e&&u||i&&u)return-1}return 0}function t(n,t,r){for(var e=n.length,u=r?e:-1;r?u--:++u<e;)if(t(n[u],u,n))return u;return-1}function r(n,t,r){if(t!==t)return p(n,r);r-=1;for(var e=n.length;++r<e;)if(n[r]===t)return r;return-1}function e(n){return typeof n=="function"||false}function u(n){return null==n?"":n+""}function o(n,t){for(var r=-1,e=n.length;++r<e&&-1<t.indexOf(n.charAt(r)););
return r}function i(n,t){for(var r=n.length;r--&&-1<t.indexOf(n.charAt(r)););return r}function f(t,r){return n(t.a,r.a)||t.b-r.b}function a(n){return Nn[n]}function c(n){return Tn[n]}function l(n,t,r){return t?n=Bn[n]:r&&(n=Dn[n]),"\\"+n}function s(n){return"\\"+Dn[n]}function p(n,t,r){var e=n.length;for(t+=r?0:-1;r?t--:++t<e;){var u=n[t];if(u!==u)return t}return-1}function h(n){return!!n&&typeof n=="object"}function _(n){return 160>=n&&9<=n&&13>=n||32==n||160==n||5760==n||6158==n||8192<=n&&(8202>=n||8232==n||8233==n||8239==n||8287==n||12288==n||65279==n);
}function v(n,t){for(var r=-1,e=n.length,u=-1,o=[];++r<e;)n[r]===t&&(n[r]=z,o[++u]=r);return o}function g(n){for(var t=-1,r=n.length;++t<r&&_(n.charCodeAt(t)););return t}function y(n){for(var t=n.length;t--&&_(n.charCodeAt(t)););return t}function d(n){return Ln[n]}function m(_){function Nn(n){if(h(n)&&!(Oo(n)||n instanceof zn)){if(n instanceof Ln)return n;if(nu.call(n,"__chain__")&&nu.call(n,"__wrapped__"))return Mr(n)}return new Ln(n)}function Tn(){}function Ln(n,t,r){this.__wrapped__=n,this.__actions__=r||[],
this.__chain__=!!t}function zn(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=false,this.__iteratees__=[],this.__takeCount__=Ru,this.__views__=[]}function Bn(){this.__data__={}}function Dn(n){var t=n?n.length:0;for(this.data={hash:gu(null),set:new lu};t--;)this.push(n[t])}function Mn(n,t){var r=n.data;return(typeof t=="string"||ge(t)?r.set.has(t):r.hash[t])?0:-1}function qn(n,t){var r=-1,e=n.length;for(t||(t=Be(e));++r<e;)t[r]=n[r];return t}function Pn(n,t){for(var r=-1,e=n.length;++r<e&&false!==t(n[r],r,n););
return n}function Kn(n,t){for(var r=-1,e=n.length;++r<e;)if(!t(n[r],r,n))return false;return true}function Vn(n,t){for(var r=-1,e=n.length,u=-1,o=[];++r<e;){var i=n[r];t(i,r,n)&&(o[++u]=i)}return o}function Gn(n,t){for(var r=-1,e=n.length,u=Be(e);++r<e;)u[r]=t(n[r],r,n);return u}function Jn(n,t){for(var r=-1,e=t.length,u=n.length;++r<e;)n[u+r]=t[r];return n}function Xn(n,t,r,e){var u=-1,o=n.length;for(e&&o&&(r=n[++u]);++u<o;)r=t(r,n[u],u,n);return r}function Hn(n,t){for(var r=-1,e=n.length;++r<e;)if(t(n[r],r,n))return true;
return false}function Qn(n,t,r,e){return n!==w&&nu.call(e,r)?n:t}function nt(n,t,r){for(var e=-1,u=zo(t),o=u.length;++e<o;){var i=u[e],f=n[i],a=r(f,t[i],i,n,t);(a===a?a===f:f!==f)&&(f!==w||i in n)||(n[i]=a)}return n}function tt(n,t){return null==t?n:et(t,zo(t),n)}function rt(n,t){for(var r=-1,e=null==n,u=!e&&Er(n),o=u?n.length:0,i=t.length,f=Be(i);++r<i;){var a=t[r];f[r]=u?Cr(a,o)?n[a]:w:e?w:n[a]}return f}function et(n,t,r){r||(r={});for(var e=-1,u=t.length;++e<u;){var o=t[e];r[o]=n[o]}return r}function ut(n,t,r){
var e=typeof n;return"function"==e?t===w?n:Bt(n,t,r):null==n?Fe:"object"==e?bt(n):t===w?ze(n):xt(n,t)}function ot(n,t,r,e,u,o,i){var f;if(r&&(f=u?r(n,e,u):r(n)),f!==w)return f;if(!ge(n))return n;if(e=Oo(n)){if(f=kr(n),!t)return qn(n,f)}else{var a=ru.call(n),c=a==K;if(a!=Z&&a!=B&&(!c||u))return Fn[a]?Rr(n,a,t):u?n:{};if(f=Ir(c?{}:n),!t)return tt(f,n)}for(o||(o=[]),i||(i=[]),u=o.length;u--;)if(o[u]==n)return i[u];return o.push(n),i.push(f),(e?Pn:_t)(n,function(e,u){f[u]=ot(e,t,r,u,n,o,i)}),f}function it(n,t,r){
if(typeof n!="function")throw new Ge(L);return su(function(){n.apply(w,r)},t)}function ft(n,t){var e=n?n.length:0,u=[];if(!e)return u;var o=-1,i=xr(),f=i===r,a=f&&t.length>=F&&gu&&lu?new Dn(t):null,c=t.length;a&&(i=Mn,f=false,t=a);n:for(;++o<e;)if(a=n[o],f&&a===a){for(var l=c;l--;)if(t[l]===a)continue n;u.push(a)}else 0>i(t,a,0)&&u.push(a);return u}function at(n,t){var r=true;return Su(n,function(n,e,u){return r=!!t(n,e,u)}),r}function ct(n,t,r,e){var u=e,o=u;return Su(n,function(n,i,f){i=+t(n,i,f),(r(i,u)||i===e&&i===o)&&(u=i,
o=n)}),o}function lt(n,t){var r=[];return Su(n,function(n,e,u){t(n,e,u)&&r.push(n)}),r}function st(n,t,r,e){var u;return r(n,function(n,r,o){return t(n,r,o)?(u=e?r:n,false):void 0}),u}function pt(n,t,r,e){e||(e=[]);for(var u=-1,o=n.length;++u<o;){var i=n[u];h(i)&&Er(i)&&(r||Oo(i)||pe(i))?t?pt(i,t,r,e):Jn(e,i):r||(e[e.length]=i)}return e}function ht(n,t){Nu(n,t,Re)}function _t(n,t){return Nu(n,t,zo)}function vt(n,t){return Tu(n,t,zo)}function gt(n,t){for(var r=-1,e=t.length,u=-1,o=[];++r<e;){var i=t[r];
ve(n[i])&&(o[++u]=i)}return o}function yt(n,t,r){if(null!=n){r!==w&&r in Br(n)&&(t=[r]),r=0;for(var e=t.length;null!=n&&r<e;)n=n[t[r++]];return r&&r==e?n:w}}function dt(n,t,r,e,u,o){if(n===t)n=true;else if(null==n||null==t||!ge(n)&&!h(t))n=n!==n&&t!==t;else n:{var i=dt,f=Oo(n),a=Oo(t),c=D,l=D;f||(c=ru.call(n),c==B?c=Z:c!=Z&&(f=xe(n))),a||(l=ru.call(t),l==B?l=Z:l!=Z&&xe(t));var s=c==Z,a=l==Z,l=c==l;if(!l||f||s){if(!e&&(c=s&&nu.call(n,"__wrapped__"),a=a&&nu.call(t,"__wrapped__"),c||a)){n=i(c?n.value():n,a?t.value():t,r,e,u,o);
break n}if(l){for(u||(u=[]),o||(o=[]),c=u.length;c--;)if(u[c]==n){n=o[c]==t;break n}u.push(n),o.push(t),n=(f?yr:mr)(n,t,i,r,e,u,o),u.pop(),o.pop()}else n=false}else n=dr(n,t,c)}return n}function mt(n,t,r){var e=t.length,u=e,o=!r;if(null==n)return!u;for(n=Br(n);e--;){var i=t[e];if(o&&i[2]?i[1]!==n[i[0]]:!(i[0]in n))return false}for(;++e<u;){var i=t[e],f=i[0],a=n[f],c=i[1];if(o&&i[2]){if(a===w&&!(f in n))return false}else if(i=r?r(a,c,f):w,i===w?!dt(c,a,r,true):!i)return false}return true}function wt(n,t){var r=-1,e=Er(n)?Be(n.length):[];
return Su(n,function(n,u,o){e[++r]=t(n,u,o)}),e}function bt(n){var t=Ar(n);if(1==t.length&&t[0][2]){var r=t[0][0],e=t[0][1];return function(n){return null==n?false:n[r]===e&&(e!==w||r in Br(n))}}return function(n){return mt(n,t)}}function xt(n,t){var r=Oo(n),e=Wr(n)&&t===t&&!ge(t),u=n+"";return n=Dr(n),function(o){if(null==o)return false;var i=u;if(o=Br(o),!(!r&&e||i in o)){if(o=1==n.length?o:yt(o,Et(n,0,-1)),null==o)return false;i=Zr(n),o=Br(o)}return o[i]===t?t!==w||i in o:dt(t,o[i],w,true)}}function At(n,t,r,e,u){
if(!ge(n))return n;var o=Er(t)&&(Oo(t)||xe(t)),i=o?w:zo(t);return Pn(i||t,function(f,a){if(i&&(a=f,f=t[a]),h(f)){e||(e=[]),u||(u=[]);n:{for(var c=a,l=e,s=u,p=l.length,_=t[c];p--;)if(l[p]==_){n[c]=s[p];break n}var p=n[c],v=r?r(p,_,c,n,t):w,g=v===w;g&&(v=_,Er(_)&&(Oo(_)||xe(_))?v=Oo(p)?p:Er(p)?qn(p):[]:me(_)||pe(_)?v=pe(p)?ke(p):me(p)?p:{}:g=false),l.push(_),s.push(v),g?n[c]=At(v,_,r,l,s):(v===v?v!==p:p===p)&&(n[c]=v)}}else c=n[a],l=r?r(c,f,a,n,t):w,(s=l===w)&&(l=f),l===w&&(!o||a in n)||!s&&(l===l?l===c:c!==c)||(n[a]=l);
}),n}function jt(n){return function(t){return null==t?w:t[n]}}function kt(n){var t=n+"";return n=Dr(n),function(r){return yt(r,n,t)}}function It(n,t){for(var r=n?t.length:0;r--;){var e=t[r];if(e!=u&&Cr(e)){var u=e;pu.call(n,e,1)}}}function Rt(n,t){return n+yu(ku()*(t-n+1))}function Ot(n,t,r,e,u){return u(n,function(n,u,o){r=e?(e=false,n):t(r,n,u,o)}),r}function Et(n,t,r){var e=-1,u=n.length;for(t=null==t?0:+t||0,0>t&&(t=-t>u?0:u+t),r=r===w||r>u?u:+r||0,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0,r=Be(u);++e<u;)r[e]=n[e+t];
return r}function Ct(n,t){var r;return Su(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}function Ut(n,t){var r=n.length;for(n.sort(t);r--;)n[r]=n[r].c;return n}function Wt(t,r,e){var u=wr(),o=-1;return r=Gn(r,function(n){return u(n)}),t=wt(t,function(n){return{a:Gn(r,function(t){return t(n)}),b:++o,c:n}}),Ut(t,function(t,r){var u;n:{for(var o=-1,i=t.a,f=r.a,a=i.length,c=e.length;++o<a;)if(u=n(i[o],f[o])){if(o>=c)break n;o=e[o],u*="asc"===o||true===o?1:-1;break n}u=t.b-r.b}return u})}function $t(n,t){
var r=0;return Su(n,function(n,e,u){r+=+t(n,e,u)||0}),r}function St(n,t){var e=-1,u=xr(),o=n.length,i=u===r,f=i&&o>=F,a=f&&gu&&lu?new Dn(void 0):null,c=[];a?(u=Mn,i=false):(f=false,a=t?[]:c);n:for(;++e<o;){var l=n[e],s=t?t(l,e,n):l;if(i&&l===l){for(var p=a.length;p--;)if(a[p]===s)continue n;t&&a.push(s),c.push(l)}else 0>u(a,s,0)&&((t||f)&&a.push(s),c.push(l))}return c}function Ft(n,t){for(var r=-1,e=t.length,u=Be(e);++r<e;)u[r]=n[t[r]];return u}function Nt(n,t,r,e){for(var u=n.length,o=e?u:-1;(e?o--:++o<u)&&t(n[o],o,n););
return r?Et(n,e?0:o,e?o+1:u):Et(n,e?o+1:0,e?u:o)}function Tt(n,t){var r=n;r instanceof zn&&(r=r.value());for(var e=-1,u=t.length;++e<u;)var o=t[e],r=o.func.apply(o.thisArg,Jn([r],o.args));return r}function Lt(n,t,r){var e=0,u=n?n.length:e;if(typeof t=="number"&&t===t&&u<=Eu){for(;e<u;){var o=e+u>>>1,i=n[o];(r?i<=t:i<t)&&null!==i?e=o+1:u=o}return u}return zt(n,t,Fe,r)}function zt(n,t,r,e){t=r(t);for(var u=0,o=n?n.length:0,i=t!==t,f=null===t,a=t===w;u<o;){var c=yu((u+o)/2),l=r(n[c]),s=l!==w,p=l===l;
(i?p||e:f?p&&s&&(e||null!=l):a?p&&(e||s):null==l?0:e?l<=t:l<t)?u=c+1:o=c}return xu(o,Ou)}function Bt(n,t,r){if(typeof n!="function")return Fe;if(t===w)return n;switch(r){case 1:return function(r){return n.call(t,r)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,o){return n.call(t,r,e,u,o)};case 5:return function(r,e,u,o,i){return n.call(t,r,e,u,o,i)}}return function(){return n.apply(t,arguments)}}function Dt(n){var t=new ou(n.byteLength);return new hu(t).set(new hu(n)),
t}function Mt(n,t,r){for(var e=r.length,u=-1,o=bu(n.length-e,0),i=-1,f=t.length,a=Be(f+o);++i<f;)a[i]=t[i];for(;++u<e;)a[r[u]]=n[u];for(;o--;)a[i++]=n[u++];return a}function qt(n,t,r){for(var e=-1,u=r.length,o=-1,i=bu(n.length-u,0),f=-1,a=t.length,c=Be(i+a);++o<i;)c[o]=n[o];for(i=o;++f<a;)c[i+f]=t[f];for(;++e<u;)c[i+r[e]]=n[o++];return c}function Pt(n,t){return function(r,e,u){var o=t?t():{};if(e=wr(e,u,3),Oo(r)){u=-1;for(var i=r.length;++u<i;){var f=r[u];n(o,f,e(f,u,r),r)}}else Su(r,function(t,r,u){
n(o,t,e(t,r,u),u)});return o}}function Kt(n){return le(function(t,r){var e=-1,u=null==t?0:r.length,o=2<u?r[u-2]:w,i=2<u?r[2]:w,f=1<u?r[u-1]:w;for(typeof o=="function"?(o=Bt(o,f,5),u-=2):(o=typeof f=="function"?f:w,u-=o?1:0),i&&Ur(r[0],r[1],i)&&(o=3>u?w:o,u=1);++e<u;)(i=r[e])&&n(t,i,o);return t})}function Vt(n,t){return function(r,e){var u=r?Bu(r):0;if(!Sr(u))return n(r,e);for(var o=t?u:-1,i=Br(r);(t?o--:++o<u)&&false!==e(i[o],o,i););return r}}function Zt(n){return function(t,r,e){var u=Br(t);e=e(t);for(var o=e.length,i=n?o:-1;n?i--:++i<o;){
var f=e[i];if(false===r(u[f],f,u))break}return t}}function Yt(n,t){function r(){return(this&&this!==Zn&&this instanceof r?e:n).apply(t,arguments)}var e=Jt(n);return r}function Gt(n){return function(t){var r=-1;t=$e(Ce(t));for(var e=t.length,u="";++r<e;)u=n(u,t[r],r);return u}}function Jt(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:
return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var r=$u(n.prototype),t=n.apply(r,t);return ge(t)?t:r}}function Xt(n){function t(r,e,u){return u&&Ur(r,e,u)&&(e=w),r=gr(r,n,w,w,w,w,w,e),r.placeholder=t.placeholder,r}return t}function Ht(n,t){return le(function(r){var e=r[0];return null==e?e:(r.push(t),n.apply(w,r))})}function Qt(n,t){return function(r,e,u){if(u&&Ur(r,e,u)&&(e=w),e=wr(e,u,3),1==e.length){
u=r=Oo(r)?r:zr(r);for(var o=e,i=-1,f=u.length,a=t,c=a;++i<f;){var l=u[i],s=+o(l);n(s,a)&&(a=s,c=l)}if(u=c,!r.length||u!==t)return u}return ct(r,e,n,t)}}function nr(n,r){return function(e,u,o){return u=wr(u,o,3),Oo(e)?(u=t(e,u,r),-1<u?e[u]:w):st(e,u,n)}}function tr(n){return function(r,e,u){return r&&r.length?(e=wr(e,u,3),t(r,e,n)):-1}}function rr(n){return function(t,r,e){return r=wr(r,e,3),st(t,r,n,true)}}function er(n){return function(){for(var t,r=arguments.length,e=n?r:-1,u=0,o=Be(r);n?e--:++e<r;){
var i=o[u++]=arguments[e];if(typeof i!="function")throw new Ge(L);!t&&Ln.prototype.thru&&"wrapper"==br(i)&&(t=new Ln([],true))}for(e=t?-1:r;++e<r;){var i=o[e],u=br(i),f="wrapper"==u?zu(i):w;t=f&&$r(f[0])&&f[1]==(E|k|R|C)&&!f[4].length&&1==f[9]?t[br(f[0])].apply(t,f[3]):1==i.length&&$r(i)?t[u]():t.thru(i)}return function(){var n=arguments,e=n[0];if(t&&1==n.length&&Oo(e)&&e.length>=F)return t.plant(e).value();for(var u=0,n=r?o[u].apply(this,n):e;++u<r;)n=o[u].call(this,n);return n}}}function ur(n,t){
return function(r,e,u){return typeof e=="function"&&u===w&&Oo(r)?n(r,e):t(r,Bt(e,u,3))}}function or(n){return function(t,r,e){return(typeof r!="function"||e!==w)&&(r=Bt(r,e,3)),n(t,r,Re)}}function ir(n){return function(t,r,e){return(typeof r!="function"||e!==w)&&(r=Bt(r,e,3)),n(t,r)}}function fr(n){return function(t,r,e){var u={};return r=wr(r,e,3),_t(t,function(t,e,o){o=r(t,e,o),e=n?o:e,t=n?t:o,u[e]=t}),u}}function ar(n){return function(t,r,e){return t=u(t),(n?t:"")+pr(t,r,e)+(n?"":t)}}function cr(n){
var t=le(function(r,e){var u=v(e,t.placeholder);return gr(r,n,w,e,u)});return t}function lr(n,t){return function(r,e,u,o){var i=3>arguments.length;return typeof e=="function"&&o===w&&Oo(r)?n(r,e,u,i):Ot(r,wr(e,o,4),u,i,t)}}function sr(n,t,r,e,u,o,i,f,a,c){function l(){for(var m=arguments.length,b=m,j=Be(m);b--;)j[b]=arguments[b];if(e&&(j=Mt(j,e,u)),o&&(j=qt(j,o,i)),_||y){var b=l.placeholder,k=v(j,b),m=m-k.length;if(m<c){var I=f?qn(f):w,m=bu(c-m,0),E=_?k:w,k=_?w:k,C=_?j:w,j=_?w:j;return t|=_?R:O,t&=~(_?O:R),
g||(t&=~(x|A)),j=[n,t,r,C,E,j,k,I,a,m],I=sr.apply(w,j),$r(n)&&Du(I,j),I.placeholder=b,I}}if(b=p?r:this,I=h?b[n]:n,f)for(m=j.length,E=xu(f.length,m),k=qn(j);E--;)C=f[E],j[E]=Cr(C,m)?k[C]:w;return s&&a<j.length&&(j.length=a),this&&this!==Zn&&this instanceof l&&(I=d||Jt(n)),I.apply(b,j)}var s=t&E,p=t&x,h=t&A,_=t&k,g=t&j,y=t&I,d=h?w:Jt(n);return l}function pr(n,t,r){return n=n.length,t=+t,n<t&&mu(t)?(t-=n,r=null==r?" ":r+"",Ue(r,vu(t/r.length)).slice(0,t)):""}function hr(n,t,r,e){function u(){for(var t=-1,f=arguments.length,a=-1,c=e.length,l=Be(c+f);++a<c;)l[a]=e[a];
for(;f--;)l[a++]=arguments[++t];return(this&&this!==Zn&&this instanceof u?i:n).apply(o?r:this,l)}var o=t&x,i=Jt(n);return u}function _r(n){var t=Pe[n];return function(n,r){return(r=r===w?0:+r||0)?(r=au(10,r),t(n*r)/r):t(n)}}function vr(n){return function(t,r,e,u){var o=wr(e);return null==e&&o===ut?Lt(t,r,n):zt(t,r,o(e,u,1),n)}}function gr(n,t,r,e,u,o,i,f){var a=t&A;if(!a&&typeof n!="function")throw new Ge(L);var c=e?e.length:0;if(c||(t&=~(R|O),e=u=w),c-=u?u.length:0,t&O){var l=e,s=u;e=u=w}var p=a?w:zu(n);
return r=[n,t,r,e,u,l,s,o,i,f],p&&(e=r[1],t=p[1],f=e|t,u=t==E&&e==k||t==E&&e==C&&r[7].length<=p[8]||t==(E|C)&&e==k,(f<E||u)&&(t&x&&(r[2]=p[2],f|=e&x?0:j),(e=p[3])&&(u=r[3],r[3]=u?Mt(u,e,p[4]):qn(e),r[4]=u?v(r[3],z):qn(p[4])),(e=p[5])&&(u=r[5],r[5]=u?qt(u,e,p[6]):qn(e),r[6]=u?v(r[5],z):qn(p[6])),(e=p[7])&&(r[7]=qn(e)),t&E&&(r[8]=null==r[8]?p[8]:xu(r[8],p[8])),null==r[9]&&(r[9]=p[9]),r[0]=p[0],r[1]=f),t=r[1],f=r[9]),r[9]=null==f?a?0:n.length:bu(f-c,0)||0,(p?Lu:Du)(t==x?Yt(r[0],r[2]):t!=R&&t!=(x|R)||r[4].length?sr.apply(w,r):hr.apply(w,r),r);
}function yr(n,t,r,e,u,o,i){var f=-1,a=n.length,c=t.length;if(a!=c&&(!u||c<=a))return false;for(;++f<a;){var l=n[f],c=t[f],s=e?e(u?c:l,u?l:c,f):w;if(s!==w){if(s)continue;return false}if(u){if(!Hn(t,function(n){return l===n||r(l,n,e,u,o,i)}))return false}else if(l!==c&&!r(l,c,e,u,o,i))return false}return true}function dr(n,t,r){switch(r){case M:case q:return+n==+t;case P:return n.name==t.name&&n.message==t.message;case V:return n!=+n?t!=+t:n==+t;case Y:case G:return n==t+""}return false}function mr(n,t,r,e,u,o,i){var f=zo(n),a=f.length,c=zo(t).length;
if(a!=c&&!u)return false;for(c=a;c--;){var l=f[c];if(!(u?l in t:nu.call(t,l)))return false}for(var s=u;++c<a;){var l=f[c],p=n[l],h=t[l],_=e?e(u?h:p,u?p:h,l):w;if(_===w?!r(p,h,e,u,o,i):!_)return false;s||(s="constructor"==l)}return s||(r=n.constructor,e=t.constructor,!(r!=e&&"constructor"in n&&"constructor"in t)||typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)?true:false}function wr(n,t,r){var e=Nn.callback||Se,e=e===Se?ut:e;return r?e(n,t,r):e}function br(n){for(var t=n.name+"",r=Wu[t],e=r?r.length:0;e--;){
var u=r[e],o=u.func;if(null==o||o==n)return u.name}return t}function xr(n,t,e){var u=Nn.indexOf||Vr,u=u===Vr?r:u;return n?u(n,t,e):u}function Ar(n){n=Oe(n);for(var t=n.length;t--;){var r=n[t][1];n[t][2]=r===r&&!ge(r)}return n}function jr(n,t){var r=null==n?w:n[t];return ye(r)?r:w}function kr(n){var t=n.length,r=new n.constructor(t);return t&&"string"==typeof n[0]&&nu.call(n,"index")&&(r.index=n.index,r.input=n.input),r}function Ir(n){return n=n.constructor,typeof n=="function"&&n instanceof n||(n=Ve),
new n}function Rr(n,t,r){var e=n.constructor;switch(t){case J:return Dt(n);case M:case q:return new e(+n);case X:case H:case Q:case nn:case tn:case rn:case en:case un:case on:return t=n.buffer,new e(r?Dt(t):t,n.byteOffset,n.length);case V:case G:return new e(n);case Y:var u=new e(n.source,kn.exec(n));u.lastIndex=n.lastIndex}return u}function Or(n,t,r){return null==n||Wr(t,n)||(t=Dr(t),n=1==t.length?n:yt(n,Et(t,0,-1)),t=Zr(t)),t=null==n?n:n[t],null==t?w:t.apply(n,r)}function Er(n){return null!=n&&Sr(Bu(n));
}function Cr(n,t){return n=typeof n=="number"||On.test(n)?+n:-1,t=null==t?Cu:t,-1<n&&0==n%1&&n<t}function Ur(n,t,r){if(!ge(r))return false;var e=typeof t;return("number"==e?Er(r)&&Cr(t,r.length):"string"==e&&t in r)?(t=r[t],n===n?n===t:t!==t):false}function Wr(n,t){var r=typeof n;return"string"==r&&dn.test(n)||"number"==r?true:Oo(n)?false:!yn.test(n)||null!=t&&n in Br(t)}function $r(n){var t=br(n),r=Nn[t];return typeof r=="function"&&t in zn.prototype?n===r?true:(t=zu(r),!!t&&n===t[0]):false}function Sr(n){return typeof n=="number"&&-1<n&&0==n%1&&n<=Cu;
}function Fr(n,t){return n===w?t:Eo(n,t,Fr)}function Nr(n,t){n=Br(n);for(var r=-1,e=t.length,u={};++r<e;){var o=t[r];o in n&&(u[o]=n[o])}return u}function Tr(n,t){var r={};return ht(n,function(n,e,u){t(n,e,u)&&(r[e]=n)}),r}function Lr(n){for(var t=Re(n),r=t.length,e=r&&n.length,u=!!e&&Sr(e)&&(Oo(n)||pe(n)),o=-1,i=[];++o<r;){var f=t[o];(u&&Cr(f,e)||nu.call(n,f))&&i.push(f)}return i}function zr(n){return null==n?[]:Er(n)?ge(n)?n:Ve(n):Ee(n)}function Br(n){return ge(n)?n:Ve(n)}function Dr(n){if(Oo(n))return n;
var t=[];return u(n).replace(mn,function(n,r,e,u){t.push(e?u.replace(An,"$1"):r||n)}),t}function Mr(n){return n instanceof zn?n.clone():new Ln(n.__wrapped__,n.__chain__,qn(n.__actions__))}function qr(n,t,r){return n&&n.length?((r?Ur(n,t,r):null==t)&&(t=1),Et(n,0>t?0:t)):[]}function Pr(n,t,r){var e=n?n.length:0;return e?((r?Ur(n,t,r):null==t)&&(t=1),t=e-(+t||0),Et(n,0,0>t?0:t)):[]}function Kr(n){return n?n[0]:w}function Vr(n,t,e){var u=n?n.length:0;if(!u)return-1;if(typeof e=="number")e=0>e?bu(u+e,0):e;else if(e)return e=Lt(n,t),
e<u&&(t===t?t===n[e]:n[e]!==n[e])?e:-1;return r(n,t,e||0)}function Zr(n){var t=n?n.length:0;return t?n[t-1]:w}function Yr(n){return qr(n,1)}function Gr(n,t,e,u){if(!n||!n.length)return[];null!=t&&typeof t!="boolean"&&(u=e,e=Ur(n,t,u)?w:t,t=false);var o=wr();if((null!=e||o!==ut)&&(e=o(e,u,3)),t&&xr()===r){t=e;var i;e=-1,u=n.length;for(var o=-1,f=[];++e<u;){var a=n[e],c=t?t(a,e,n):a;e&&i===c||(i=c,f[++o]=a)}n=f}else n=St(n,e);return n}function Jr(n){if(!n||!n.length)return[];var t=-1,r=0;n=Vn(n,function(n){
return Er(n)?(r=bu(n.length,r),true):void 0});for(var e=Be(r);++t<r;)e[t]=Gn(n,jt(t));return e}function Xr(n,t,r){return n&&n.length?(n=Jr(n),null==t?n:(t=Bt(t,r,4),Gn(n,function(n){return Xn(n,t,w,true)}))):[]}function Hr(n,t){var r=-1,e=n?n.length:0,u={};for(!e||t||Oo(n[0])||(t=[]);++r<e;){var o=n[r];t?u[o]=t[r]:o&&(u[o[0]]=o[1])}return u}function Qr(n){return n=Nn(n),n.__chain__=true,n}function ne(n,t,r){return t.call(r,n)}function te(n,t,r){var e=Oo(n)?Kn:at;return r&&Ur(n,t,r)&&(t=w),(typeof t!="function"||r!==w)&&(t=wr(t,r,3)),
e(n,t)}function re(n,t,r){var e=Oo(n)?Vn:lt;return t=wr(t,r,3),e(n,t)}function ee(n,t,r,e){var u=n?Bu(n):0;return Sr(u)||(n=Ee(n),u=n.length),r=typeof r!="number"||e&&Ur(t,r,e)?0:0>r?bu(u+r,0):r||0,typeof n=="string"||!Oo(n)&&be(n)?r<=u&&-1<n.indexOf(t,r):!!u&&-1<xr(n,t,r)}function ue(n,t,r){var e=Oo(n)?Gn:wt;return t=wr(t,r,3),e(n,t)}function oe(n,t,r){if(r?Ur(n,t,r):null==t){n=zr(n);var e=n.length;return 0<e?n[Rt(0,e-1)]:w}r=-1,n=je(n);var e=n.length,u=e-1;for(t=xu(0>t?0:+t||0,e);++r<t;){var e=Rt(r,u),o=n[e];
n[e]=n[r],n[r]=o}return n.length=t,n}function ie(n,t,r){var e=Oo(n)?Hn:Ct;return r&&Ur(n,t,r)&&(t=w),(typeof t!="function"||r!==w)&&(t=wr(t,r,3)),e(n,t)}function fe(n,t){var r;if(typeof t!="function"){if(typeof n!="function")throw new Ge(L);var e=n;n=t,t=e}return function(){return 0<--n&&(r=t.apply(this,arguments)),1>=n&&(t=w),r}}function ae(n,t,r){function e(t,r){r&&iu(r),a=p=h=w,t&&(_=ho(),c=n.apply(s,f),p||a||(f=s=w))}function u(){var n=t-(ho()-l);0>=n||n>t?e(h,a):p=su(u,n)}function o(){e(g,p);
}function i(){if(f=arguments,l=ho(),s=this,h=g&&(p||!y),false===v)var r=y&&!p;else{a||y||(_=l);var e=v-(l-_),i=0>=e||e>v;i?(a&&(a=iu(a)),_=l,c=n.apply(s,f)):a||(a=su(o,e))}return i&&p?p=iu(p):p||t===v||(p=su(u,t)),r&&(i=true,c=n.apply(s,f)),!i||p||a||(f=s=w),c}var f,a,c,l,s,p,h,_=0,v=false,g=true;if(typeof n!="function")throw new Ge(L);if(t=0>t?0:+t||0,true===r)var y=true,g=false;else ge(r)&&(y=!!r.leading,v="maxWait"in r&&bu(+r.maxWait||0,t),g="trailing"in r?!!r.trailing:g);return i.cancel=function(){p&&iu(p),a&&iu(a),
_=0,a=p=h=w},i}function ce(n,t){function r(){var e=arguments,u=t?t.apply(this,e):e[0],o=r.cache;return o.has(u)?o.get(u):(e=n.apply(this,e),r.cache=o.set(u,e),e)}if(typeof n!="function"||t&&typeof t!="function")throw new Ge(L);return r.cache=new ce.Cache,r}function le(n,t){if(typeof n!="function")throw new Ge(L);return t=bu(t===w?n.length-1:+t||0,0),function(){for(var r=arguments,e=-1,u=bu(r.length-t,0),o=Be(u);++e<u;)o[e]=r[t+e];switch(t){case 0:return n.call(this,o);case 1:return n.call(this,r[0],o);
case 2:return n.call(this,r[0],r[1],o)}for(u=Be(t+1),e=-1;++e<t;)u[e]=r[e];return u[t]=o,n.apply(this,u)}}function se(n,t){return n>t}function pe(n){return h(n)&&Er(n)&&nu.call(n,"callee")&&!cu.call(n,"callee")}function he(n,t,r,e){return e=(r=typeof r=="function"?Bt(r,e,3):w)?r(n,t):w,e===w?dt(n,t,r):!!e}function _e(n){return h(n)&&typeof n.message=="string"&&ru.call(n)==P}function ve(n){return ge(n)&&ru.call(n)==K}function ge(n){var t=typeof n;return!!n&&("object"==t||"function"==t)}function ye(n){
return null==n?false:ve(n)?uu.test(Qe.call(n)):h(n)&&Rn.test(n)}function de(n){return typeof n=="number"||h(n)&&ru.call(n)==V}function me(n){var t;if(!h(n)||ru.call(n)!=Z||pe(n)||!(nu.call(n,"constructor")||(t=n.constructor,typeof t!="function"||t instanceof t)))return false;var r;return ht(n,function(n,t){r=t}),r===w||nu.call(n,r)}function we(n){return ge(n)&&ru.call(n)==Y}function be(n){return typeof n=="string"||h(n)&&ru.call(n)==G}function xe(n){return h(n)&&Sr(n.length)&&!!Sn[ru.call(n)]}function Ae(n,t){
return n<t}function je(n){var t=n?Bu(n):0;return Sr(t)?t?qn(n):[]:Ee(n)}function ke(n){return et(n,Re(n))}function Ie(n){return gt(n,Re(n))}function Re(n){if(null==n)return[];ge(n)||(n=Ve(n));for(var t=n.length,t=t&&Sr(t)&&(Oo(n)||pe(n))&&t||0,r=n.constructor,e=-1,r=typeof r=="function"&&r.prototype===n,u=Be(t),o=0<t;++e<t;)u[e]=e+"";for(var i in n)o&&Cr(i,t)||"constructor"==i&&(r||!nu.call(n,i))||u.push(i);return u}function Oe(n){n=Br(n);for(var t=-1,r=zo(n),e=r.length,u=Be(e);++t<e;){var o=r[t];
u[t]=[o,n[o]]}return u}function Ee(n){return Ft(n,zo(n))}function Ce(n){return(n=u(n))&&n.replace(En,a).replace(xn,"")}function Ue(n,t){var r="";if(n=u(n),t=+t,1>t||!n||!mu(t))return r;do t%2&&(r+=n),t=yu(t/2),n+=n;while(t);return r}function We(n,t,r){var e=n;return(n=u(n))?(r?Ur(e,t,r):null==t)?n.slice(g(n),y(n)+1):(t+="",n.slice(o(n,t),i(n,t)+1)):n}function $e(n,t,r){return r&&Ur(n,t,r)&&(t=w),n=u(n),n.match(t||Wn)||[]}function Se(n,t,r){return r&&Ur(n,t,r)&&(t=w),h(n)?Ne(n):ut(n,t)}function Fe(n){
return n}function Ne(n){return bt(ot(n,true))}function Te(n,t,r){if(null==r){var e=ge(t),u=e?zo(t):w;((u=u&&u.length?gt(t,u):w)?u.length:e)||(u=false,r=t,t=n,n=this)}u||(u=gt(t,zo(t)));var o=true,e=-1,i=ve(n),f=u.length;false===r?o=false:ge(r)&&"chain"in r&&(o=r.chain);for(;++e<f;){r=u[e];var a=t[r];n[r]=a,i&&(n.prototype[r]=function(t){return function(){var r=this.__chain__;if(o||r){var e=n(this.__wrapped__);return(e.__actions__=qn(this.__actions__)).push({func:t,args:arguments,thisArg:n}),e.__chain__=r,e}return t.apply(n,Jn([this.value()],arguments));
}}(a))}return n}function Le(){}function ze(n){return Wr(n)?jt(n):kt(n)}_=_?Yn.defaults(Zn.Object(),_,Yn.pick(Zn,$n)):Zn;var Be=_.Array,De=_.Date,Me=_.Error,qe=_.Function,Pe=_.Math,Ke=_.Number,Ve=_.Object,Ze=_.RegExp,Ye=_.String,Ge=_.TypeError,Je=Be.prototype,Xe=Ve.prototype,He=Ye.prototype,Qe=qe.prototype.toString,nu=Xe.hasOwnProperty,tu=0,ru=Xe.toString,eu=Zn._,uu=Ze("^"+Qe.call(nu).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ou=_.ArrayBuffer,iu=_.clearTimeout,fu=_.parseFloat,au=Pe.pow,cu=Xe.propertyIsEnumerable,lu=jr(_,"Set"),su=_.setTimeout,pu=Je.splice,hu=_.Uint8Array,_u=jr(_,"WeakMap"),vu=Pe.ceil,gu=jr(Ve,"create"),yu=Pe.floor,du=jr(Be,"isArray"),mu=_.isFinite,wu=jr(Ve,"keys"),bu=Pe.max,xu=Pe.min,Au=jr(De,"now"),ju=_.parseInt,ku=Pe.random,Iu=Ke.NEGATIVE_INFINITY,Ru=Ke.POSITIVE_INFINITY,Ou=4294967294,Eu=2147483647,Cu=9007199254740991,Uu=_u&&new _u,Wu={};
Nn.support={},Nn.templateSettings={escape:_n,evaluate:vn,interpolate:gn,variable:"",imports:{_:Nn}};var $u=function(){function n(){}return function(t){if(ge(t)){n.prototype=t;var r=new n;n.prototype=w}return r||{}}}(),Su=Vt(_t),Fu=Vt(vt,true),Nu=Zt(),Tu=Zt(true),Lu=Uu?function(n,t){return Uu.set(n,t),n}:Fe,zu=Uu?function(n){return Uu.get(n)}:Le,Bu=jt("length"),Du=function(){var n=0,t=0;return function(r,e){var u=ho(),o=S-(u-t);if(t=u,0<o){if(++n>=$)return r}else n=0;return Lu(r,e)}}(),Mu=le(function(n,t){
return h(n)&&Er(n)?ft(n,pt(t,false,true)):[]}),qu=tr(),Pu=tr(true),Ku=le(function(n){for(var t=n.length,e=t,u=Be(l),o=xr(),i=o===r,f=[];e--;){var a=n[e]=Er(a=n[e])?a:[];u[e]=i&&120<=a.length&&gu&&lu?new Dn(e&&a):null}var i=n[0],c=-1,l=i?i.length:0,s=u[0];n:for(;++c<l;)if(a=i[c],0>(s?Mn(s,a):o(f,a,0))){for(e=t;--e;){var p=u[e];if(0>(p?Mn(p,a):o(n[e],a,0)))continue n}s&&s.push(a),f.push(a)}return f}),Vu=le(function(t,r){r=pt(r);var e=rt(t,r);return It(t,r.sort(n)),e}),Zu=vr(),Yu=vr(true),Gu=le(function(n){return St(pt(n,false,true));
}),Ju=le(function(n,t){return Er(n)?ft(n,t):[]}),Xu=le(Jr),Hu=le(function(n){var t=n.length,r=2<t?n[t-2]:w,e=1<t?n[t-1]:w;return 2<t&&typeof r=="function"?t-=2:(r=1<t&&typeof e=="function"?(--t,e):w,e=w),n.length=t,Xr(n,r,e)}),Qu=le(function(n){return n=pt(n),this.thru(function(t){t=Oo(t)?t:[Br(t)];for(var r=n,e=-1,u=t.length,o=-1,i=r.length,f=Be(u+i);++e<u;)f[e]=t[e];for(;++o<i;)f[e++]=r[o];return f})}),no=le(function(n,t){return rt(n,pt(t))}),to=Pt(function(n,t,r){nu.call(n,r)?++n[r]:n[r]=1}),ro=nr(Su),eo=nr(Fu,true),uo=ur(Pn,Su),oo=ur(function(n,t){
for(var r=n.length;r--&&false!==t(n[r],r,n););return n},Fu),io=Pt(function(n,t,r){nu.call(n,r)?n[r].push(t):n[r]=[t]}),fo=Pt(function(n,t,r){n[r]=t}),ao=le(function(n,t,r){var e=-1,u=typeof t=="function",o=Wr(t),i=Er(n)?Be(n.length):[];return Su(n,function(n){var f=u?t:o&&null!=n?n[t]:w;i[++e]=f?f.apply(n,r):Or(n,t,r)}),i}),co=Pt(function(n,t,r){n[r?0:1].push(t)},function(){return[[],[]]}),lo=lr(Xn,Su),so=lr(function(n,t,r,e){var u=n.length;for(e&&u&&(r=n[--u]);u--;)r=t(r,n[u],u,n);return r},Fu),po=le(function(n,t){
if(null==n)return[];var r=t[2];return r&&Ur(t[0],t[1],r)&&(t.length=1),Wt(n,pt(t),[])}),ho=Au||function(){return(new De).getTime()},_o=le(function(n,t,r){var e=x;if(r.length)var u=v(r,_o.placeholder),e=e|R;return gr(n,e,t,r,u)}),vo=le(function(n,t){t=t.length?pt(t):Ie(n);for(var r=-1,e=t.length;++r<e;){var u=t[r];n[u]=gr(n[u],x,n)}return n}),go=le(function(n,t,r){var e=x|A;if(r.length)var u=v(r,go.placeholder),e=e|R;return gr(t,e,n,r,u)}),yo=Xt(k),mo=Xt(I),wo=le(function(n,t){return it(n,1,t)}),bo=le(function(n,t,r){
return it(n,t,r)}),xo=er(),Ao=er(true),jo=le(function(n,t){if(t=pt(t),typeof n!="function"||!Kn(t,e))throw new Ge(L);var r=t.length;return le(function(e){for(var u=xu(e.length,r);u--;)e[u]=t[u](e[u]);return n.apply(this,e)})}),ko=cr(R),Io=cr(O),Ro=le(function(n,t){return gr(n,C,w,w,w,pt(t))}),Oo=du||function(n){return h(n)&&Sr(n.length)&&ru.call(n)==D},Eo=Kt(At),Co=Kt(function(n,t,r){return r?nt(n,t,r):tt(n,t)}),Uo=Ht(Co,function(n,t){return n===w?t:n}),Wo=Ht(Eo,Fr),$o=rr(_t),So=rr(vt),Fo=or(Nu),No=or(Tu),To=ir(_t),Lo=ir(vt),zo=wu?function(n){
var t=null==n?w:n.constructor;return typeof t=="function"&&t.prototype===n||typeof n!="function"&&Er(n)?Lr(n):ge(n)?wu(n):[]}:Lr,Bo=fr(true),Do=fr(),Mo=le(function(n,t){if(null==n)return{};if("function"!=typeof t[0])return t=Gn(pt(t),Ye),Nr(n,ft(Re(n),t));var r=Bt(t[0],t[1],3);return Tr(n,function(n,t,e){return!r(n,t,e)})}),qo=le(function(n,t){return null==n?{}:"function"==typeof t[0]?Tr(n,Bt(t[0],t[1],3)):Nr(n,pt(t))}),Po=Gt(function(n,t,r){return t=t.toLowerCase(),n+(r?t.charAt(0).toUpperCase()+t.slice(1):t);
}),Ko=Gt(function(n,t,r){return n+(r?"-":"")+t.toLowerCase()}),Vo=ar(),Zo=ar(true),Yo=Gt(function(n,t,r){return n+(r?"_":"")+t.toLowerCase()}),Go=Gt(function(n,t,r){return n+(r?" ":"")+(t.charAt(0).toUpperCase()+t.slice(1))}),Jo=le(function(n,t){try{return n.apply(w,t)}catch(r){return _e(r)?r:new Me(r)}}),Xo=le(function(n,t){return function(r){return Or(r,n,t)}}),Ho=le(function(n,t){return function(r){return Or(n,r,t)}}),Qo=_r("ceil"),ni=_r("floor"),ti=Qt(se,Iu),ri=Qt(Ae,Ru),ei=_r("round");return Nn.prototype=Tn.prototype,
Ln.prototype=$u(Tn.prototype),Ln.prototype.constructor=Ln,zn.prototype=$u(Tn.prototype),zn.prototype.constructor=zn,Bn.prototype["delete"]=function(n){return this.has(n)&&delete this.__data__[n]},Bn.prototype.get=function(n){return"__proto__"==n?w:this.__data__[n]},Bn.prototype.has=function(n){return"__proto__"!=n&&nu.call(this.__data__,n)},Bn.prototype.set=function(n,t){return"__proto__"!=n&&(this.__data__[n]=t),this},Dn.prototype.push=function(n){var t=this.data;typeof n=="string"||ge(n)?t.set.add(n):t.hash[n]=true;
},ce.Cache=Bn,Nn.after=function(n,t){if(typeof t!="function"){if(typeof n!="function")throw new Ge(L);var r=n;n=t,t=r}return n=mu(n=+n)?n:0,function(){return 1>--n?t.apply(this,arguments):void 0}},Nn.ary=function(n,t,r){return r&&Ur(n,t,r)&&(t=w),t=n&&null==t?n.length:bu(+t||0,0),gr(n,E,w,w,w,w,t)},Nn.assign=Co,Nn.at=no,Nn.before=fe,Nn.bind=_o,Nn.bindAll=vo,Nn.bindKey=go,Nn.callback=Se,Nn.chain=Qr,Nn.chunk=function(n,t,r){t=(r?Ur(n,t,r):null==t)?1:bu(yu(t)||1,1),r=0;for(var e=n?n.length:0,u=-1,o=Be(vu(e/t));r<e;)o[++u]=Et(n,r,r+=t);
return o},Nn.compact=function(n){for(var t=-1,r=n?n.length:0,e=-1,u=[];++t<r;){var o=n[t];o&&(u[++e]=o)}return u},Nn.constant=function(n){return function(){return n}},Nn.countBy=to,Nn.create=function(n,t,r){var e=$u(n);return r&&Ur(n,t,r)&&(t=w),t?tt(e,t):e},Nn.curry=yo,Nn.curryRight=mo,Nn.debounce=ae,Nn.defaults=Uo,Nn.defaultsDeep=Wo,Nn.defer=wo,Nn.delay=bo,Nn.difference=Mu,Nn.drop=qr,Nn.dropRight=Pr,Nn.dropRightWhile=function(n,t,r){return n&&n.length?Nt(n,wr(t,r,3),true,true):[]},Nn.dropWhile=function(n,t,r){
return n&&n.length?Nt(n,wr(t,r,3),true):[]},Nn.fill=function(n,t,r,e){var u=n?n.length:0;if(!u)return[];for(r&&typeof r!="number"&&Ur(n,t,r)&&(r=0,e=u),u=n.length,r=null==r?0:+r||0,0>r&&(r=-r>u?0:u+r),e=e===w||e>u?u:+e||0,0>e&&(e+=u),u=r>e?0:e>>>0,r>>>=0;r<u;)n[r++]=t;return n},Nn.filter=re,Nn.flatten=function(n,t,r){var e=n?n.length:0;return r&&Ur(n,t,r)&&(t=false),e?pt(n,t):[]},Nn.flattenDeep=function(n){return n&&n.length?pt(n,true):[]},Nn.flow=xo,Nn.flowRight=Ao,Nn.forEach=uo,Nn.forEachRight=oo,Nn.forIn=Fo,
Nn.forInRight=No,Nn.forOwn=To,Nn.forOwnRight=Lo,Nn.functions=Ie,Nn.groupBy=io,Nn.indexBy=fo,Nn.initial=function(n){return Pr(n,1)},Nn.intersection=Ku,Nn.invert=function(n,t,r){r&&Ur(n,t,r)&&(t=w),r=-1;for(var e=zo(n),u=e.length,o={};++r<u;){var i=e[r],f=n[i];t?nu.call(o,f)?o[f].push(i):o[f]=[i]:o[f]=i}return o},Nn.invoke=ao,Nn.keys=zo,Nn.keysIn=Re,Nn.map=ue,Nn.mapKeys=Bo,Nn.mapValues=Do,Nn.matches=Ne,Nn.matchesProperty=function(n,t){return xt(n,ot(t,true))},Nn.memoize=ce,Nn.merge=Eo,Nn.method=Xo,Nn.methodOf=Ho,
Nn.mixin=Te,Nn.modArgs=jo,Nn.negate=function(n){if(typeof n!="function")throw new Ge(L);return function(){return!n.apply(this,arguments)}},Nn.omit=Mo,Nn.once=function(n){return fe(2,n)},Nn.pairs=Oe,Nn.partial=ko,Nn.partialRight=Io,Nn.partition=co,Nn.pick=qo,Nn.pluck=function(n,t){return ue(n,ze(t))},Nn.property=ze,Nn.propertyOf=function(n){return function(t){return yt(n,Dr(t),t+"")}},Nn.pull=function(){var n=arguments,t=n[0];if(!t||!t.length)return t;for(var r=0,e=xr(),u=n.length;++r<u;)for(var o=0,i=n[r];-1<(o=e(t,i,o));)pu.call(t,o,1);
return t},Nn.pullAt=Vu,Nn.range=function(n,t,r){r&&Ur(n,t,r)&&(t=r=w),n=+n||0,r=null==r?1:+r||0,null==t?(t=n,n=0):t=+t||0;var e=-1;t=bu(vu((t-n)/(r||1)),0);for(var u=Be(t);++e<t;)u[e]=n,n+=r;return u},Nn.rearg=Ro,Nn.reject=function(n,t,r){var e=Oo(n)?Vn:lt;return t=wr(t,r,3),e(n,function(n,r,e){return!t(n,r,e)})},Nn.remove=function(n,t,r){var e=[];if(!n||!n.length)return e;var u=-1,o=[],i=n.length;for(t=wr(t,r,3);++u<i;)r=n[u],t(r,u,n)&&(e.push(r),o.push(u));return It(n,o),e},Nn.rest=Yr,Nn.restParam=le,
Nn.set=function(n,t,r){if(null==n)return n;var e=t+"";t=null!=n[e]||Wr(t,n)?[e]:Dr(t);for(var e=-1,u=t.length,o=u-1,i=n;null!=i&&++e<u;){var f=t[e];ge(i)&&(e==o?i[f]=r:null==i[f]&&(i[f]=Cr(t[e+1])?[]:{})),i=i[f]}return n},Nn.shuffle=function(n){return oe(n,Ru)},Nn.slice=function(n,t,r){var e=n?n.length:0;return e?(r&&typeof r!="number"&&Ur(n,t,r)&&(t=0,r=e),Et(n,t,r)):[]},Nn.sortBy=function(n,t,r){if(null==n)return[];r&&Ur(n,t,r)&&(t=w);var e=-1;return t=wr(t,r,3),n=wt(n,function(n,r,u){return{a:t(n,r,u),
b:++e,c:n}}),Ut(n,f)},Nn.sortByAll=po,Nn.sortByOrder=function(n,t,r,e){return null==n?[]:(e&&Ur(t,r,e)&&(r=w),Oo(t)||(t=null==t?[]:[t]),Oo(r)||(r=null==r?[]:[r]),Wt(n,t,r))},Nn.spread=function(n){if(typeof n!="function")throw new Ge(L);return function(t){return n.apply(this,t)}},Nn.take=function(n,t,r){return n&&n.length?((r?Ur(n,t,r):null==t)&&(t=1),Et(n,0,0>t?0:t)):[]},Nn.takeRight=function(n,t,r){var e=n?n.length:0;return e?((r?Ur(n,t,r):null==t)&&(t=1),t=e-(+t||0),Et(n,0>t?0:t)):[]},Nn.takeRightWhile=function(n,t,r){
return n&&n.length?Nt(n,wr(t,r,3),false,true):[]},Nn.takeWhile=function(n,t,r){return n&&n.length?Nt(n,wr(t,r,3)):[]},Nn.tap=function(n,t,r){return t.call(r,n),n},Nn.throttle=function(n,t,r){var e=true,u=true;if(typeof n!="function")throw new Ge(L);return false===r?e=false:ge(r)&&(e="leading"in r?!!r.leading:e,u="trailing"in r?!!r.trailing:u),ae(n,t,{leading:e,maxWait:+t,trailing:u})},Nn.thru=ne,Nn.times=function(n,t,r){if(n=yu(n),1>n||!mu(n))return[];var e=-1,u=Be(xu(n,4294967295));for(t=Bt(t,r,1);++e<n;)4294967295>e?u[e]=t(e):t(e);
return u},Nn.toArray=je,Nn.toPlainObject=ke,Nn.transform=function(n,t,r,e){var u=Oo(n)||xe(n);return t=wr(t,e,4),null==r&&(u||ge(n)?(e=n.constructor,r=u?Oo(n)?new e:[]:$u(ve(e)?e.prototype:w)):r={}),(u?Pn:_t)(n,function(n,e,u){return t(r,n,e,u)}),r},Nn.union=Gu,Nn.uniq=Gr,Nn.unzip=Jr,Nn.unzipWith=Xr,Nn.values=Ee,Nn.valuesIn=function(n){return Ft(n,Re(n))},Nn.where=function(n,t){return re(n,bt(t))},Nn.without=Ju,Nn.wrap=function(n,t){return t=null==t?Fe:t,gr(t,R,w,[n],[])},Nn.xor=function(){for(var n=-1,t=arguments.length;++n<t;){
var r=arguments[n];if(Er(r))var e=e?Jn(ft(e,r),ft(r,e)):r}return e?St(e):[]},Nn.zip=Xu,Nn.zipObject=Hr,Nn.zipWith=Hu,Nn.backflow=Ao,Nn.collect=ue,Nn.compose=Ao,Nn.each=uo,Nn.eachRight=oo,Nn.extend=Co,Nn.iteratee=Se,Nn.methods=Ie,Nn.object=Hr,Nn.select=re,Nn.tail=Yr,Nn.unique=Gr,Te(Nn,Nn),Nn.add=function(n,t){return(+n||0)+(+t||0)},Nn.attempt=Jo,Nn.camelCase=Po,Nn.capitalize=function(n){return(n=u(n))&&n.charAt(0).toUpperCase()+n.slice(1)},Nn.ceil=Qo,Nn.clone=function(n,t,r,e){return t&&typeof t!="boolean"&&Ur(n,t,r)?t=false:typeof t=="function"&&(e=r,
r=t,t=false),typeof r=="function"?ot(n,t,Bt(r,e,3)):ot(n,t)},Nn.cloneDeep=function(n,t,r){return typeof t=="function"?ot(n,true,Bt(t,r,3)):ot(n,true)},Nn.deburr=Ce,Nn.endsWith=function(n,t,r){n=u(n),t+="";var e=n.length;return r=r===w?e:xu(0>r?0:+r||0,e),r-=t.length,0<=r&&n.indexOf(t,r)==r},Nn.escape=function(n){return(n=u(n))&&hn.test(n)?n.replace(sn,c):n},Nn.escapeRegExp=function(n){return(n=u(n))&&bn.test(n)?n.replace(wn,l):n||"(?:)"},Nn.every=te,Nn.find=ro,Nn.findIndex=qu,Nn.findKey=$o,Nn.findLast=eo,
Nn.findLastIndex=Pu,Nn.findLastKey=So,Nn.findWhere=function(n,t){return ro(n,bt(t))},Nn.first=Kr,Nn.floor=ni,Nn.get=function(n,t,r){return n=null==n?w:yt(n,Dr(t),t+""),n===w?r:n},Nn.gt=se,Nn.gte=function(n,t){return n>=t},Nn.has=function(n,t){if(null==n)return false;var r=nu.call(n,t);if(!r&&!Wr(t)){if(t=Dr(t),n=1==t.length?n:yt(n,Et(t,0,-1)),null==n)return false;t=Zr(t),r=nu.call(n,t)}return r||Sr(n.length)&&Cr(t,n.length)&&(Oo(n)||pe(n))},Nn.identity=Fe,Nn.includes=ee,Nn.indexOf=Vr,Nn.inRange=function(n,t,r){
return t=+t||0,r===w?(r=t,t=0):r=+r||0,n>=xu(t,r)&&n<bu(t,r)},Nn.isArguments=pe,Nn.isArray=Oo,Nn.isBoolean=function(n){return true===n||false===n||h(n)&&ru.call(n)==M},Nn.isDate=function(n){return h(n)&&ru.call(n)==q},Nn.isElement=function(n){return!!n&&1===n.nodeType&&h(n)&&!me(n)},Nn.isEmpty=function(n){return null==n?true:Er(n)&&(Oo(n)||be(n)||pe(n)||h(n)&&ve(n.splice))?!n.length:!zo(n).length},Nn.isEqual=he,Nn.isError=_e,Nn.isFinite=function(n){return typeof n=="number"&&mu(n)},Nn.isFunction=ve,Nn.isMatch=function(n,t,r,e){
return r=typeof r=="function"?Bt(r,e,3):w,mt(n,Ar(t),r)},Nn.isNaN=function(n){return de(n)&&n!=+n},Nn.isNative=ye,Nn.isNull=function(n){return null===n},Nn.isNumber=de,Nn.isObject=ge,Nn.isPlainObject=me,Nn.isRegExp=we,Nn.isString=be,Nn.isTypedArray=xe,Nn.isUndefined=function(n){return n===w},Nn.kebabCase=Ko,Nn.last=Zr,Nn.lastIndexOf=function(n,t,r){var e=n?n.length:0;if(!e)return-1;var u=e;if(typeof r=="number")u=(0>r?bu(e+r,0):xu(r||0,e-1))+1;else if(r)return u=Lt(n,t,true)-1,n=n[u],(t===t?t===n:n!==n)?u:-1;
if(t!==t)return p(n,u,true);for(;u--;)if(n[u]===t)return u;return-1},Nn.lt=Ae,Nn.lte=function(n,t){return n<=t},Nn.max=ti,Nn.min=ri,Nn.noConflict=function(){return Zn._=eu,this},Nn.noop=Le,Nn.now=ho,Nn.pad=function(n,t,r){n=u(n),t=+t;var e=n.length;return e<t&&mu(t)?(e=(t-e)/2,t=yu(e),e=vu(e),r=pr("",e,r),r.slice(0,t)+n+r):n},Nn.padLeft=Vo,Nn.padRight=Zo,Nn.parseInt=function(n,t,r){return(r?Ur(n,t,r):null==t)?t=0:t&&(t=+t),n=We(n),ju(n,t||(In.test(n)?16:10))},Nn.random=function(n,t,r){r&&Ur(n,t,r)&&(t=r=w);
var e=null==n,u=null==t;return null==r&&(u&&typeof n=="boolean"?(r=n,n=1):typeof t=="boolean"&&(r=t,u=true)),e&&u&&(t=1,u=false),n=+n||0,u?(t=n,n=0):t=+t||0,r||n%1||t%1?(r=ku(),xu(n+r*(t-n+fu("1e-"+((r+"").length-1))),t)):Rt(n,t)},Nn.reduce=lo,Nn.reduceRight=so,Nn.repeat=Ue,Nn.result=function(n,t,r){var e=null==n?w:n[t];return e===w&&(null==n||Wr(t,n)||(t=Dr(t),n=1==t.length?n:yt(n,Et(t,0,-1)),e=null==n?w:n[Zr(t)]),e=e===w?r:e),ve(e)?e.call(n):e},Nn.round=ei,Nn.runInContext=m,Nn.size=function(n){var t=n?Bu(n):0;
return Sr(t)?t:zo(n).length},Nn.snakeCase=Yo,Nn.some=ie,Nn.sortedIndex=Zu,Nn.sortedLastIndex=Yu,Nn.startCase=Go,Nn.startsWith=function(n,t,r){return n=u(n),r=null==r?0:xu(0>r?0:+r||0,n.length),n.lastIndexOf(t,r)==r},Nn.sum=function(n,t,r){if(r&&Ur(n,t,r)&&(t=w),t=wr(t,r,3),1==t.length){n=Oo(n)?n:zr(n),r=n.length;for(var e=0;r--;)e+=+t(n[r])||0;n=e}else n=$t(n,t);return n},Nn.template=function(n,t,r){var e=Nn.templateSettings;r&&Ur(n,t,r)&&(t=r=w),n=u(n),t=nt(tt({},r||t),e,Qn),r=nt(tt({},t.imports),e.imports,Qn);
var o,i,f=zo(r),a=Ft(r,f),c=0;r=t.interpolate||Cn;var l="__p+='";r=Ze((t.escape||Cn).source+"|"+r.source+"|"+(r===gn?jn:Cn).source+"|"+(t.evaluate||Cn).source+"|$","g");var p="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";if(n.replace(r,function(t,r,e,u,f,a){return e||(e=u),l+=n.slice(c,a).replace(Un,s),r&&(o=true,l+="'+__e("+r+")+'"),f&&(i=true,l+="';"+f+";\n__p+='"),e&&(l+="'+((__t=("+e+"))==null?'':__t)+'"),c=a+t.length,t}),l+="';",(t=t.variable)||(l="with(obj){"+l+"}"),l=(i?l.replace(fn,""):l).replace(an,"$1").replace(cn,"$1;"),
l="function("+(t||"obj")+"){"+(t?"":"obj||(obj={});")+"var __t,__p=''"+(o?",__e=_.escape":"")+(i?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+l+"return __p}",t=Jo(function(){return qe(f,p+"return "+l).apply(w,a)}),t.source=l,_e(t))throw t;return t},Nn.trim=We,Nn.trimLeft=function(n,t,r){var e=n;return(n=u(n))?n.slice((r?Ur(e,t,r):null==t)?g(n):o(n,t+"")):n},Nn.trimRight=function(n,t,r){var e=n;return(n=u(n))?(r?Ur(e,t,r):null==t)?n.slice(0,y(n)+1):n.slice(0,i(n,t+"")+1):n;
},Nn.trunc=function(n,t,r){r&&Ur(n,t,r)&&(t=w);var e=U;if(r=W,null!=t)if(ge(t)){var o="separator"in t?t.separator:o,e="length"in t?+t.length||0:e;r="omission"in t?u(t.omission):r}else e=+t||0;if(n=u(n),e>=n.length)return n;if(e-=r.length,1>e)return r;if(t=n.slice(0,e),null==o)return t+r;if(we(o)){if(n.slice(e).search(o)){var i,f=n.slice(0,e);for(o.global||(o=Ze(o.source,(kn.exec(o)||"")+"g")),o.lastIndex=0;n=o.exec(f);)i=n.index;t=t.slice(0,null==i?e:i)}}else n.indexOf(o,e)!=e&&(o=t.lastIndexOf(o),
-1<o&&(t=t.slice(0,o)));return t+r},Nn.unescape=function(n){return(n=u(n))&&pn.test(n)?n.replace(ln,d):n},Nn.uniqueId=function(n){var t=++tu;return u(n)+t},Nn.words=$e,Nn.all=te,Nn.any=ie,Nn.contains=ee,Nn.eq=he,Nn.detect=ro,Nn.foldl=lo,Nn.foldr=so,Nn.head=Kr,Nn.include=ee,Nn.inject=lo,Te(Nn,function(){var n={};return _t(Nn,function(t,r){Nn.prototype[r]||(n[r]=t)}),n}(),false),Nn.sample=oe,Nn.prototype.sample=function(n){return this.__chain__||null!=n?this.thru(function(t){return oe(t,n)}):oe(this.value());
},Nn.VERSION=b,Pn("bind bindKey curry curryRight partial partialRight".split(" "),function(n){Nn[n].placeholder=Nn}),Pn(["drop","take"],function(n,t){zn.prototype[n]=function(r){var e=this.__filtered__;if(e&&!t)return new zn(this);r=null==r?1:bu(yu(r)||0,0);var u=this.clone();return e?u.__takeCount__=xu(u.__takeCount__,r):u.__views__.push({size:r,type:n+(0>u.__dir__?"Right":"")}),u},zn.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}}),Pn(["filter","map","takeWhile"],function(n,t){
var r=t+1,e=r!=T;zn.prototype[n]=function(n,t){var u=this.clone();return u.__iteratees__.push({iteratee:wr(n,t,1),type:r}),u.__filtered__=u.__filtered__||e,u}}),Pn(["first","last"],function(n,t){var r="take"+(t?"Right":"");zn.prototype[n]=function(){return this[r](1).value()[0]}}),Pn(["initial","rest"],function(n,t){var r="drop"+(t?"":"Right");zn.prototype[n]=function(){return this.__filtered__?new zn(this):this[r](1)}}),Pn(["pluck","where"],function(n,t){var r=t?"filter":"map",e=t?bt:ze;zn.prototype[n]=function(n){
return this[r](e(n))}}),zn.prototype.compact=function(){return this.filter(Fe)},zn.prototype.reject=function(n,t){return n=wr(n,t,1),this.filter(function(t){return!n(t)})},zn.prototype.slice=function(n,t){n=null==n?0:+n||0;var r=this;return r.__filtered__&&(0<n||0>t)?new zn(r):(0>n?r=r.takeRight(-n):n&&(r=r.drop(n)),t!==w&&(t=+t||0,r=0>t?r.dropRight(-t):r.take(t-n)),r)},zn.prototype.takeRightWhile=function(n,t){return this.reverse().takeWhile(n,t).reverse()},zn.prototype.toArray=function(){return this.take(Ru);
},_t(zn.prototype,function(n,t){var r=/^(?:filter|map|reject)|While$/.test(t),e=/^(?:first|last)$/.test(t),u=Nn[e?"take"+("last"==t?"Right":""):t];u&&(Nn.prototype[t]=function(){function t(n){return e&&i?u(n,1)[0]:u.apply(w,Jn([n],o))}var o=e?[1]:arguments,i=this.__chain__,f=this.__wrapped__,a=!!this.__actions__.length,c=f instanceof zn,l=o[0],s=c||Oo(f);return s&&r&&typeof l=="function"&&1!=l.length&&(c=s=false),l={func:ne,args:[t],thisArg:w},a=c&&!a,e&&!i?a?(f=f.clone(),f.__actions__.push(l),n.call(f)):u.call(w,this.value())[0]:!e&&s?(f=a?f:new zn(this),
f=n.apply(f,o),f.__actions__.push(l),new Ln(f,i)):this.thru(t)})}),Pn("join pop push replace shift sort splice split unshift".split(" "),function(n){var t=(/^(?:replace|split)$/.test(n)?He:Je)[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:join|pop|replace|shift)$/.test(n);Nn.prototype[n]=function(){var n=arguments;return e&&!this.__chain__?t.apply(this.value(),n):this[r](function(r){return t.apply(r,n)})}}),_t(zn.prototype,function(n,t){var r=Nn[t];if(r){var e=r.name+"";(Wu[e]||(Wu[e]=[])).push({
name:t,func:r})}}),Wu[sr(w,A).name]=[{name:"wrapper",func:w}],zn.prototype.clone=function(){var n=new zn(this.__wrapped__);return n.__actions__=qn(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=qn(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=qn(this.__views__),n},zn.prototype.reverse=function(){if(this.__filtered__){var n=new zn(this);n.__dir__=-1,n.__filtered__=true}else n=this.clone(),n.__dir__*=-1;return n},zn.prototype.value=function(){
var n,t=this.__wrapped__.value(),r=this.__dir__,e=Oo(t),u=0>r,o=e?t.length:0;n=o;for(var i=this.__views__,f=0,a=-1,c=i.length;++a<c;){var l=i[a],s=l.size;switch(l.type){case"drop":f+=s;break;case"dropRight":n-=s;break;case"take":n=xu(n,f+s);break;case"takeRight":f=bu(f,n-s)}}if(n={start:f,end:n},i=n.start,f=n.end,n=f-i,u=u?f:i-1,i=this.__iteratees__,f=i.length,a=0,c=xu(n,this.__takeCount__),!e||o<F||o==n&&c==n)return Tt(t,this.__actions__);e=[];n:for(;n--&&a<c;){for(u+=r,o=-1,l=t[u];++o<f;){var p=i[o],s=p.type,p=p.iteratee(l);
if(s==T)l=p;else if(!p){if(s==N)continue n;break n}}e[a++]=l}return e},Nn.prototype.chain=function(){return Qr(this)},Nn.prototype.commit=function(){return new Ln(this.value(),this.__chain__)},Nn.prototype.concat=Qu,Nn.prototype.plant=function(n){for(var t,r=this;r instanceof Tn;){var e=Mr(r);t?u.__wrapped__=e:t=e;var u=e,r=r.__wrapped__}return u.__wrapped__=n,t},Nn.prototype.reverse=function(){function n(n){return n.reverse()}var t=this.__wrapped__;return t instanceof zn?(this.__actions__.length&&(t=new zn(this)),
t=t.reverse(),t.__actions__.push({func:ne,args:[n],thisArg:w}),new Ln(t,this.__chain__)):this.thru(n)},Nn.prototype.toString=function(){return this.value()+""},Nn.prototype.run=Nn.prototype.toJSON=Nn.prototype.valueOf=Nn.prototype.value=function(){return Tt(this.__wrapped__,this.__actions__)},Nn.prototype.collect=Nn.prototype.map,Nn.prototype.head=Nn.prototype.first,Nn.prototype.select=Nn.prototype.filter,Nn.prototype.tail=Nn.prototype.rest,Nn}var w,b="3.10.1",x=1,A=2,j=4,k=8,I=16,R=32,O=64,E=128,C=256,U=30,W="...",$=150,S=16,F=200,N=1,T=2,L="Expected a function",z="__lodash_placeholder__",B="[object Arguments]",D="[object Array]",M="[object Boolean]",q="[object Date]",P="[object Error]",K="[object Function]",V="[object Number]",Z="[object Object]",Y="[object RegExp]",G="[object String]",J="[object ArrayBuffer]",X="[object Float32Array]",H="[object Float64Array]",Q="[object Int8Array]",nn="[object Int16Array]",tn="[object Int32Array]",rn="[object Uint8Array]",en="[object Uint8ClampedArray]",un="[object Uint16Array]",on="[object Uint32Array]",fn=/\b__p\+='';/g,an=/\b(__p\+=)''\+/g,cn=/(__e\(.*?\)|\b__t\))\+'';/g,ln=/&(?:amp|lt|gt|quot|#39|#96);/g,sn=/[&<>"'`]/g,pn=RegExp(ln.source),hn=RegExp(sn.source),_n=/<%-([\s\S]+?)%>/g,vn=/<%([\s\S]+?)%>/g,gn=/<%=([\s\S]+?)%>/g,yn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,dn=/^\w*$/,mn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g,wn=/^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,bn=RegExp(wn.source),xn=/[\u0300-\u036f\ufe20-\ufe23]/g,An=/\\(\\)?/g,jn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,kn=/\w*$/,In=/^0[xX]/,Rn=/^\[object .+?Constructor\]$/,On=/^\d+$/,En=/[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g,Cn=/($^)/,Un=/['\n\r\u2028\u2029\\]/g,Wn=RegExp("[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?=[A-Z\\xc0-\\xd6\\xd8-\\xde][a-z\\xdf-\\xf6\\xf8-\\xff]+)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+|[A-Z\\xc0-\\xd6\\xd8-\\xde]+|[0-9]+","g"),$n="Array ArrayBuffer Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Math Number Object RegExp Set String _ clearTimeout isFinite parseFloat parseInt setTimeout TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap".split(" "),Sn={};
Sn[X]=Sn[H]=Sn[Q]=Sn[nn]=Sn[tn]=Sn[rn]=Sn[en]=Sn[un]=Sn[on]=true,Sn[B]=Sn[D]=Sn[J]=Sn[M]=Sn[q]=Sn[P]=Sn[K]=Sn["[object Map]"]=Sn[V]=Sn[Z]=Sn[Y]=Sn["[object Set]"]=Sn[G]=Sn["[object WeakMap]"]=false;var Fn={};Fn[B]=Fn[D]=Fn[J]=Fn[M]=Fn[q]=Fn[X]=Fn[H]=Fn[Q]=Fn[nn]=Fn[tn]=Fn[V]=Fn[Z]=Fn[Y]=Fn[G]=Fn[rn]=Fn[en]=Fn[un]=Fn[on]=true,Fn[P]=Fn[K]=Fn["[object Map]"]=Fn["[object Set]"]=Fn["[object WeakMap]"]=false;var Nn={"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xe0":"a","\xe1":"a","\xe2":"a",
"\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xdd":"Y",
"\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss"},Tn={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},Ln={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#96;":"`"},zn={"function":true,object:true},Bn={0:"x30",1:"x31",2:"x32",3:"x33",4:"x34",5:"x35",6:"x36",7:"x37",8:"x38",9:"x39",A:"x41",B:"x42",C:"x43",D:"x44",E:"x45",F:"x46",a:"x61",b:"x62",c:"x63",d:"x64",e:"x65",f:"x66",n:"x6e",r:"x72",t:"x74",u:"x75",v:"x76",x:"x78"},Dn={"\\":"\\",
"'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Mn=zn[typeof exports]&&exports&&!exports.nodeType&&exports,qn=zn[typeof module]&&module&&!module.nodeType&&module,Pn=zn[typeof self]&&self&&self.Object&&self,Kn=zn[typeof window]&&window&&window.Object&&window,Vn=qn&&qn.exports===Mn&&Mn,Zn=Mn&&qn&&typeof global=="object"&&global&&global.Object&&global||Kn!==(this&&this.window)&&Kn||Pn||this,Yn=m();typeof define=="function"&&typeof define.amd=="object"&&define.amd?(Zn._=Yn, define(function(){
return Yn})):Mn&&qn?Vn?(qn.exports=Yn)._=Yn:Mn._=Yn:Zn._=Yn}).call(this);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],108:[function(require,module,exports){
//! moment.js
//! version : 2.18.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isUndefined(input) {
    return input === void 0;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null,
        rfc2822         : false,
        weekdayMismatch : false
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.
    this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
            '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    ss : '%d seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return isArray(this._months) ? this._months :
            this._months['standalone'];
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return isArray(this._monthsShort) ? this._monthsShort :
            this._monthsShort['standalone'];
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    // can't just apply() to create a date:
    // https://stackoverflow.com/q/181348
    var date = new Date(y, m, d, h, M, s, ms);

    // the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    // the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return isArray(this._weekdays) ? this._weekdays :
            this._weekdays['standalone'];
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('k',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);
addRegexToken('kk', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['k', 'kk'], function (input, array, config) {
    var kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;

// date and time from ref 2822 format
function configFromRFC2822(config) {
    var string, match, dayFormat,
        dateFormat, timeFormat, tzFormat;
    var timezones = {
        ' GMT': ' +0000',
        ' EDT': ' -0400',
        ' EST': ' -0500',
        ' CDT': ' -0500',
        ' CST': ' -0600',
        ' MDT': ' -0600',
        ' MST': ' -0700',
        ' PDT': ' -0700',
        ' PST': ' -0800'
    };
    var military = 'YXWVUTSRQPONZABCDEFGHIKLM';
    var timezone, timezoneIndex;

    string = config._i
        .replace(/\([^\)]*\)|[\n\t]/g, ' ') // Remove comments and folding whitespace
        .replace(/(\s\s+)/g, ' ') // Replace multiple-spaces with a single space
        .replace(/^\s|\s$/g, ''); // Remove leading and trailing spaces
    match = basicRfcRegex.exec(string);

    if (match) {
        dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';
        dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');
        timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');

        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
        if (match[1]) { // day of week given
            var momentDate = new Date(match[2]);
            var momentDay = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][momentDate.getDay()];

            if (match[1].substr(0,3) !== momentDay) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return;
            }
        }

        switch (match[5].length) {
            case 2: // military
                if (timezoneIndex === 0) {
                    timezone = ' +0000';
                } else {
                    timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;
                    timezone = ((timezoneIndex < 0) ? ' -' : ' +') +
                        (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';
                }
                break;
            case 4: // Zone
                timezone = timezones[match[5]];
                break;
            default: // UT or +/-9999
                timezone = timezones[' GMT'];
        }
        match[5] = timezone;
        config._i = match.splice(1).join('');
        tzFormat = ' ZZ';
        config._f = dayFormat + dateFormat + timeFormat + tzFormat;
        configFromStringAndFormat(config);
        getParsingFlags(config).rfc2822 = true;
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    configFromRFC2822(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    // Final attempt, use Input Fallback
    hooks.createFromInputFallback(config);
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear != null) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// constant that refers to the RFC 2822 form
hooks.RFC_2822 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }
    if (config._f === hooks.RFC_2822) {
        configFromRFC2822(config);
        return;
    }
    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (isUndefined(input)) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (isObject(input)) {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

function isDurationValid(m) {
    for (var key in m) {
        if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
        }
    }

    var unitHasDecimal = false;
    for (var i = 0; i < ordering.length; ++i) {
        if (m[ordering[i]]) {
            if (unitHasDecimal) {
                return false; // only allow non-integers for smallest unit
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                unitHasDecimal = true;
            }
        }
    }

    return true;
}

function isValid$1() {
    return this._isValid;
}

function createInvalid$1() {
    return createDuration(NaN);
}

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    this._isValid = isDurationValid(normalizedInput);

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime, keepMinutes) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString() {
    if (!this.isValid()) {
        return null;
    }
    var m = this.clone().utc();
    if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
    if (isFunction(Date.prototype.toISOString)) {
        // native implementation is ~50x faster, use it when we can
        return this.toDate().toISOString();
    }
    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$2 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    // TODO: Remove "ordinalParse" fallback in next major release.
    return isStrict ?
      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
      locale._dayOfMonthOrdinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$2;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    if (!this.isValid()) {
        return NaN;
    }
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    if (!this.isValid()) {
        return NaN;
    }
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[units + 's']() : NaN;
}

function makeGetter(name) {
    return function () {
        return this.isValid() ? this._data[name] : NaN;
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    ss: 44,         // a few seconds to seconds
    s : 45,         // seconds to minute
    m : 45,         // minutes to hour
    h : 22,         // hours to day
    d : 26,         // days to month
    M : 11          // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds <= thresholds.ss && ['s', seconds]  ||
            seconds < thresholds.s   && ['ss', seconds] ||
            minutes <= 1             && ['m']           ||
            minutes < thresholds.m   && ['mm', minutes] ||
            hours   <= 1             && ['h']           ||
            hours   < thresholds.h   && ['hh', hours]   ||
            days    <= 1             && ['d']           ||
            days    < thresholds.d   && ['dd', days]    ||
            months  <= 1             && ['M']           ||
            months  < thresholds.M   && ['MM', months]  ||
            years   <= 1             && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    if (threshold === 's') {
        thresholds.ss = limit - 1;
    }
    return true;
}

function humanize (withSuffix) {
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.isValid        = isValid$1;
proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.18.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

})));

},{}],109:[function(require,module,exports){
var css = "/* Make clicks pass-through */\n#nprogress {\n  pointer-events: none;\n}\n#nprogress .bar {\n  background: #29d;\n  position: fixed;\n  z-index: 1031;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 2px;\n}\n/* Fancy blur effect */\n#nprogress .peg {\n  display: block;\n  position: absolute;\n  right: 0px;\n  width: 100px;\n  height: 100%;\n  box-shadow: 0 0 10px #29d, 0 0 5px #29d;\n  opacity: 1.0;\n  -webkit-transform: rotate(3deg) translate(0px, -4px);\n  -ms-transform: rotate(3deg) translate(0px, -4px);\n  transform: rotate(3deg) translate(0px, -4px);\n}\n/* Remove these to get rid of the spinner */\n#nprogress .spinner {\n  display: block;\n  position: fixed;\n  z-index: 1031;\n  top: 15px;\n  right: 15px;\n}\n#nprogress .spinner-icon {\n  width: 18px;\n  height: 18px;\n  box-sizing: border-box;\n  border: solid 2px transparent;\n  border-top-color: #29d;\n  border-left-color: #29d;\n  border-radius: 50%;\n  -webkit-animation: nprogress-spinner 400ms linear infinite;\n  animation: nprogress-spinner 400ms linear infinite;\n}\n.nprogress-custom-parent {\n  overflow: hidden;\n  position: relative;\n}\n.nprogress-custom-parent #nprogress .spinner,\n.nprogress-custom-parent #nprogress .bar {\n  position: absolute;\n}\n@-webkit-keyframes nprogress-spinner {\n  0% {\n    -webkit-transform: rotate(0deg);\n  }\n\n  100% {\n    -webkit-transform: rotate(360deg);\n  }\n}\n@keyframes nprogress-spinner {\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n}\n"; (require("browserify-css").createStyle(css, { "href": "src\\js\\plugins\\nprogress\\nprogress.css" }, { "insertAt": "bottom" })); module.exports = css;
},{"browserify-css":1}],110:[function(require,module,exports){
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */

;(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.NProgress = factory();
  }

})(this, function() {
  var NProgress = {};

  NProgress.version = '0.2.0';

  var Settings = NProgress.settings = {
    minimum: 0.08,
    easing: 'linear',
    positionUsing: '',
    speed: 350,
    trickle: true,
    trickleSpeed: 250,
    showSpinner: true,
    barSelector: '[role="bar"]',
    spinnerSelector: '[role="spinner"]',
    parent: 'body',
    template: '<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'
  };

  /**
   * Updates configuration.
   *
   *     NProgress.configure({
   *       minimum: 0.1
   *     });
   */
  NProgress.configure = function(options) {
    var key, value;
    for (key in options) {
      value = options[key];
      if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value;
    }

    return this;
  };

  /**
   * Last number.
   */

  NProgress.status = null;

  /**
   * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.
   *
   *     NProgress.set(0.4);
   *     NProgress.set(1.0);
   */

  NProgress.set = function(n) {
    var started = NProgress.isStarted();

    n = clamp(n, Settings.minimum, 1);
    NProgress.status = (n === 1 ? null : n);

    var progress = NProgress.render(!started),
        bar      = progress.querySelector(Settings.barSelector),
        speed    = Settings.speed,
        ease     = Settings.easing;

    progress.offsetWidth; /* Repaint */

    queue(function(next) {
      // Set positionUsing if it hasn't already been set
      if (Settings.positionUsing === '') Settings.positionUsing = NProgress.getPositioningCSS();

      // Add transition
      css(bar, barPositionCSS(n, speed, ease));

      if (n === 1) {
        // Fade out
        css(progress, {
          transition: 'none',
          opacity: 1
        });
        progress.offsetWidth; /* Repaint */

        setTimeout(function() {
          css(progress, {
            transition: 'all ' + speed + 'ms linear',
            opacity: 0
          });
          setTimeout(function() {
            NProgress.remove();
            next();
          }, speed);
        }, speed);
      } else {
        setTimeout(next, speed);
      }
    });

    return this;
  };

  NProgress.isStarted = function() {
    return typeof NProgress.status === 'number';
  };

  /**
   * Shows the progress bar.
   * This is the same as setting the status to 0%, except that it doesn't go backwards.
   *
   *     NProgress.start();
   *
   */
  NProgress.start = function() {
    if (!NProgress.status) NProgress.set(0);

    var work = function() {
      setTimeout(function() {
        if (!NProgress.status) return;
        NProgress.trickle();
        work();
      }, Settings.trickleSpeed);
    };

    if (Settings.trickle) work();

    return this;
  };

  /**
   * Hides the progress bar.
   * This is the *sort of* the same as setting the status to 100%, with the
   * difference being `done()` makes some placebo effect of some realistic motion.
   *
   *     NProgress.done();
   *
   * If `true` is passed, it will show the progress bar even if its hidden.
   *
   *     NProgress.done(true);
   */

  NProgress.done = function(force) {
    if (!force && !NProgress.status) return this;

    return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);
  };

  /**
   * Increments by a random amount.
   */

  NProgress.inc = function(amount) {
    var n = NProgress.status;

    if (!n) {
      return NProgress.start();
    } else if(n > 1) {
      return;
    } else {
      if (typeof amount !== 'number') {
        if (n >= 0 && n < 0.25) {
          // Start out between 3 - 6% increments
          amount = (Math.random() * (5 - 3 + 1) + 3) / 100;
        } else if (n >= 0.25 && n < 0.65) {
          // increment between 0 - 3%
          amount = (Math.random() * 3) / 100;
        } else if (n >= 0.65 && n < 0.9) {
          // increment between 0 - 2%
          amount = (Math.random() * 2) / 100;
        } else if (n >= 0.9 && n < 0.99) {
          // finally, increment it .5 %
          amount = 0.005;
        } else {
          // after 99%, don't increment:
          amount = 0;
        }
      }

      n = clamp(n + amount, 0, 0.994);
      return NProgress.set(n);
    }
  };

  NProgress.trickle = function() {
    return NProgress.inc();
  };

  /**
   * Waits for all supplied jQuery promises and
   * increases the progress as the promises resolve.
   *
   * @param $promise jQUery Promise
   */
  (function() {
    var initial = 0, current = 0;

    NProgress.promise = function($promise) {
      if (!$promise || $promise.state() === "resolved") {
        return this;
      }

      if (current === 0) {
        NProgress.start();
      }

      initial++;
      current++;

      $promise.always(function() {
        current--;
        if (current === 0) {
            initial = 0;
            NProgress.done();
        } else {
            NProgress.set((initial - current) / initial);
        }
      });

      return this;
    };

  })();

  /**
   * (Internal) renders the progress bar markup based on the `template`
   * setting.
   */

  NProgress.render = function(fromStart) {
    if (NProgress.isRendered()) return document.getElementById('nprogress');

    addClass(document.documentElement, 'nprogress-busy');

    var progress = document.createElement('div');
    progress.id = 'nprogress';
    progress.innerHTML = Settings.template;

    var bar      = progress.querySelector(Settings.barSelector),
        perc     = fromStart ? '-100' : toBarPerc(NProgress.status || 0),
        parent   = document.querySelector(Settings.parent),
        spinner;

    css(bar, {
      transition: 'all 0 linear',
      transform: 'translate3d(' + perc + '%,0,0)'
    });

    if (!Settings.showSpinner) {
      spinner = progress.querySelector(Settings.spinnerSelector);
      spinner && removeElement(spinner);
    }

    if (parent != document.body) {
      addClass(parent, 'nprogress-custom-parent');
    }

    parent.appendChild(progress);
    return progress;
  };

  /**
   * Removes the element. Opposite of render().
   */

  NProgress.remove = function() {
    removeClass(document.documentElement, 'nprogress-busy');
    removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent');
    var progress = document.getElementById('nprogress');
    progress && removeElement(progress);
  };

  /**
   * Checks if the progress bar is rendered.
   */

  NProgress.isRendered = function() {
    return !!document.getElementById('nprogress');
  };

  /**
   * Determine which positioning CSS rule to use.
   */

  NProgress.getPositioningCSS = function() {
    // Sniff on document.body.style
    var bodyStyle = document.body.style;

    // Sniff prefixes
    var vendorPrefix = ('WebkitTransform' in bodyStyle) ? 'Webkit' :
                       ('MozTransform' in bodyStyle) ? 'Moz' :
                       ('msTransform' in bodyStyle) ? 'ms' :
                       ('OTransform' in bodyStyle) ? 'O' : '';

    if (vendorPrefix + 'Perspective' in bodyStyle) {
      // Modern browsers with 3D support, e.g. Webkit, IE10
      return 'translate3d';
    } else if (vendorPrefix + 'Transform' in bodyStyle) {
      // Browsers without 3D support, e.g. IE9
      return 'translate';
    } else {
      // Browsers without translate() support, e.g. IE7-8
      return 'margin';
    }
  };

  /**
   * Helpers
   */

  function clamp(n, min, max) {
    if (n < min) return min;
    if (n > max) return max;
    return n;
  }

  /**
   * (Internal) converts a percentage (`0..1`) to a bar translateX
   * percentage (`-100%..0%`).
   */

  function toBarPerc(n) {
    return (-1 + n) * 100;
  }


  /**
   * (Internal) returns the correct CSS for changing the bar's
   * position given an n percentage, and speed and ease from Settings
   */

  function barPositionCSS(n, speed, ease) {
    var barCSS;

    if (Settings.positionUsing === 'translate3d') {
      barCSS = { transform: 'translate3d('+toBarPerc(n)+'%,0,0)' };
    } else if (Settings.positionUsing === 'translate') {
      barCSS = { transform: 'translate('+toBarPerc(n)+'%,0)' };
    } else {
      barCSS = { 'margin-left': toBarPerc(n)+'%' };
    }

    barCSS.transition = 'all '+speed+'ms '+ease;

    return barCSS;
  }

  /**
   * (Internal) Queues a function to be executed.
   */

  var queue = (function() {
    var pending = [];

    function next() {
      var fn = pending.shift();
      if (fn) {
        fn(next);
      }
    }

    return function(fn) {
      pending.push(fn);
      if (pending.length == 1) next();
    };
  })();

  /**
   * (Internal) Applies css properties to an element, similar to the jQuery
   * css method.
   *
   * While this helper does assist with vendor prefixed property names, it
   * does not perform any manipulation of values prior to setting styles.
   */

  var css = (function() {
    var cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ],
        cssProps    = {};

    function camelCase(string) {
      return string.replace(/^-ms-/, 'ms-').replace(/-([\da-z])/gi, function(match, letter) {
        return letter.toUpperCase();
      });
    }

    function getVendorProp(name) {
      var style = document.body.style;
      if (name in style) return name;

      var i = cssPrefixes.length,
          capName = name.charAt(0).toUpperCase() + name.slice(1),
          vendorName;
      while (i--) {
        vendorName = cssPrefixes[i] + capName;
        if (vendorName in style) return vendorName;
      }

      return name;
    }

    function getStyleProp(name) {
      name = camelCase(name);
      return cssProps[name] || (cssProps[name] = getVendorProp(name));
    }

    function applyCss(element, prop, value) {
      prop = getStyleProp(prop);
      element.style[prop] = value;
    }

    return function(element, properties) {
      var args = arguments,
          prop,
          value;

      if (args.length == 2) {
        for (prop in properties) {
          value = properties[prop];
          if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value);
        }
      } else {
        applyCss(element, args[1], args[2]);
      }
    }
  })();

  /**
   * (Internal) Determines if an element or space separated list of class names contains a class name.
   */

  function hasClass(element, name) {
    var list = typeof element == 'string' ? element : classList(element);
    return list.indexOf(' ' + name + ' ') >= 0;
  }

  /**
   * (Internal) Adds a class to an element.
   */

  function addClass(element, name) {
    var oldList = classList(element),
        newList = oldList + name;

    if (hasClass(oldList, name)) return;

    // Trim the opening space.
    element.className = newList.substring(1);
  }

  /**
   * (Internal) Removes a class from an element.
   */

  function removeClass(element, name) {
    var oldList = classList(element),
        newList;

    if (!hasClass(element, name)) return;

    // Replace the class name.
    newList = oldList.replace(' ' + name + ' ', ' ');

    // Trim the opening and closing spaces.
    element.className = newList.substring(1, newList.length - 1);
  }

  /**
   * (Internal) Gets a space separated list of the class names on the element.
   * The list is wrapped with a single space on each end to facilitate finding
   * matches within the list.
   */

  function classList(element) {
    return (' ' + (element && element.className || '') + ' ').replace(/\s+/gi, ' ');
  }

  /**
   * (Internal) Removes an element from the DOM.
   */

  function removeElement(element) {
    element && element.parentNode && element.parentNode.removeChild(element);
  }

  return NProgress;
});

},{}],111:[function(require,module,exports){
module.exports = function(){

    var oasisMap = {

        openMap: function(options) {

            var options = options || {},
                width = options.width || '100%',
                height = options.height || '100%',
                path = window.oasisl_path || '';

            dialog.open({

                title: '地图',
                type: 2,
                html: true,
                maxmin: true,
                area: [width, height],
                content: path + '/oasisl/js/plugins/oasis-map/map.html',
                success: function(dom) {

                    var innerWindow = $(dom).find('iframe')[0].contentWindow;
                    var innerDocument = innerWindow.document;

                    $(innerDocument).ready(function() {

                         var mapjs = innerDocument.createElement('script');
                        innerDocument.body.appendChild(mapjs);
                        mapjs.src = options.gis + '?async=yes' || 'http://172.16.29.61:9150/FHGis/api/js?async=yes';
                        innerWindow.innerFunction(options);

                    })

                }

            });

        }

    }
    window.oasMap = oasisMap;
    return oasisMap;

}
},{}],112:[function(require,module,exports){
;(function(window) {
    var Path = {
        'version': "0.9",
        'map': function (path) {
            var str_path = Path._pathToString(path);
            if(Path.routes.defined.hasOwnProperty(str_path)) {
                return Path.routes.defined[str_path];
            } else {
                return new Path.core.route(path);
            }
        },
        'root': function (path) {
            Path.routes.root = path;
        },
        'rescue': function (fn) {
            Path.routes.rescue = fn;
        },
        'history': {
            'initial':{}, // Empty container for "Initial Popstate" checking variables.
            'pushState': function(state, title, path){
                if(Path.history.supported){
                    if(Path.dispatch(path)){
                        window.history.pushState(state, title, path);
                    }
                } else {
                    if(Path.history.fallback){
                        window.location.hash = "#" + path;
                    }
                }
            },
            'popState': function(event){
                var initialPop = !Path.history.initial.popped && window.location.href == Path.history.initial.URL;
                Path.history.initial.popped = true;
                if(initialPop) { 
                    return; 
                }
                
                Path.dispatch(document.location.pathname);
            },
            'listen': function(fallback){
                Path.history.supported = !!(window.history && window.history.pushState);
                Path.history.fallback  = fallback;

                if(Path.history.supported){
                    Path.history.initial.popped = ('state' in window.history);
                    Path.history.initial.URL = window.location.href;
                    window.onpopstate = Path.history.popState;
                } else {
                    if(Path.history.fallback){
                        for(route in Path.routes.defined){
                            if(route.charAt(0) != "#"){
                              Path.routes.defined["#"+route] = Path.routes.defined[route];
                              Path.routes.defined["#"+route].path = "#"+route;
                            }
                        }
                        Path.listen();
                    }
                }
            }
        },
        'match': function (path, parameterize) {
            var route = null;
            for (var _dpath in Path.routes.defined) {
                route = Path.routes.defined[_dpath];
                if(route && route.match(path, parameterize)) {
                    return route;
                } 
            }
            return null;
        },
        'dispatch': function (passed_route) {
            var previous_route, matched_route;
            if (Path.routes.current !== passed_route) {
                Path.routes.previous = Path.routes.current;
                Path.routes.current = passed_route;

                matched_route = Path.match(passed_route, true);

                if (Path.routes.previous) {
                    previous_route = Path.match(Path.routes.previous);
                    if (previous_route !== null && typeof previous_route.do_exit === 'function') {
                        previous_route.do_exit();
                    }
                }

                if (matched_route !== null) {
                    matched_route.run();
                    return true;
                } else {
                    if (Path.routes.rescue !== null) {
                        Path.routes.rescue();
                    }
                }
            }
        },
        'listen': function (callback) {
            // yswang add to hack legacy IE(6,7)
            Path._hackLegacyIE();
           
            var fn = function() {Path.dispatch(window.location.hash); callback && callback();};

            if(window.location.hash === "") {
                if (Path.routes.root !== null) {
                    window.location.hash = Path.routes.root;
                }
            }

            // The 'document.documentMode' checks below ensure that PathJS fires the right events
            // even in IE "Quirks Mode".
            if ("onhashchange" in window && (!document.documentMode || document.documentMode >= 8)) {
                window.onhashchange = fn;
            } else {
                setInterval(fn, 50);
            }

            if(window.location.hash !== "") {
                Path.dispatch(window.location.hash);
            }
        },
        'core': {
            'route': function (path) {
                this.path = Path._pathToString(path);
                // yswang
                this.pathKeys = [];
                this.pathRegExp = Path._pathRegExp(path, this.pathKeys, false, false);

                this.action = null;
                this.do_enter = [];
                this.do_exit = null;
                this.params = {};

                Path.routes.defined[Path._pathToString(path)] = this;
            }
        },
        'routes': {
            'current': null,
            'root': null,
            'rescue': null,
            'previous': null,
            'defined': {}
        },

        // yswang add to support complex path route
        '_pathToString': function(path) {
            if(Object.prototype.toString.call(path) === '[object Array]') {
                return '[' + path.join(',') + ']';
            }
             
            return path.toString();
        },
        '_pathRegExp': function(path, keys, sensitive, strict) {
            if (Object.prototype.toString.call(path) === '[object RegExp]') {
                return path;
            } 

            if (Object.prototype.toString.call(path) === '[object Array]') {
                path = '(' + path.join('|') + ')';
            }
            
            var _keys = [];
            path = path
                .concat(strict ? '' : '/?')
                // -- comment this to support path eg: /user/(\\d+)
                //.replace(/\/\(/g, '(?:/')
                .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?(\*)?/g, function(_, slash, format, key, capture, optional, star) {
                  
				  _keys.push({'name': key, 'optional': !! optional});

                  slash = slash || '';
                 
                  return ''
                        + (optional ? '' : slash)
                        + '(?:'
                        + (optional ? slash : '')
                        + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
                        + (optional || '')
                        + (star ? '(/*)?' : '');
                })
                .replace(/([\/.])/g, '\\$1')
                .replace(/\*/g, '(.*)');

            // ----- important：reset index position of saved keys -----
            if(Object.prototype.toString.call(keys) === '[object Array]' && _keys.length > 0) {
                var stack = [], group = [], paramIndexs = [];
                for(var i = 0, len = path.length; i < len; ++i) {
                    var c = path.charAt(i), 
                        _unescaped = path.charAt(i-1) !== '\\';
                    
                    if(c === '(' && _unescaped) {
                        stack.push(c);
                        group.push(c);
                    }
                    else if(c === ')' && _unescaped) {
                        stack.pop();
                        group.push(c);
                        
                        // regexp group match end
                        if(stack.length == 0) {
                            paramIndexs.push(group.join('').indexOf('?:') != -1 ? 1 : 0);
                            group = [];
                        }
                    }
                    else if(stack.length > 0) {
                        group.push(c);
                    }
                }
                
                // exist unmatched regexp group
                if(stack.length > 0) {
                    throw new Error('The Path regexp <'+ path +'> has unmatched group!');
                }
                
                // reset keys index
                var namedKeys = _keys.slice(0), c = 0;
                for(var j = 0, len = paramIndexs.length; j < len; ++j) {
                    keys.push((paramIndexs[j] == 1 && c < namedKeys.length) ? namedKeys[c++] : false);
                }
            }

            return new RegExp('^' + path + '$', sensitive ? '' : 'i');
        },
        // yswang add
        '_decode': function(str) {
            try {
                return decodeURIComponent(str);
            } catch (e) {
                return str;
            }
        },
        // yswang add hack ie < 8
        '_ieFrame': null, //iframe used for legacy IE (6-7)
        '_hackLegacyIE': function() {
            if(Path._ieFrame) {
                return;
            }

            //check if is IE6-7 since hash change is only supported on IE8+ and
            //changing hash value on IE6-7 doesn't generate history record.
            // (!+"\v1") -- check is ie
            var _isLegacyIE = (!+"\v1") && !("onhashchange" in window && (!document.documentMode || document.documentMode >= 8));
            if(!_isLegacyIE) {
                return;
            }

            var _ieFrame = document.createElement('iframe');
                _ieFrame.src = 'about:blank';
                _ieFrame.style.display = 'none';
                _ieFrame.setAttribute('tabindex', '-1');
                _ieFrame.attachEvent('onload', function() {
                    if(Path._ieFrame.frameHash && Path._ieFrame.frameHash != window.location.hash) {
                        window.location.hash = Path._ieFrame.frameHash;
                    }
                });

            document.body.appendChild(_ieFrame);

            Path._ieFrame = _ieFrame.contentWindow;
            _ieFrame = null;
        }
    };

    Path.core.route.prototype = {
        'to': function (fn) {
            this.action = fn;
            return this;
        },
        'enter': function (fns) {
            if (fns instanceof Array) {
                this.do_enter = this.do_enter.concat(fns);
            } else {
                this.do_enter.push(fns);
            }
            return this;
        },
        'exit': function (fn) {
            this.do_exit = fn;
            return this;
        },
        'partition': function () {
            var parts = [], options = [], re = /\(([^}]+?)\)/g, text, i;
            while (text = re.exec(this.path)) {
                parts.push(text[1]);
            }
            options.push(this.path.split("(")[0]);
            for (i = 0; i < parts.length; i++) {
                options.push(options[options.length - 1] + parts[i]);
            }
            return options;
        },
        'run': function () {
            var halt_execution = false, i, result, previous;
            if (Path.routes.defined[this.path].hasOwnProperty("do_enter")) {
                if (Path.routes.defined[this.path].do_enter.length > 0) {
                    for (i = 0; i < Path.routes.defined[this.path].do_enter.length; i++) {
                        result = Path.routes.defined[this.path].do_enter[i].call(this);
                        if (result === false) {
                            halt_execution = true;
                            break;
                        }
                    }
                }
            }

            if (!halt_execution) {
                Path.routes.defined[this.path].action();
            }

            // supported legacy IE(6,7)
            if(Path._ieFrame) {
                var _hash = window.location.hash;
                if(_hash != Path._ieFrame.frameHash) {
                    _hash = _hash.replace(/"/g, '\\"');
                    var frameDoc = Path._ieFrame.document;
                    frameDoc.open();
                    //update iframe content to force new history record.
                    frameDoc.write('<html><head><title>' + document.title + '</title><script type="text/javascript">var frameHash="' + _hash + '";</script></head><body>&nbsp;</body></html>');
                    frameDoc.close();
                }
            }
        },
        // yswang add route match given url path
        'match': function(path, parameterize) {
            var m = this.pathRegExp.exec(path);
            if(!m) {
                return false;
            } 

            if(parameterize) {
                var keys = this.pathKeys, keysSize = keys.length, key, val, params = [];
                for(var i = 1, len = m.length; i < len; ++i) {
                    key = keysSize >= i ? keys[i-1] : null;
                    val = 'string' == typeof m[i] ? Path._decode(m[i]) : m[i];
                    
                    if(key && key.name) {
                      params[key.name] = val;
                    } else {
                      params.push(val);
                    }
                }

                this.params = params;
            }

            return true;
        }
    };

    !this.Path && (this.Path = Path);

})(window);
},{}]},{},[9])(9)
});